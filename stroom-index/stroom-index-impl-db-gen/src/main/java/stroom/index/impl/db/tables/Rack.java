/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.index.impl.db.Indexes;
import stroom.index.impl.db.Keys;
import stroom.index.impl.db.Stroom;
import stroom.index.impl.db.tables.records.RackRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rack extends TableImpl<RackRecord> {

    private static final long serialVersionUID = 112596831;

    /**
     * The reference instance of <code>stroom.rack</code>
     */
    public static final Rack RACK = new Rack();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RackRecord> getRecordType() {
        return RackRecord.class;
    }

    /**
     * The column <code>stroom.rack.id</code>.
     */
    public final TableField<RackRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.rack.ver</code>.
     */
    public final TableField<RackRecord, Byte> VER = createField("ver", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.rack.created_by</code>.
     */
    public final TableField<RackRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.rack.created_at</code>.
     */
    public final TableField<RackRecord, Long> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.rack.updated_by</code>.
     */
    public final TableField<RackRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.rack.updated_at</code>.
     */
    public final TableField<RackRecord, Long> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.rack.name</code>.
     */
    public final TableField<RackRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.rack</code> table reference
     */
    public Rack() {
        this(DSL.name("rack"), null);
    }

    /**
     * Create an aliased <code>stroom.rack</code> table reference
     */
    public Rack(String alias) {
        this(DSL.name(alias), RACK);
    }

    /**
     * Create an aliased <code>stroom.rack</code> table reference
     */
    public Rack(Name alias) {
        this(alias, RACK);
    }

    private Rack(Name alias, Table<RackRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rack(Name alias, Table<RackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rack(Table<O> child, ForeignKey<O, RackRecord> key) {
        super(child, key, RACK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RACK_NAME, Indexes.RACK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RackRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RACK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RackRecord> getPrimaryKey() {
        return Keys.KEY_RACK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RackRecord>> getKeys() {
        return Arrays.<UniqueKey<RackRecord>>asList(Keys.KEY_RACK_PRIMARY, Keys.KEY_RACK_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rack as(String alias) {
        return new Rack(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rack as(Name alias) {
        return new Rack(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rack rename(String name) {
        return new Rack(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rack rename(Name name) {
        return new Rack(name, null);
    }
}
