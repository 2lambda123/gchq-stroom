/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.index.impl.db.Indexes;
import stroom.index.impl.db.Keys;
import stroom.index.impl.db.Stroom;
import stroom.index.impl.db.tables.records.NodeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Node extends TableImpl<NodeRecord> {

    private static final long serialVersionUID = 1646631360;

    /**
     * The reference instance of <code>stroom.node</code>
     */
    public static final Node NODE = new Node();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodeRecord> getRecordType() {
        return NodeRecord.class;
    }

    /**
     * The column <code>stroom.node.id</code>.
     */
    public final TableField<NodeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.node.ver</code>.
     */
    public final TableField<NodeRecord, Byte> VER = createField("ver", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.node.created_by</code>.
     */
    public final TableField<NodeRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.node.created_at</code>.
     */
    public final TableField<NodeRecord, Long> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.node.updated_by</code>.
     */
    public final TableField<NodeRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.node.updated_at</code>.
     */
    public final TableField<NodeRecord, Long> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.node.cluster_url</code>.
     */
    public final TableField<NodeRecord, String> CLUSTER_URL = createField("cluster_url", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.node.name</code>.
     */
    public final TableField<NodeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.node.prior</code>.
     */
    public final TableField<NodeRecord, Short> PRIOR = createField("prior", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>stroom.node.enable</code>.
     */
    public final TableField<NodeRecord, Boolean> ENABLE = createField("enable", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>stroom.node.fk_rack_id</code>.
     */
    public final TableField<NodeRecord, Integer> FK_RACK_ID = createField("fk_rack_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.node</code> table reference
     */
    public Node() {
        this(DSL.name("node"), null);
    }

    /**
     * Create an aliased <code>stroom.node</code> table reference
     */
    public Node(String alias) {
        this(DSL.name(alias), NODE);
    }

    /**
     * Create an aliased <code>stroom.node</code> table reference
     */
    public Node(Name alias) {
        this(alias, NODE);
    }

    private Node(Name alias, Table<NodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Node(Name alias, Table<NodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Node(Table<O> child, ForeignKey<O, NodeRecord> key) {
        super(child, key, NODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NODE_NAME, Indexes.NODE_NODE_FK_RACK_ID, Indexes.NODE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NodeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_NODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NodeRecord> getPrimaryKey() {
        return Keys.KEY_NODE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NodeRecord>> getKeys() {
        return Arrays.<UniqueKey<NodeRecord>>asList(Keys.KEY_NODE_PRIMARY, Keys.KEY_NODE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NodeRecord, ?>>asList(Keys.NODE_FK_RACK_ID);
    }

    public Rack rack() {
        return new Rack(this, Keys.NODE_FK_RACK_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Node as(String alias) {
        return new Node(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Node as(Name alias) {
        return new Node(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Node rename(String name) {
        return new Node(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Node rename(Name name) {
        return new Node(name, null);
    }
}
