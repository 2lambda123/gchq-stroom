/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.index.impl.db.Indexes;
import stroom.index.impl.db.Keys;
import stroom.index.impl.db.Stroom;
import stroom.index.impl.db.tables.records.IndexRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Index extends TableImpl<IndexRecord> {

    private static final long serialVersionUID = -765307167;

    /**
     * The reference instance of <code>stroom.index</code>
     */
    public static final Index INDEX = new Index();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndexRecord> getRecordType() {
        return IndexRecord.class;
    }

    /**
     * The column <code>stroom.index.id</code>.
     */
    public final TableField<IndexRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.index.version</code>.
     */
    public final TableField<IndexRecord, Byte> VERSION = createField("version", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.index.created_by</code>.
     */
    public final TableField<IndexRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.index.created_at</code>.
     */
    public final TableField<IndexRecord, Long> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.index.updated_by</code>.
     */
    public final TableField<IndexRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.index.updated_at</code>.
     */
    public final TableField<IndexRecord, Long> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.index.name</code>.
     */
    public final TableField<IndexRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.index.description</code>.
     */
    public final TableField<IndexRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.index.max_doc</code>.
     */
    public final TableField<IndexRecord, Integer> MAX_DOC = createField("max_doc", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.index.max_shard</code>.
     */
    public final TableField<IndexRecord, Integer> MAX_SHARD = createField("max_shard", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.index.partition_by</code>.
     */
    public final TableField<IndexRecord, Byte> PARTITION_BY = createField("partition_by", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>stroom.index.partition_size</code>.
     */
    public final TableField<IndexRecord, Integer> PARTITION_SIZE = createField("partition_size", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.index.retention_day_age</code>.
     */
    public final TableField<IndexRecord, Integer> RETENTION_DAY_AGE = createField("retention_day_age", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stroom.index.fields</code>.
     */
    public final TableField<IndexRecord, String> FIELDS = createField("fields", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.index.uuid</code>.
     */
    public final TableField<IndexRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.index</code> table reference
     */
    public Index() {
        this(DSL.name("index"), null);
    }

    /**
     * Create an aliased <code>stroom.index</code> table reference
     */
    public Index(String alias) {
        this(DSL.name(alias), INDEX);
    }

    /**
     * Create an aliased <code>stroom.index</code> table reference
     */
    public Index(Name alias) {
        this(alias, INDEX);
    }

    private Index(Name alias, Table<IndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private Index(Name alias, Table<IndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Index(Table<O> child, ForeignKey<O, IndexRecord> key) {
        super(child, key, INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<org.jooq.Index> getIndexes() {
        return Arrays.<org.jooq.Index>asList(Indexes.INDEX_PRIMARY, Indexes.INDEX_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndexRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INDEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndexRecord> getPrimaryKey() {
        return Keys.KEY_INDEX_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndexRecord>> getKeys() {
        return Arrays.<UniqueKey<IndexRecord>>asList(Keys.KEY_INDEX_PRIMARY, Keys.KEY_INDEX_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<IndexRecord, Byte> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Index as(String alias) {
        return new Index(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Index as(Name alias) {
        return new Index(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Index rename(String name) {
        return new Index(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Index rename(Name name) {
        return new Index(name, null);
    }
}
