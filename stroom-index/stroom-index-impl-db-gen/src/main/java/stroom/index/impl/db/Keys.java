/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import stroom.index.impl.db.tables.Index;
import stroom.index.impl.db.tables.IndexShard;
import stroom.index.impl.db.tables.IndexVolume;
import stroom.index.impl.db.tables.Node;
import stroom.index.impl.db.tables.Rack;
import stroom.index.impl.db.tables.records.IndexRecord;
import stroom.index.impl.db.tables.records.IndexShardRecord;
import stroom.index.impl.db.tables.records.IndexVolumeRecord;
import stroom.index.impl.db.tables.records.NodeRecord;
import stroom.index.impl.db.tables.records.RackRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>stroom</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<IndexRecord, Integer> IDENTITY_INDEX = Identities0.IDENTITY_INDEX;
    public static final Identity<IndexShardRecord, Integer> IDENTITY_INDEX_SHARD = Identities0.IDENTITY_INDEX_SHARD;
    public static final Identity<IndexVolumeRecord, Integer> IDENTITY_INDEX_VOLUME = Identities0.IDENTITY_INDEX_VOLUME;
    public static final Identity<NodeRecord, Integer> IDENTITY_NODE = Identities0.IDENTITY_NODE;
    public static final Identity<RackRecord, Integer> IDENTITY_RACK = Identities0.IDENTITY_RACK;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<IndexRecord> KEY_INDEX_PRIMARY = UniqueKeys0.KEY_INDEX_PRIMARY;
    public static final UniqueKey<IndexRecord> KEY_INDEX_UUID = UniqueKeys0.KEY_INDEX_UUID;
    public static final UniqueKey<IndexShardRecord> KEY_INDEX_SHARD_PRIMARY = UniqueKeys0.KEY_INDEX_SHARD_PRIMARY;
    public static final UniqueKey<IndexVolumeRecord> KEY_INDEX_VOLUME_PRIMARY = UniqueKeys0.KEY_INDEX_VOLUME_PRIMARY;
    public static final UniqueKey<IndexVolumeRecord> KEY_INDEX_VOLUME_NODE_NAME_PATH = UniqueKeys0.KEY_INDEX_VOLUME_NODE_NAME_PATH;
    public static final UniqueKey<NodeRecord> KEY_NODE_PRIMARY = UniqueKeys0.KEY_NODE_PRIMARY;
    public static final UniqueKey<NodeRecord> KEY_NODE_NAME = UniqueKeys0.KEY_NODE_NAME;
    public static final UniqueKey<RackRecord> KEY_RACK_PRIMARY = UniqueKeys0.KEY_RACK_PRIMARY;
    public static final UniqueKey<RackRecord> KEY_RACK_NAME = UniqueKeys0.KEY_RACK_NAME;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<IndexShardRecord, NodeRecord> INDEX_SHARD_FK_NODE_ID = ForeignKeys0.INDEX_SHARD_FK_NODE_ID;
    public static final ForeignKey<IndexShardRecord, IndexVolumeRecord> INDEX_SHARD_FK_VOLUME_ID = ForeignKeys0.INDEX_SHARD_FK_VOLUME_ID;
    public static final ForeignKey<NodeRecord, RackRecord> NODE_FK_RACK_ID = ForeignKeys0.NODE_FK_RACK_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<IndexRecord, Integer> IDENTITY_INDEX = Internal.createIdentity(Index.INDEX, Index.INDEX.ID);
        public static Identity<IndexShardRecord, Integer> IDENTITY_INDEX_SHARD = Internal.createIdentity(IndexShard.INDEX_SHARD, IndexShard.INDEX_SHARD.ID);
        public static Identity<IndexVolumeRecord, Integer> IDENTITY_INDEX_VOLUME = Internal.createIdentity(IndexVolume.INDEX_VOLUME, IndexVolume.INDEX_VOLUME.ID);
        public static Identity<NodeRecord, Integer> IDENTITY_NODE = Internal.createIdentity(Node.NODE, Node.NODE.ID);
        public static Identity<RackRecord, Integer> IDENTITY_RACK = Internal.createIdentity(Rack.RACK, Rack.RACK.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<IndexRecord> KEY_INDEX_PRIMARY = Internal.createUniqueKey(Index.INDEX, "KEY_index_PRIMARY", Index.INDEX.ID);
        public static final UniqueKey<IndexRecord> KEY_INDEX_UUID = Internal.createUniqueKey(Index.INDEX, "KEY_index_uuid", Index.INDEX.UUID);
        public static final UniqueKey<IndexShardRecord> KEY_INDEX_SHARD_PRIMARY = Internal.createUniqueKey(IndexShard.INDEX_SHARD, "KEY_index_shard_PRIMARY", IndexShard.INDEX_SHARD.ID);
        public static final UniqueKey<IndexVolumeRecord> KEY_INDEX_VOLUME_PRIMARY = Internal.createUniqueKey(IndexVolume.INDEX_VOLUME, "KEY_index_volume_PRIMARY", IndexVolume.INDEX_VOLUME.ID);
        public static final UniqueKey<IndexVolumeRecord> KEY_INDEX_VOLUME_NODE_NAME_PATH = Internal.createUniqueKey(IndexVolume.INDEX_VOLUME, "KEY_index_volume_node_name_path", IndexVolume.INDEX_VOLUME.NODE_NAME, IndexVolume.INDEX_VOLUME.PATH);
        public static final UniqueKey<NodeRecord> KEY_NODE_PRIMARY = Internal.createUniqueKey(Node.NODE, "KEY_node_PRIMARY", Node.NODE.ID);
        public static final UniqueKey<NodeRecord> KEY_NODE_NAME = Internal.createUniqueKey(Node.NODE, "KEY_node_NAME", Node.NODE.NAME);
        public static final UniqueKey<RackRecord> KEY_RACK_PRIMARY = Internal.createUniqueKey(Rack.RACK, "KEY_rack_PRIMARY", Rack.RACK.ID);
        public static final UniqueKey<RackRecord> KEY_RACK_NAME = Internal.createUniqueKey(Rack.RACK, "KEY_rack_NAME", Rack.RACK.NAME);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<IndexShardRecord, NodeRecord> INDEX_SHARD_FK_NODE_ID = Internal.createForeignKey(stroom.index.impl.db.Keys.KEY_NODE_PRIMARY, IndexShard.INDEX_SHARD, "index_shard_fk_node_id", IndexShard.INDEX_SHARD.FK_NODE_ID);
        public static final ForeignKey<IndexShardRecord, IndexVolumeRecord> INDEX_SHARD_FK_VOLUME_ID = Internal.createForeignKey(stroom.index.impl.db.Keys.KEY_INDEX_VOLUME_PRIMARY, IndexShard.INDEX_SHARD, "index_shard_fk_volume_id", IndexShard.INDEX_SHARD.FK_VOLUME_ID);
        public static final ForeignKey<NodeRecord, RackRecord> NODE_FK_RACK_ID = Internal.createForeignKey(stroom.index.impl.db.Keys.KEY_RACK_PRIMARY, Node.NODE, "node_fk_rack_id", Node.NODE.FK_RACK_ID);
    }
}
