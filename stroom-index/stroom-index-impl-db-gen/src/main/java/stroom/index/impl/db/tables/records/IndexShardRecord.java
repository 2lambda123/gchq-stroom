/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record20;
import org.jooq.Row20;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.index.impl.db.tables.IndexShard;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndexShardRecord extends UpdatableRecordImpl<IndexShardRecord> implements Record20<Integer, Byte, String, Long, String, Long, Integer, Long, Long, Integer, Long, Byte, Integer, Integer, String, Integer, String, Long, Long, String> {

    private static final long serialVersionUID = 1703178910;

    /**
     * Setter for <code>stroom.index_shard.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.index_shard.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.index_shard.version</code>.
     */
    public void setVersion(Byte value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.index_shard.version</code>.
     */
    public Byte getVersion() {
        return (Byte) get(1);
    }

    /**
     * Setter for <code>stroom.index_shard.created_by</code>.
     */
    public void setCreatedBy(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.index_shard.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(2);
    }

    /**
     * Setter for <code>stroom.index_shard.created_at</code>.
     */
    public void setCreatedAt(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.index_shard.created_at</code>.
     */
    public Long getCreatedAt() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>stroom.index_shard.updated_by</code>.
     */
    public void setUpdatedBy(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>stroom.index_shard.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(4);
    }

    /**
     * Setter for <code>stroom.index_shard.updated_at</code>.
     */
    public void setUpdatedAt(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>stroom.index_shard.updated_at</code>.
     */
    public Long getUpdatedAt() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>stroom.index_shard.commit_doc_count</code>.
     */
    public void setCommitDocCount(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>stroom.index_shard.commit_doc_count</code>.
     */
    public Integer getCommitDocCount() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>stroom.index_shard.commit_duration_ms</code>.
     */
    public void setCommitDurationMs(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>stroom.index_shard.commit_duration_ms</code>.
     */
    public Long getCommitDurationMs() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>stroom.index_shard.commit_ms</code>.
     */
    public void setCommitMs(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>stroom.index_shard.commit_ms</code>.
     */
    public Long getCommitMs() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>stroom.index_shard.doc_count</code>.
     */
    public void setDocCount(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>stroom.index_shard.doc_count</code>.
     */
    public Integer getDocCount() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>stroom.index_shard.file_size</code>.
     */
    public void setFileSize(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>stroom.index_shard.file_size</code>.
     */
    public Long getFileSize() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>stroom.index_shard.status</code>.
     */
    public void setStatus(Byte value) {
        set(11, value);
    }

    /**
     * Getter for <code>stroom.index_shard.status</code>.
     */
    public Byte getStatus() {
        return (Byte) get(11);
    }

    /**
     * Setter for <code>stroom.index_shard.old_index_id</code>.
     */
    public void setOldIndexId(Integer value) {
        set(12, value);
    }

    /**
     * Getter for <code>stroom.index_shard.old_index_id</code>.
     */
    public Integer getOldIndexId() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>stroom.index_shard.fk_node_id</code>.
     */
    public void setFkNodeId(Integer value) {
        set(13, value);
    }

    /**
     * Getter for <code>stroom.index_shard.fk_node_id</code>.
     */
    public Integer getFkNodeId() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>stroom.index_shard.partition</code>.
     */
    public void setPartition(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>stroom.index_shard.partition</code>.
     */
    public String getPartition() {
        return (String) get(14);
    }

    /**
     * Setter for <code>stroom.index_shard.fk_volume_id</code>.
     */
    public void setFkVolumeId(Integer value) {
        set(15, value);
    }

    /**
     * Getter for <code>stroom.index_shard.fk_volume_id</code>.
     */
    public Integer getFkVolumeId() {
        return (Integer) get(15);
    }

    /**
     * Setter for <code>stroom.index_shard.index_vesrion</code>.
     */
    public void setIndexVesrion(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>stroom.index_shard.index_vesrion</code>.
     */
    public String getIndexVesrion() {
        return (String) get(16);
    }

    /**
     * Setter for <code>stroom.index_shard.partition_from_ms</code>.
     */
    public void setPartitionFromMs(Long value) {
        set(17, value);
    }

    /**
     * Getter for <code>stroom.index_shard.partition_from_ms</code>.
     */
    public Long getPartitionFromMs() {
        return (Long) get(17);
    }

    /**
     * Setter for <code>stroom.index_shard.partition_to_ms</code>.
     */
    public void setPartitionToMs(Long value) {
        set(18, value);
    }

    /**
     * Getter for <code>stroom.index_shard.partition_to_ms</code>.
     */
    public Long getPartitionToMs() {
        return (Long) get(18);
    }

    /**
     * Setter for <code>stroom.index_shard.index_uuid</code>.
     */
    public void setIndexUuid(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>stroom.index_shard.index_uuid</code>.
     */
    public String getIndexUuid() {
        return (String) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record20 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row20<Integer, Byte, String, Long, String, Long, Integer, Long, Long, Integer, Long, Byte, Integer, Integer, String, Integer, String, Long, Long, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row20<Integer, Byte, String, Long, String, Long, Integer, Long, Long, Integer, Long, Byte, Integer, Integer, String, Integer, String, Long, Long, String> valuesRow() {
        return (Row20) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return IndexShard.INDEX_SHARD.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field2() {
        return IndexShard.INDEX_SHARD.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return IndexShard.INDEX_SHARD.CREATED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return IndexShard.INDEX_SHARD.CREATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return IndexShard.INDEX_SHARD.UPDATED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return IndexShard.INDEX_SHARD.UPDATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return IndexShard.INDEX_SHARD.COMMIT_DOC_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field8() {
        return IndexShard.INDEX_SHARD.COMMIT_DURATION_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field9() {
        return IndexShard.INDEX_SHARD.COMMIT_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field10() {
        return IndexShard.INDEX_SHARD.DOC_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field11() {
        return IndexShard.INDEX_SHARD.FILE_SIZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field12() {
        return IndexShard.INDEX_SHARD.STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field13() {
        return IndexShard.INDEX_SHARD.OLD_INDEX_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field14() {
        return IndexShard.INDEX_SHARD.FK_NODE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field15() {
        return IndexShard.INDEX_SHARD.PARTITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field16() {
        return IndexShard.INDEX_SHARD.FK_VOLUME_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field17() {
        return IndexShard.INDEX_SHARD.INDEX_VESRION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field18() {
        return IndexShard.INDEX_SHARD.PARTITION_FROM_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field19() {
        return IndexShard.INDEX_SHARD.PARTITION_TO_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field20() {
        return IndexShard.INDEX_SHARD.INDEX_UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component2() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component4() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component6() {
        return getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component7() {
        return getCommitDocCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component8() {
        return getCommitDurationMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component9() {
        return getCommitMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component10() {
        return getDocCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component11() {
        return getFileSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component12() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component13() {
        return getOldIndexId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component14() {
        return getFkNodeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component15() {
        return getPartition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component16() {
        return getFkVolumeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component17() {
        return getIndexVesrion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component18() {
        return getPartitionFromMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component19() {
        return getPartitionToMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component20() {
        return getIndexUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value2() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getCommitDocCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value8() {
        return getCommitDurationMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value9() {
        return getCommitMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value10() {
        return getDocCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value11() {
        return getFileSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value12() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value13() {
        return getOldIndexId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value14() {
        return getFkNodeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value15() {
        return getPartition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value16() {
        return getFkVolumeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value17() {
        return getIndexVesrion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value18() {
        return getPartitionFromMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value19() {
        return getPartitionToMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value20() {
        return getIndexUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value2(Byte value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value3(String value) {
        setCreatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value4(Long value) {
        setCreatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value5(String value) {
        setUpdatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value6(Long value) {
        setUpdatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value7(Integer value) {
        setCommitDocCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value8(Long value) {
        setCommitDurationMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value9(Long value) {
        setCommitMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value10(Integer value) {
        setDocCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value11(Long value) {
        setFileSize(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value12(Byte value) {
        setStatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value13(Integer value) {
        setOldIndexId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value14(Integer value) {
        setFkNodeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value15(String value) {
        setPartition(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value16(Integer value) {
        setFkVolumeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value17(String value) {
        setIndexVesrion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value18(Long value) {
        setPartitionFromMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value19(Long value) {
        setPartitionToMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord value20(String value) {
        setIndexUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexShardRecord values(Integer value1, Byte value2, String value3, Long value4, String value5, Long value6, Integer value7, Long value8, Long value9, Integer value10, Long value11, Byte value12, Integer value13, Integer value14, String value15, Integer value16, String value17, Long value18, Long value19, String value20) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IndexShardRecord
     */
    public IndexShardRecord() {
        super(IndexShard.INDEX_SHARD);
    }

    /**
     * Create a detached, initialised IndexShardRecord
     */
    public IndexShardRecord(Integer id, Byte version, String createdBy, Long createdAt, String updatedBy, Long updatedAt, Integer commitDocCount, Long commitDurationMs, Long commitMs, Integer docCount, Long fileSize, Byte status, Integer oldIndexId, Integer fkNodeId, String partition, Integer fkVolumeId, String indexVesrion, Long partitionFromMs, Long partitionToMs, String indexUuid) {
        super(IndexShard.INDEX_SHARD);

        set(0, id);
        set(1, version);
        set(2, createdBy);
        set(3, createdAt);
        set(4, updatedBy);
        set(5, updatedAt);
        set(6, commitDocCount);
        set(7, commitDurationMs);
        set(8, commitMs);
        set(9, docCount);
        set(10, fileSize);
        set(11, status);
        set(12, oldIndexId);
        set(13, fkNodeId);
        set(14, partition);
        set(15, fkVolumeId);
        set(16, indexVesrion);
        set(17, partitionFromMs);
        set(18, partitionToMs);
        set(19, indexUuid);
    }
}
