/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.moduleName = 'stroom.auth.svc'

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow' 
apply plugin: 'com.benjaminsproule.swagger'
apply plugin: 'org.flywaydb.flyway'

//TODO comment out for migration
mainClassName = 'stroom.auth.service.App'

//TODO commented out for migration
//jar {
//    manifest {
//        attributes (
//            "Implementation-Title": "Stroom Auth Service",
//            "Implementation-Version": versions.stroomAuth,
//            "Main-Class": "stroom.auth.service.App"
//        )
//    }
//
//    archiveName 'stroom-auth-service.jar'
//}

//TODO commented out for migration
//shadowJar {
//    // Allows us to build fat jars with lots of files
//    zip64 true
//    mergeServiceFiles()
//    archiveName 'stroom-auth-service-all.jar'
//}

//TODO commented out for migration
//sourceSets {
//    // This lets us use different directories for our integration tests.
//    integrationTest {
//        java {
//            compileClasspath += main.output + test.output
//            runtimeClasspath += main.output + test.output
//            srcDir file('src/integration-test/java')
//        }
//        resources.srcDir file('src/integration-test/resources')
//    }
//}

//TODO commented out for migration
// Configure the run task to start the Dropwizard service
//run {
//    args 'server', './config.generated.yml'
//}

dependencies {
    compile project(':stroom-auth:stroom-persistence')
    compile project(':stroom-auth:stroom-auth-service-api')
    compile project(':stroom-util-shared')
    compile project(':stroom-db-util')
    compile project(':stroom-util')
    compile authDeps.dropwizard_core
    compile authDeps.dropwizard_flyway
    compile authDeps.dropwizard_jooq
    compile authDeps.dropwizard_jersey
    compile authDeps.dropwizard_auth
    compile authDeps.dropwizard_auth_jwt
    compile authDeps.bcrypt
    compile authDeps.jose4j
    compile authDeps.guice
    compile authDeps.slf4j
    compile authDeps.shiro_core
    compile authDeps.flyway_core
    compile authDeps.curator_service_discovery
    compile authDeps.simple_java_mail
    compile authDeps.swagger_annotations
    compile authDeps.eventLogging
    compile authDeps.jaxb_api
    compile authDeps.jaxb_core
    compile authDeps.jaxb_impl
    compile authDeps.javax_activation

    runtime authDeps.mysql_connector_java

    testCompile project(':stroom-auth:stroom-auth-svc')
    testCompile authTestDeps.junit
    testCompile authTestDeps.assertj
    testCompile authTestDeps.wiremock
    testCompile authTestDeps.test_containers_mysql
    testCompile authTestDeps.mockito
    testCompile authTestDeps.junit_jupiter
    testCompile authTestDeps.moshi
    testCompile authTestDeps.dropwizard_testing
    testCompile authTestDeps.unirest

    // TODO: commented out for mgiration
//    integrationTestCompile testDeps.dropwizard_testing
//    integrationTestCompile testDeps.moshi
//    integrationTestCompile testDeps.unirest
}

def apiProjectRoot = "${projectDir}/../stroom-auth-service-api"

swagger {
    apiSource {
        springmvc = false //makes it search for jersey annotations
        outputFormats = 'json,yaml'
        locations = [
                'stroom.auth.resources.token.v1.TokenResource',
                'stroom.auth.resources.token.v1.SearchRequest',
                'stroom.auth.resources.token.v1.SearchResponse',
                'stroom.auth.resources.token.v1.Token',
                'stroom.auth.resources.token.v1.CreateTokenRequest',

                'stroom.auth.resources.authentication.v1.AuthenticationResource',
                'stroom.auth.resources.authentication.v1.Credentials',
                'stroom.auth.resources.authentication.v1.IdTokenRequest',

                'stroom.auth.resources.session.v1.SessionResource',

                'stroom.auth.resources.user.v1.UserResource',
                'stroom.auth.resources.user.v1.User',
                'javax.ws.rs.core.Response']
        schemes = [
                'http',
                'https' ]
        host = 'localhost:8080'
        basePath = '/'
        info {
            title = 'Stroom Auth API'
            version = 'v1'
            description = 'Various APIs for interacting with authentication, users, and tokens.'
            contact {
                name = 'GCHQ'
                url = 'https://github.com/gchq/stroom-auth'
            }
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        outputPath = "$apiProjectRoot/generated/document.html"
        swaggerDirectory = "./swagger"
    }
}

//TODO this depends on the YAML being generated - make it a gradle dep

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator
def sourceFolder = "$apiProjectRoot/src/main/java"
task generateSwaggerApi {
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("./swagger/swagger.yaml")
        config.setOutputDir("$apiProjectRoot")
        config.setLang('java')
        config.setAdditionalProperties([
                'interfaceOnly' : 'true',
                'apiPackage'    : 'stroom.auth.service.api',
                'modelPackage'  : 'stroom.auth.service.api.model',
                'sourceFolder'  : 'src/main/java'
        ])
        new org.jooq.codegen.DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}
