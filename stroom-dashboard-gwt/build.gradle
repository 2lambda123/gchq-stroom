ext.moduleName = 'stroom.dashboard.gwt'

def resourcesDir = project(':stroom-app').file('src/main/resources')
def unitCacheDir = "${resourcesDir}/gwt-unitCache"
def warDir = "${resourcesDir}/ui"
def outputDir = "${warDir}/dashboard"

def gwtBuildDir = "${project.buildDir}/gwt"
def tmpDir = "${gwtBuildDir}/tmp"
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"

dependencies {
    compile project(':stroom-core-client')
    compile project(':stroom-core-client-widget')
    compile project(':stroom-dashboard:stroom-dashboard-client')
    compile project(':stroom-security:stroom-security-client')

    compile "${libs.stroomDocRef}:sources"
    permitUnusedDeclared libs.stroomDocRef
    permitUnusedDeclared "${libs.stroomDocRef}:sources"
    compile "${libs.stroomQueryApi}:sources"
    permitUnusedDeclared libs.stroomQueryApi
    permitUnusedDeclared "${libs.stroomQueryApi}:sources"
    compile "${libs.stroomQueryCommon}:sources"
    permitUnusedDeclared libs.stroomQueryCommon
    permitUnusedDeclared "${libs.stroomQueryCommon}:sources"

    compile libs.gin
    compile libs.guice3
    compile libs.gwt_dev
    permitUnusedDeclared libs.gwt_dev
    compile libs.gwt_servlet
    permitUnusedDeclared libs.gwt_servlet
    compile libs.gwt_user
    compile libs.gwtp_mvp_client

    //needed so gwt can compile the stroom-query code that contains swagger annotations
    compile "${libs.swagger_annotations}"
    permitUnusedDeclared "${libs.swagger_annotations}"
    compile "${libs.swagger_annotations}:sources"
    permitUnusedDeclared "${libs.swagger_annotations}:sources"
}

def gwtSourceDirs = []
parent.subprojects.each { p ->
    if (p.name != 'stroom-app-gwt') {
        gwtSourceDirs.addAll(p.sourceSets.main.output.classesDirs)
        gwtSourceDirs.addAll(p.sourceSets.main.java.srcDirs)
        gwtSourceDirs.addAll(p.sourceSets.main.resources.srcDirs)
    }
}
gwtSourceDirs.addAll(sourceSets.main.compileClasspath)

//println "Dumping gwtSourceDirs contents"
//gwtSourceDirs.each { dir -> 
    //println dir
//}

task gwtCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardApp'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir

        println "Making directory gwtBuildDir $gwtBuildDir"
        file(gwtBuildDir).mkdirs()
        println "Making directory tmpDir $tmpDir"
        file(tmpDir).mkdirs()
        println "Making directory workDir $workDir"
        file(workDir).mkdirs()
        println "Making directory deployDir $deployDir"
        file(deployDir).mkdirs()
        println "Making directory extraDir $extraDir"
        file(extraDir).mkdirs()

        //println "Dumping gwtSourceDirs"
        //gwtSourceDirs.each {
            //println "${it.toString()}"
        //}
    }

    main = gwtCompilerProps.mainClass

    classpath {
        gwtSourceDirs
    }

    args =
        [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-XfragmentCount', '5',
            '-optimize', '9',
            '-failOnError',
            '-localWorkers', gwtCompilerProps.workers,
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                               // Your GWT module
        ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardAppSuperDevModeChrome'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        gwtSourceDirs
    }

    args =
        [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-draftCompile',                        // Speeds up compile with 25%
            '-XfragmentCount', '0',
            '-optimize', '0',
            '-failOnError',
            '-localWorkers', '5',
            '-incremental',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                                  // Your GWT module
        ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardAppSuperDevModeChrome'

//    def dirs = []
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("java") {dirs << it}}}}
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("resources") {dirs << it}}}}
//    println dirs

    doFirst {
        println "Making directory gwtBuildDir $gwtBuildDir"
        file(gwtBuildDir).mkdirs()
        println "Making directory tmpDir $tmpDir"
        file(tmpDir).mkdirs()
        println "Making directory workDir $workDir"
        file(workDir).mkdirs()
        println "Making directory deployDir $deployDir"
        file(deployDir).mkdirs()
        println "Making directory extraDir $extraDir"
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.DevMode'

    classpath {
        gwtSourceDirs
    }

    args =
        [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-failOnError',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            '-noserver',
            module                                  // Your GWT module
        ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtClean {
    doLast {
        println 'Deleting GWT unit cache: ' + unitCacheDir.toString()
        delete unitCacheDir
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir
        println "Making directory gwtBuildDir $gwtBuildDir"
        file(gwtBuildDir).mkdirs()
        println "Making directory tmpDir $tmpDir"
        file(tmpDir).mkdirs()
    }
}

gwtCompile.onlyIf { !project.hasProperty('skipGWT') }
build.dependsOn gwtCompile
