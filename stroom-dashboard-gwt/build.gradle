//ext {
    def warDir = project(':stroom-dropwizard').file("src/main/resources/ui")
    def outputDir = "${warDir}/dashboard"

def gwtBuildDir = "${project.buildDir}/gwt"
def tmpDir = "${gwtBuildDir}/tmp"
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"

    println 'warDir: ' + warDir.toString()
    println 'outputDir: ' + outputDir.toString()
    println 'gwtBuildDir: ' + gwtBuildDir.toString()
    println 'tmpDir: ' + tmpDir.toString()
    println 'workDir: ' + workDir.toString()
    println 'deployDir: ' + deployDir.toString()
    println 'extraDir: ' + extraDir.toString()
//}

dependencies {
    compile project(':stroom-dashboard-client')

    compile project(path: ':stroom-dashboard-client', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-dashboard-shared', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-query-api', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-entity-shared', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-util-shared', configuration: 'sourceArtifacts')

    compile project(path: ':stroom-security-client', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-security-shared', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-security-api', configuration: 'sourceArtifacts')

    compile project(path: ':stroom-core-client', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-security-client-api', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-core-client-widget', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-core-shared', configuration: 'sourceArtifacts')

    compile 'com.google.gwt.inject:gin:2.1.2'
    compile 'com.google.gwt:gwt-dev:2.8.0'
}

task gwtCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardApp'

    doFirst {
        println 'QQQQQQQQ'
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
                sourceSets.main.java.srcDirs,           // Java source
                sourceSets.main.output.resourcesDir,    // Generated resources
                sourceSets.main.output.classesDir,      // Generated classes
                sourceSets.main.compileClasspath,       // Deps
        ]
    }

    args =
            [
                    '-logLevel', 'INFO',
                    '-workDir', workDir,
                    '-XfragmentCount', '5',
                    '-optimize', '9',
                    '-failOnError',
                    '-localWorkers', '5',
                    '-war', warDir,
                    '-deploy', deployDir,
                    '-extra', extraDir,
                    '-strict',
                    module                               // Your GWT module
            ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardAppSuperDevModeChrome'

    doFirst {
        println 'XXXXXXX'
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
                sourceSets.main.java.srcDirs,           // Java source
                sourceSets.main.output.resourcesDir,    // Generated resources
                sourceSets.main.output.classesDir,      // Generated classes
                sourceSets.main.compileClasspath,       // Deps
        ]
    }

    args =
            [
                    '-logLevel', 'INFO',
                    '-workDir', workDir,
                    '-draftCompile',                        // Speeds up compile with 25%
                    '-XfragmentCount', '0',
                    '-optimize', '0',
                    '-failOnError',
                    '-localWorkers', '5',
                    '-incremental',
                    '-war', warDir,
                    '-deploy', deployDir,
                    '-extra', extraDir,
                    '-strict',
                    module                                  // Your GWT module
            ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardAppSuperDevModeChrome'

    doFirst {
        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.DevMode'

    classpath {
        [
                sourceSets.main.java.srcDirs,           // Java source
                sourceSets.main.output.resourcesDir,    // Generated resources
                sourceSets.main.output.classesDir,      // Generated classes
                sourceSets.main.compileClasspath,       // Deps
        ]
    }

    args =
            [
                    '-logLevel', 'INFO',
                    '-workDir', workDir,
                    '-failOnError',
                    '-war', warDir,
                    '-deploy', deployDir,
                    '-extra', extraDir,
                    '-strict',
                    '-noserver',
                    module                                  // Your GWT module
            ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtClean(type: Delete) {
    println 'ZZZZZZZZZZ'
    println 'Deleting GWT compiled output: ' + outputDir.toString()
    delete outputDir
    println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
    delete gwtBuildDir
    file(gwtBuildDir).mkdirs()
    file(tmpDir).mkdirs()
}

gwtCompile.onlyIf { !project.hasProperty('skipGWT') }
build.dependsOn('gwtCompile')