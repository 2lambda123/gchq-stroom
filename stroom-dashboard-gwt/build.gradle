dependencies {
    compile project(':stroom-dashboard-client')

    compile project(path: ':stroom-dashboard-client', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-dashboard-shared', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-query-api', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-entity-shared', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-util-shared', configuration: 'sourceArtifacts')

    compile project(path: ':stroom-security-client', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-security-shared', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-security-api', configuration: 'sourceArtifacts')

    compile project(path: ':stroom-core-client', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-security-client-api', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-core-client-widget', configuration: 'sourceArtifacts')
    compile project(path: ':stroom-core-shared', configuration: 'sourceArtifacts')

    compile group: 'com.google.gwt.inject', name: 'gin', version: '2.1.2'
    compile group: 'com.google.gwt', name: 'gwt-dev', version: '2.8.0'
}

task gwtCompile (dependsOn: classes, type: JavaExec) {
    ext.gwtBuildDir = "${project.buildDir}/gwt"
    def warDir = project(':stroom-app').file("src/main/webapp")
    def workDir = "${gwtBuildDir}/work"
    def tmpDir = "${gwtBuildDir}/tmp"
    def deployDir = "${gwtBuildDir}/deploy"
    def extraDir = "${gwtBuildDir}/extra"
    def outputDir = "${warDir}/dashboard"
    def module = 'stroom.dashboard.DashboardApp'

    doFirst {
        file(outputDir).delete()
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
                sourceSets.main.java.srcDirs,           // Java source
                sourceSets.main.output.resourcesDir,    // Generated resources
                sourceSets.main.output.classesDir,      // Generated classes
                sourceSets.main.compileClasspath,       // Deps
        ]
    }

    jvmArgs =
            [
                    "-Djava.io.tmpdir=${tmpDir}"
            ]

    args =
            [
                    '-logLevel', 'INFO',
                    '-workDir', workDir,
                    '-XfragmentCount', '5',
                    '-optimize', '9',
                    '-failOnError',
                    '-localWorkers', '5',
                    '-war', warDir,
                    '-deploy', deployDir,
                    '-extra', extraDir,
                    '-strict',
                    module                               // Your GWT module
            ]

    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtDevMode (dependsOn: classes, type: JavaExec) {
    ext.gwtBuildDir = "${project.buildDir}/gwt"
    def warDir = project(':stroom-app').file("src/main/webapp")
    def workDir = "${gwtBuildDir}/work"
    def tmpDir = "${gwtBuildDir}/tmp"
    def deployDir = "${gwtBuildDir}/deploy"
    def extraDir = "${gwtBuildDir}/extra"
    def outputDir = "${warDir}/dashboard"
    def module = 'stroom.dashboard.DashboardAppSuperDevModeChrome'

    doFirst {
        file(outputDir).delete()
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
                sourceSets.main.java.srcDirs,           // Java source
                sourceSets.main.output.resourcesDir,    // Generated resources
                sourceSets.main.output.classesDir,      // Generated classes
                sourceSets.main.compileClasspath,       // Deps
        ]
    }

    args =
        [
                '-logLevel', 'INFO',
                '-workDir', workDir,
                '-draftCompile',                        // Speeds up compile with 25%
                '-XfragmentCount', '0',
                '-optimize', '0',
                '-failOnError',
                '-localWorkers', '5',
                '-incremental',
                '-war', warDir,
                '-deploy', deployDir,
                '-extra', extraDir,
                '-strict',
                module                                  // Your GWT module
        ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

build.dependsOn('gwtCompile')