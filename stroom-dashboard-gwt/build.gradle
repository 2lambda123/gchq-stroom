def warDir = project(':stroom-app').file('src/main/resources/ui')
def outputDir = "${warDir}/dashboard"

def gwtBuildDir = "${project.buildDir}/gwt"
def tmpDir = "${gwtBuildDir}/tmp"
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"
def gwtCompilerMain =  'stroom.gwt.GwtCompilerWrapper'
def gwtCompilerMinHeap = '50M'
def gwtCompilerMaxHeap = '400M'

def gwtSourceDirs = []
parent.subprojects.each { p ->
    if (p.name != 'stroom-app-gwt') {
        gwtSourceDirs << p.sourceSets.main.output.classesDir
        gwtSourceDirs << p.sourceSets.main.java.srcDirs
        gwtSourceDirs << p.sourceSets.main.resources.srcDirs
    }
}
gwtSourceDirs << sourceSets.main.compileClasspath

// We need to add the sources of GitHub dependencies.
gwtSourceDirs.add(files(urlDependencies.getAsFile(urlDependencies.getAsPath(urlLibs.stroomQueryApiSources))).getAsPath())
gwtSourceDirs.add(files(urlDependencies.getAsFile(urlDependencies.getAsPath(urlLibs.stroomQueryApi))).getAsPath())

dependencies {
    compile project(':stroom-core-client')
    compile project(':stroom-core-client-widget')
    compile project(':stroom-dashboard-client')
    compile project(':stroom-security-client')

    compile libs.gin
    compile libs.guice
    compile libs.gwt_dev
    permitUnusedDeclared libs.gwt_dev
    compile libs.gwt_servlet
    permitUnusedDeclared libs.gwt_servlet
    compile libs.gwt_user
    compile libs.gwtp_mvp_client
}

task gwtCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardApp'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = gwtCompilerMain

    classpath {
        gwtSourceDirs
    }

    args =
            [
                    '-logLevel', 'INFO',
                    '-workDir', workDir,
                    '-XfragmentCount', '5',
                    '-optimize', '9',
                    '-failOnError',
                    '-localWorkers', '5',
                    '-war', warDir,
                    '-deploy', deployDir,
                    '-extra', extraDir,
                    '-strict',
                    module                               // Your GWT module
            ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = gwtCompilerMinHeap
    maxHeapSize = gwtCompilerMaxHeap
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardAppSuperDevModeChrome'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = gwtCompilerMain

    classpath {
        gwtSourceDirs
    }

    args =
            [
                    '-logLevel', 'INFO',
                    '-workDir', workDir,
                    '-draftCompile',                        // Speeds up compile with 25%
                    '-XfragmentCount', '0',
                    '-optimize', '0',
                    '-failOnError',
                    '-localWorkers', '5',
                    '-incremental',
                    '-war', warDir,
                    '-deploy', deployDir,
                    '-extra', extraDir,
                    '-strict',
                    module                                  // Your GWT module
            ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = gwtCompilerMinHeap
    maxHeapSize = gwtCompilerMaxHeap
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.dashboard.DashboardAppSuperDevModeChrome'

//    def dirs = []
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("java") {dirs << it}}}}
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("resources") {dirs << it}}}}
//    println dirs

    doFirst {
        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.DevMode'

    classpath {
        gwtSourceDirs
    }

    args =
            [
                    '-logLevel', 'INFO',
                    '-workDir', workDir,
                    '-failOnError',
                    '-war', warDir,
                    '-deploy', deployDir,
                    '-extra', extraDir,
                    '-strict',
                    '-noserver',
                    module                                  // Your GWT module
            ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = gwtCompilerMinHeap
    maxHeapSize = gwtCompilerMaxHeap
}

task gwtClean {
    doLast {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
    }
}

gwtCompile.onlyIf { !project.hasProperty('skipGWT') }
build.dependsOn('gwtCompile')
