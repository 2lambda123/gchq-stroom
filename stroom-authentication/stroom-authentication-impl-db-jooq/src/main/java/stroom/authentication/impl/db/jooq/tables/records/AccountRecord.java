/*
 * This file is generated by jOOQ.
 */
package stroom.authentication.impl.db.jooq.tables.records;


import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.authentication.impl.db.jooq.tables.Account;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record18<Integer, String, String, Timestamp, String, String, String, String, Integer, Integer, Timestamp, Timestamp, String, Timestamp, String, Boolean, Timestamp, Boolean> {

    private static final long serialVersionUID = -1433006116;

    /**
     * Setter for <code>stroom.account.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.account.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.account.email</code>.
     */
    public void setEmail(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.account.email</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>stroom.account.password_hash</code>.
     */
    public void setPasswordHash(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.account.password_hash</code>.
     */
    public String getPasswordHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>stroom.account.password_last_changed</code>.
     */
    public void setPasswordLastChanged(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.account.password_last_changed</code>.
     */
    public Timestamp getPasswordLastChanged() {
        return (Timestamp) get(3);
    }

    /**
     * Setter for <code>stroom.account.state</code>.
     */
    public void setState(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>stroom.account.state</code>.
     */
    public String getState() {
        return (String) get(4);
    }

    /**
     * Setter for <code>stroom.account.first_name</code>.
     */
    public void setFirstName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>stroom.account.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>stroom.account.last_name</code>.
     */
    public void setLastName(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>stroom.account.last_name</code>.
     */
    public String getLastName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>stroom.account.comments</code>.
     */
    public void setComments(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>stroom.account.comments</code>.
     */
    public String getComments() {
        return (String) get(7);
    }

    /**
     * Setter for <code>stroom.account.login_failures</code>.
     */
    public void setLoginFailures(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>stroom.account.login_failures</code>.
     */
    public Integer getLoginFailures() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>stroom.account.login_count</code>.
     */
    public void setLoginCount(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>stroom.account.login_count</code>.
     */
    public Integer getLoginCount() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>stroom.account.last_login</code>.
     */
    public void setLastLogin(Timestamp value) {
        set(10, value);
    }

    /**
     * Getter for <code>stroom.account.last_login</code>.
     */
    public Timestamp getLastLogin() {
        return (Timestamp) get(10);
    }

    /**
     * Setter for <code>stroom.account.created_on</code>.
     */
    public void setCreatedOn(Timestamp value) {
        set(11, value);
    }

    /**
     * Getter for <code>stroom.account.created_on</code>.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(11);
    }

    /**
     * Setter for <code>stroom.account.created_by_user</code>.
     */
    public void setCreatedByUser(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>stroom.account.created_by_user</code>.
     */
    public String getCreatedByUser() {
        return (String) get(12);
    }

    /**
     * Setter for <code>stroom.account.updated_on</code>.
     */
    public void setUpdatedOn(Timestamp value) {
        set(13, value);
    }

    /**
     * Getter for <code>stroom.account.updated_on</code>.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(13);
    }

    /**
     * Setter for <code>stroom.account.updated_by_user</code>.
     */
    public void setUpdatedByUser(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>stroom.account.updated_by_user</code>.
     */
    public String getUpdatedByUser() {
        return (String) get(14);
    }

    /**
     * Setter for <code>stroom.account.never_expires</code>.
     */
    public void setNeverExpires(Boolean value) {
        set(15, value);
    }

    /**
     * Getter for <code>stroom.account.never_expires</code>.
     */
    public Boolean getNeverExpires() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>stroom.account.reactivated_date</code>.
     */
    public void setReactivatedDate(Timestamp value) {
        set(16, value);
    }

    /**
     * Getter for <code>stroom.account.reactivated_date</code>.
     */
    public Timestamp getReactivatedDate() {
        return (Timestamp) get(16);
    }

    /**
     * Setter for <code>stroom.account.force_password_change</code>.
     */
    public void setForcePasswordChange(Boolean value) {
        set(17, value);
    }

    /**
     * Getter for <code>stroom.account.force_password_change</code>.
     */
    public Boolean getForcePasswordChange() {
        return (Boolean) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, String, String, Timestamp, String, String, String, String, Integer, Integer, Timestamp, Timestamp, String, Timestamp, String, Boolean, Timestamp, Boolean> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<Integer, String, String, Timestamp, String, String, String, String, Integer, Integer, Timestamp, Timestamp, String, Timestamp, String, Boolean, Timestamp, Boolean> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.EMAIL;
    }

    @Override
    public Field<String> field3() {
        return Account.ACCOUNT.PASSWORD_HASH;
    }

    @Override
    public Field<Timestamp> field4() {
        return Account.ACCOUNT.PASSWORD_LAST_CHANGED;
    }

    @Override
    public Field<String> field5() {
        return Account.ACCOUNT.STATE;
    }

    @Override
    public Field<String> field6() {
        return Account.ACCOUNT.FIRST_NAME;
    }

    @Override
    public Field<String> field7() {
        return Account.ACCOUNT.LAST_NAME;
    }

    @Override
    public Field<String> field8() {
        return Account.ACCOUNT.COMMENTS;
    }

    @Override
    public Field<Integer> field9() {
        return Account.ACCOUNT.LOGIN_FAILURES;
    }

    @Override
    public Field<Integer> field10() {
        return Account.ACCOUNT.LOGIN_COUNT;
    }

    @Override
    public Field<Timestamp> field11() {
        return Account.ACCOUNT.LAST_LOGIN;
    }

    @Override
    public Field<Timestamp> field12() {
        return Account.ACCOUNT.CREATED_ON;
    }

    @Override
    public Field<String> field13() {
        return Account.ACCOUNT.CREATED_BY_USER;
    }

    @Override
    public Field<Timestamp> field14() {
        return Account.ACCOUNT.UPDATED_ON;
    }

    @Override
    public Field<String> field15() {
        return Account.ACCOUNT.UPDATED_BY_USER;
    }

    @Override
    public Field<Boolean> field16() {
        return Account.ACCOUNT.NEVER_EXPIRES;
    }

    @Override
    public Field<Timestamp> field17() {
        return Account.ACCOUNT.REACTIVATED_DATE;
    }

    @Override
    public Field<Boolean> field18() {
        return Account.ACCOUNT.FORCE_PASSWORD_CHANGE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getEmail();
    }

    @Override
    public String component3() {
        return getPasswordHash();
    }

    @Override
    public Timestamp component4() {
        return getPasswordLastChanged();
    }

    @Override
    public String component5() {
        return getState();
    }

    @Override
    public String component6() {
        return getFirstName();
    }

    @Override
    public String component7() {
        return getLastName();
    }

    @Override
    public String component8() {
        return getComments();
    }

    @Override
    public Integer component9() {
        return getLoginFailures();
    }

    @Override
    public Integer component10() {
        return getLoginCount();
    }

    @Override
    public Timestamp component11() {
        return getLastLogin();
    }

    @Override
    public Timestamp component12() {
        return getCreatedOn();
    }

    @Override
    public String component13() {
        return getCreatedByUser();
    }

    @Override
    public Timestamp component14() {
        return getUpdatedOn();
    }

    @Override
    public String component15() {
        return getUpdatedByUser();
    }

    @Override
    public Boolean component16() {
        return getNeverExpires();
    }

    @Override
    public Timestamp component17() {
        return getReactivatedDate();
    }

    @Override
    public Boolean component18() {
        return getForcePasswordChange();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getEmail();
    }

    @Override
    public String value3() {
        return getPasswordHash();
    }

    @Override
    public Timestamp value4() {
        return getPasswordLastChanged();
    }

    @Override
    public String value5() {
        return getState();
    }

    @Override
    public String value6() {
        return getFirstName();
    }

    @Override
    public String value7() {
        return getLastName();
    }

    @Override
    public String value8() {
        return getComments();
    }

    @Override
    public Integer value9() {
        return getLoginFailures();
    }

    @Override
    public Integer value10() {
        return getLoginCount();
    }

    @Override
    public Timestamp value11() {
        return getLastLogin();
    }

    @Override
    public Timestamp value12() {
        return getCreatedOn();
    }

    @Override
    public String value13() {
        return getCreatedByUser();
    }

    @Override
    public Timestamp value14() {
        return getUpdatedOn();
    }

    @Override
    public String value15() {
        return getUpdatedByUser();
    }

    @Override
    public Boolean value16() {
        return getNeverExpires();
    }

    @Override
    public Timestamp value17() {
        return getReactivatedDate();
    }

    @Override
    public Boolean value18() {
        return getForcePasswordChange();
    }

    @Override
    public AccountRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public AccountRecord value3(String value) {
        setPasswordHash(value);
        return this;
    }

    @Override
    public AccountRecord value4(Timestamp value) {
        setPasswordLastChanged(value);
        return this;
    }

    @Override
    public AccountRecord value5(String value) {
        setState(value);
        return this;
    }

    @Override
    public AccountRecord value6(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public AccountRecord value7(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public AccountRecord value8(String value) {
        setComments(value);
        return this;
    }

    @Override
    public AccountRecord value9(Integer value) {
        setLoginFailures(value);
        return this;
    }

    @Override
    public AccountRecord value10(Integer value) {
        setLoginCount(value);
        return this;
    }

    @Override
    public AccountRecord value11(Timestamp value) {
        setLastLogin(value);
        return this;
    }

    @Override
    public AccountRecord value12(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public AccountRecord value13(String value) {
        setCreatedByUser(value);
        return this;
    }

    @Override
    public AccountRecord value14(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public AccountRecord value15(String value) {
        setUpdatedByUser(value);
        return this;
    }

    @Override
    public AccountRecord value16(Boolean value) {
        setNeverExpires(value);
        return this;
    }

    @Override
    public AccountRecord value17(Timestamp value) {
        setReactivatedDate(value);
        return this;
    }

    @Override
    public AccountRecord value18(Boolean value) {
        setForcePasswordChange(value);
        return this;
    }

    @Override
    public AccountRecord values(Integer value1, String value2, String value3, Timestamp value4, String value5, String value6, String value7, String value8, Integer value9, Integer value10, Timestamp value11, Timestamp value12, String value13, Timestamp value14, String value15, Boolean value16, Timestamp value17, Boolean value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(Integer id, String email, String passwordHash, Timestamp passwordLastChanged, String state, String firstName, String lastName, String comments, Integer loginFailures, Integer loginCount, Timestamp lastLogin, Timestamp createdOn, String createdByUser, Timestamp updatedOn, String updatedByUser, Boolean neverExpires, Timestamp reactivatedDate, Boolean forcePasswordChange) {
        super(Account.ACCOUNT);

        set(0, id);
        set(1, email);
        set(2, passwordHash);
        set(3, passwordLastChanged);
        set(4, state);
        set(5, firstName);
        set(6, lastName);
        set(7, comments);
        set(8, loginFailures);
        set(9, loginCount);
        set(10, lastLogin);
        set(11, createdOn);
        set(12, createdByUser);
        set(13, updatedOn);
        set(14, updatedByUser);
        set(15, neverExpires);
        set(16, reactivatedDate);
        set(17, forcePasswordChange);
    }
}
