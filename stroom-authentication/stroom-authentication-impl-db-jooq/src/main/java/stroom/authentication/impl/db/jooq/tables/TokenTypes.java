/*
 * This file is generated by jOOQ.
 */
package stroom.authentication.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.authentication.impl.db.jooq.Indexes;
import stroom.authentication.impl.db.jooq.Keys;
import stroom.authentication.impl.db.jooq.Stroom;
import stroom.authentication.impl.db.jooq.tables.records.TokenTypesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenTypes extends TableImpl<TokenTypesRecord> {

    private static final long serialVersionUID = -191697583;

    /**
     * The reference instance of <code>stroom.token_types</code>
     */
    public static final TokenTypes TOKEN_TYPES = new TokenTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenTypesRecord> getRecordType() {
        return TokenTypesRecord.class;
    }

    /**
     * The column <code>stroom.token_types.id</code>.
     */
    public final TableField<TokenTypesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.token_types.token_type</code>.
     */
    public final TableField<TokenTypesRecord, String> TOKEN_TYPE = createField(DSL.name("token_type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.token_types</code> table reference
     */
    public TokenTypes() {
        this(DSL.name("token_types"), null);
    }

    /**
     * Create an aliased <code>stroom.token_types</code> table reference
     */
    public TokenTypes(String alias) {
        this(DSL.name(alias), TOKEN_TYPES);
    }

    /**
     * Create an aliased <code>stroom.token_types</code> table reference
     */
    public TokenTypes(Name alias) {
        this(alias, TOKEN_TYPES);
    }

    private TokenTypes(Name alias, Table<TokenTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TokenTypes(Name alias, Table<TokenTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TokenTypes(Table<O> child, ForeignKey<O, TokenTypesRecord> key) {
        super(child, key, TOKEN_TYPES);
    }

    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TOKEN_TYPES_ID, Indexes.TOKEN_TYPES_PRIMARY);
    }

    @Override
    public Identity<TokenTypesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TOKEN_TYPES;
    }

    @Override
    public UniqueKey<TokenTypesRecord> getPrimaryKey() {
        return Keys.KEY_TOKEN_TYPES_PRIMARY;
    }

    @Override
    public List<UniqueKey<TokenTypesRecord>> getKeys() {
        return Arrays.<UniqueKey<TokenTypesRecord>>asList(Keys.KEY_TOKEN_TYPES_PRIMARY, Keys.KEY_TOKEN_TYPES_ID);
    }

    @Override
    public TokenTypes as(String alias) {
        return new TokenTypes(DSL.name(alias), this);
    }

    @Override
    public TokenTypes as(Name alias) {
        return new TokenTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenTypes rename(String name) {
        return new TokenTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenTypes rename(Name name) {
        return new TokenTypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
