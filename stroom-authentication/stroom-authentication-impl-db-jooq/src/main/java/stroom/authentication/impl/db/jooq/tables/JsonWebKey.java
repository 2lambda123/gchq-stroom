/*
 * This file is generated by jOOQ.
 */
package stroom.authentication.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.authentication.impl.db.jooq.Indexes;
import stroom.authentication.impl.db.jooq.Keys;
import stroom.authentication.impl.db.jooq.Stroom;
import stroom.authentication.impl.db.jooq.tables.records.JsonWebKeyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonWebKey extends TableImpl<JsonWebKeyRecord> {

    private static final long serialVersionUID = -1545941531;

    /**
     * The reference instance of <code>stroom.json_web_key</code>
     */
    public static final JsonWebKey JSON_WEB_KEY = new JsonWebKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonWebKeyRecord> getRecordType() {
        return JsonWebKeyRecord.class;
    }

    /**
     * The column <code>stroom.json_web_key.id</code>.
     */
    public final TableField<JsonWebKeyRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.json_web_key.keyId</code>.
     */
    public final TableField<JsonWebKeyRecord, String> KEYID = createField(DSL.name("keyId"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.json_web_key.json</code>.
     */
    public final TableField<JsonWebKeyRecord, String> JSON = createField(DSL.name("json"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>stroom.json_web_key.create_time_ms</code>.
     */
    public final TableField<JsonWebKeyRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>stroom.json_web_key</code> table reference
     */
    public JsonWebKey() {
        this(DSL.name("json_web_key"), null);
    }

    /**
     * Create an aliased <code>stroom.json_web_key</code> table reference
     */
    public JsonWebKey(String alias) {
        this(DSL.name(alias), JSON_WEB_KEY);
    }

    /**
     * Create an aliased <code>stroom.json_web_key</code> table reference
     */
    public JsonWebKey(Name alias) {
        this(alias, JSON_WEB_KEY);
    }

    private JsonWebKey(Name alias, Table<JsonWebKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private JsonWebKey(Name alias, Table<JsonWebKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JsonWebKey(Table<O> child, ForeignKey<O, JsonWebKeyRecord> key) {
        super(child, key, JSON_WEB_KEY);
    }

    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JSON_WEB_KEY_KEYID, Indexes.JSON_WEB_KEY_PRIMARY);
    }

    @Override
    public Identity<JsonWebKeyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JSON_WEB_KEY;
    }

    @Override
    public UniqueKey<JsonWebKeyRecord> getPrimaryKey() {
        return Keys.KEY_JSON_WEB_KEY_PRIMARY;
    }

    @Override
    public List<UniqueKey<JsonWebKeyRecord>> getKeys() {
        return Arrays.<UniqueKey<JsonWebKeyRecord>>asList(Keys.KEY_JSON_WEB_KEY_PRIMARY, Keys.KEY_JSON_WEB_KEY_KEYID);
    }

    @Override
    public JsonWebKey as(String alias) {
        return new JsonWebKey(DSL.name(alias), this);
    }

    @Override
    public JsonWebKey as(Name alias) {
        return new JsonWebKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonWebKey rename(String name) {
        return new JsonWebKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonWebKey rename(Name name) {
        return new JsonWebKey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
