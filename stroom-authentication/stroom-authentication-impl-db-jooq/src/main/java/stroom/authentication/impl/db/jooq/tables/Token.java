/*
 * This file is generated by jOOQ.
 */
package stroom.authentication.impl.db.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.authentication.impl.db.jooq.Indexes;
import stroom.authentication.impl.db.jooq.Keys;
import stroom.authentication.impl.db.jooq.Stroom;
import stroom.authentication.impl.db.jooq.tables.records.TokenRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Token extends TableImpl<TokenRecord> {

    private static final long serialVersionUID = -976763978;

    /**
     * The reference instance of <code>stroom.token</code>
     */
    public static final Token TOKEN = new Token();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenRecord> getRecordType() {
        return TokenRecord.class;
    }

    /**
     * The column <code>stroom.token.id</code>.
     */
    public final TableField<TokenRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.token.user_id</code>.
     */
    public final TableField<TokenRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.token.token_type_id</code>.
     */
    public final TableField<TokenRecord, Integer> TOKEN_TYPE_ID = createField(DSL.name("token_type_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.token.data</code>.
     */
    public final TableField<TokenRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>stroom.token.expires_on</code>.
     */
    public final TableField<TokenRecord, Timestamp> EXPIRES_ON = createField(DSL.name("expires_on"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>stroom.token.comments</code>.
     */
    public final TableField<TokenRecord, String> COMMENTS = createField(DSL.name("comments"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>stroom.token.issued_on</code>.
     */
    public final TableField<TokenRecord, Timestamp> ISSUED_ON = createField(DSL.name("issued_on"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>stroom.token.issued_by_user</code>.
     */
    public final TableField<TokenRecord, Integer> ISSUED_BY_USER = createField(DSL.name("issued_by_user"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stroom.token.enabled</code>.
     */
    public final TableField<TokenRecord, Boolean> ENABLED = createField(DSL.name("enabled"), org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>stroom.token.updated_on</code>.
     */
    public final TableField<TokenRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>stroom.token.updated_by_user</code>.
     */
    public final TableField<TokenRecord, Integer> UPDATED_BY_USER = createField(DSL.name("updated_by_user"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>stroom.token</code> table reference
     */
    public Token() {
        this(DSL.name("token"), null);
    }

    /**
     * Create an aliased <code>stroom.token</code> table reference
     */
    public Token(String alias) {
        this(DSL.name(alias), TOKEN);
    }

    /**
     * Create an aliased <code>stroom.token</code> table reference
     */
    public Token(Name alias) {
        this(alias, TOKEN);
    }

    private Token(Name alias, Table<TokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Token(Name alias, Table<TokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Token(Table<O> child, ForeignKey<O, TokenRecord> key) {
        super(child, key, TOKEN);
    }

    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TOKEN_FK_ISSUED_BY_USER, Indexes.TOKEN_FK_ISSUED_TO, Indexes.TOKEN_FK_TOKEN_TYPE_ID, Indexes.TOKEN_FK_UPDATED_BY_USER, Indexes.TOKEN_ID, Indexes.TOKEN_PRIMARY);
    }

    @Override
    public Identity<TokenRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TOKEN;
    }

    @Override
    public UniqueKey<TokenRecord> getPrimaryKey() {
        return Keys.KEY_TOKEN_PRIMARY;
    }

    @Override
    public List<UniqueKey<TokenRecord>> getKeys() {
        return Arrays.<UniqueKey<TokenRecord>>asList(Keys.KEY_TOKEN_PRIMARY, Keys.KEY_TOKEN_ID);
    }

    @Override
    public List<ForeignKey<TokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TokenRecord, ?>>asList(Keys.FK_ISSUED_TO, Keys.FK_TOKEN_TYPE_ID, Keys.FK_ISSUED_BY_USER, Keys.FK_UPDATED_BY_USER);
    }

    public Account fkIssuedTo() {
        return new Account(this, Keys.FK_ISSUED_TO);
    }

    public TokenTypes tokenTypes() {
        return new TokenTypes(this, Keys.FK_TOKEN_TYPE_ID);
    }

    public Account fkIssuedByUser() {
        return new Account(this, Keys.FK_ISSUED_BY_USER);
    }

    public Account fkUpdatedByUser() {
        return new Account(this, Keys.FK_UPDATED_BY_USER);
    }

    @Override
    public Token as(String alias) {
        return new Token(DSL.name(alias), this);
    }

    @Override
    public Token as(Name alias) {
        return new Token(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(String name) {
        return new Token(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(Name name) {
        return new Token(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Integer, String, Timestamp, String, Timestamp, Integer, Boolean, Timestamp, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
