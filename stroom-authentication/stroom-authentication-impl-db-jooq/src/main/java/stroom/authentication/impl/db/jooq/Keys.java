/*
 * This file is generated by jOOQ.
 */
package stroom.authentication.impl.db.jooq;


import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import stroom.authentication.impl.db.jooq.tables.Account;
import stroom.authentication.impl.db.jooq.tables.JsonWebKey;
import stroom.authentication.impl.db.jooq.tables.Token;
import stroom.authentication.impl.db.jooq.tables.TokenTypes;
import stroom.authentication.impl.db.jooq.tables.records.AccountRecord;
import stroom.authentication.impl.db.jooq.tables.records.JsonWebKeyRecord;
import stroom.authentication.impl.db.jooq.tables.records.TokenRecord;
import stroom.authentication.impl.db.jooq.tables.records.TokenTypesRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>stroom</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccountRecord, Integer> IDENTITY_ACCOUNT = Identities0.IDENTITY_ACCOUNT;
    public static final Identity<JsonWebKeyRecord, Integer> IDENTITY_JSON_WEB_KEY = Identities0.IDENTITY_JSON_WEB_KEY;
    public static final Identity<TokenRecord, Integer> IDENTITY_TOKEN = Identities0.IDENTITY_TOKEN;
    public static final Identity<TokenTypesRecord, Integer> IDENTITY_TOKEN_TYPES = Identities0.IDENTITY_TOKEN_TYPES;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = UniqueKeys0.KEY_ACCOUNT_PRIMARY;
    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_EMAIL = UniqueKeys0.KEY_ACCOUNT_EMAIL;
    public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_PRIMARY = UniqueKeys0.KEY_JSON_WEB_KEY_PRIMARY;
    public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_KEYID = UniqueKeys0.KEY_JSON_WEB_KEY_KEYID;
    public static final UniqueKey<TokenRecord> KEY_TOKEN_PRIMARY = UniqueKeys0.KEY_TOKEN_PRIMARY;
    public static final UniqueKey<TokenRecord> KEY_TOKEN_ID = UniqueKeys0.KEY_TOKEN_ID;
    public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_PRIMARY = UniqueKeys0.KEY_TOKEN_TYPES_PRIMARY;
    public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_ID = UniqueKeys0.KEY_TOKEN_TYPES_ID;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<TokenRecord, AccountRecord> FK_ISSUED_TO = ForeignKeys0.FK_ISSUED_TO;
    public static final ForeignKey<TokenRecord, TokenTypesRecord> FK_TOKEN_TYPE_ID = ForeignKeys0.FK_TOKEN_TYPE_ID;
    public static final ForeignKey<TokenRecord, AccountRecord> FK_ISSUED_BY_USER = ForeignKeys0.FK_ISSUED_BY_USER;
    public static final ForeignKey<TokenRecord, AccountRecord> FK_UPDATED_BY_USER = ForeignKeys0.FK_UPDATED_BY_USER;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AccountRecord, Integer> IDENTITY_ACCOUNT = Internal.createIdentity(Account.ACCOUNT, Account.ACCOUNT.ID);
        public static Identity<JsonWebKeyRecord, Integer> IDENTITY_JSON_WEB_KEY = Internal.createIdentity(JsonWebKey.JSON_WEB_KEY, JsonWebKey.JSON_WEB_KEY.ID);
        public static Identity<TokenRecord, Integer> IDENTITY_TOKEN = Internal.createIdentity(Token.TOKEN, Token.TOKEN.ID);
        public static Identity<TokenTypesRecord, Integer> IDENTITY_TOKEN_TYPES = Internal.createIdentity(TokenTypes.TOKEN_TYPES, TokenTypes.TOKEN_TYPES.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(Account.ACCOUNT, "KEY_account_PRIMARY", Account.ACCOUNT.ID);
        public static final UniqueKey<AccountRecord> KEY_ACCOUNT_EMAIL = Internal.createUniqueKey(Account.ACCOUNT, "KEY_account_email", Account.ACCOUNT.EMAIL);
        public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_PRIMARY = Internal.createUniqueKey(JsonWebKey.JSON_WEB_KEY, "KEY_json_web_key_PRIMARY", JsonWebKey.JSON_WEB_KEY.ID);
        public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_KEYID = Internal.createUniqueKey(JsonWebKey.JSON_WEB_KEY, "KEY_json_web_key_keyId", JsonWebKey.JSON_WEB_KEY.KEYID);
        public static final UniqueKey<TokenRecord> KEY_TOKEN_PRIMARY = Internal.createUniqueKey(Token.TOKEN, "KEY_token_PRIMARY", Token.TOKEN.ID);
        public static final UniqueKey<TokenRecord> KEY_TOKEN_ID = Internal.createUniqueKey(Token.TOKEN, "KEY_token_id", Token.TOKEN.ID);
        public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_PRIMARY = Internal.createUniqueKey(TokenTypes.TOKEN_TYPES, "KEY_token_types_PRIMARY", TokenTypes.TOKEN_TYPES.ID);
        public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_ID = Internal.createUniqueKey(TokenTypes.TOKEN_TYPES, "KEY_token_types_id", TokenTypes.TOKEN_TYPES.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<TokenRecord, AccountRecord> FK_ISSUED_TO = Internal.createForeignKey(stroom.authentication.impl.db.jooq.Keys.KEY_ACCOUNT_PRIMARY, Token.TOKEN, "fk_issued_to", Token.TOKEN.USER_ID);
        public static final ForeignKey<TokenRecord, TokenTypesRecord> FK_TOKEN_TYPE_ID = Internal.createForeignKey(stroom.authentication.impl.db.jooq.Keys.KEY_TOKEN_TYPES_PRIMARY, Token.TOKEN, "fk_token_type_id", Token.TOKEN.TOKEN_TYPE_ID);
        public static final ForeignKey<TokenRecord, AccountRecord> FK_ISSUED_BY_USER = Internal.createForeignKey(stroom.authentication.impl.db.jooq.Keys.KEY_ACCOUNT_PRIMARY, Token.TOKEN, "fk_issued_by_user", Token.TOKEN.ISSUED_BY_USER);
        public static final ForeignKey<TokenRecord, AccountRecord> FK_UPDATED_BY_USER = Internal.createForeignKey(stroom.authentication.impl.db.jooq.Keys.KEY_ACCOUNT_PRIMARY, Token.TOKEN, "fk_updated_by_user", Token.TOKEN.UPDATED_BY_USER);
    }
}
