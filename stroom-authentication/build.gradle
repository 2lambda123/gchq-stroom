/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//TODO commented out for migration
buildscript {
    repositories {
        mavenLocal()
        jcenter()
//        maven { url "https://dl.bintray.com/stroom/event-logging" }
//        maven { url "https://dl.bintray.com/stroom/stroom" }
    }
    dependencies {
//        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath('io.swagger:swagger-codegen:2.2.2') // Generates client from YAML/JSON
//        classpath 'mysql:mysql-connector-java:5.1.40'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow'  apply false
    id 'com.benjaminsproule.swagger' version "0.1.4" apply false // Generates YAML/JSON from model
    id 'nu.studer.jooq'  apply false
    id 'org.flywaydb.flyway'
}


//TODO commented out for migration
//if (!JavaVersion.current().isJava12()) {
//    throw new GradleException("This build must be run with Java 12 (current = " + JavaVersion.current() + ")")
//}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

//defines a list of gradle projects that we will publish with maven/bintray
def projectsToBePublished = subprojects.findAll { project -> 
    project.path in [
        ':stroom-authentication-api-swagger',
    ] 
}

def javaProjects = subprojects.findAll { project -> 
    project.path in [
        ':stroom-authentication:stroom-authentication-impl-db-jooq',
        ':stroom-authentication:stroom-authentication-api-swagger',
        ':stroom-authentication:stroom-authentication-impl',
    ] 
}


//Configuration applicable to all projects
allprojects {
}

//Configuration applicable to all sub projects
subprojects {
}

//configures only those projects in javaProjects
configure(javaProjects) {

    println "Configuring ${project.path} for java"

    apply plugin: 'java'
    apply plugin: 'idea'

    // Stroom v6 is j8 and it uses the auth api lib so need to target j8
    sourceCompatibility = 1.12
    targetCompatibility = 1.12

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/stroom/event-logging" }
        maven { url "https://dl.bintray.com/stroom/stroom" }
    }

    sourceSets {
        // This lets us use different directories for our integration tests.
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    configurations {

        //ensure deps don't bring any logging implementations with them as this will
        //conflict with logback. Also replace any log4j deps with log4j-over-slf4j
        //so dependency jars work with slf4j
        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"

            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.name == 'log4j') {
                    details.useTarget "org.slf4j:log4j-over-slf4j:$versions.slf4j"
                }
            }
            resolutionStrategy {
                forcedModules = [
                ]
            }
        }
        
        // This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/stroom/event-logging" }
        maven { url "https://dl.bintray.com/stroom/stroom" }
    }

    // This means the reports from our integration tests won't over-write the reports from our unit tests.
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

    // This task lets us run the actual integration tests.
    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        // Integration tests are quite slow so output progress for each test to keep travis alive
        afterTest { desc, result -> 
            println "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

    clean{
        //clear out the 'out' dirs used by intelliJ
        delete "out"
    }

    // These lines pull the integration test task into our build process.
    tasks.check.dependsOn integrationTest
    tasks.integrationTest.mustRunAfter test

}

//configures only those projects in publishedProjectsPaths
configure(projectsToBePublished) {

    println "Configuring ${project.path} for publishing"

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray' 

    group = 'stroom'
    version = versions.stroomAuth

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        scm {
           url "https://github.com/gchq/stroom-auth"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project.name)
                    root.children().last() + pomConfig
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    // configuration for the bintray plugin for uploading maven artefacts to bintray
    // see https://github.com/bintray/gradle-bintray-plugin
    // run task bintrayUpload to push the files, assuming that 
    // BINTRAY_USER/BINTRAY_KEY are set as env vars
    bintray {
        // set to true to test bintray uploading
        dryRun = false

        //Must never write these to log or system out
        user = System.getenv('BINTRAY_USER') //set in Travis UI
        key = System.getenv('BINTRAY_KEY') //set in Travis UI

        //The maven plugin publications to push to bintray
        publications = ['mavenJava']

        //immediately make the artefacts public
        publish = true

        pkg {
            repo = 'stroom'
            name = 'stroom-authentication'
            userOrg = 'stroom'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/gchq/stroom-auth.git'
            version {
                name = "${versions.stroomAuth}"
                desc = "stroom-authentication-${versions.stroomAuth}"
                released  = new Date()
                vcsTag = "${versions.stroomAuth}"
                gpg {
                    //Bintray will self-sign the files
                    sign = true //Determines whether to GPG sign the files. The default is false
                }
            }
        }
    }
}
