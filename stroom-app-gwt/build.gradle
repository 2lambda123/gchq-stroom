ext.moduleName = 'stroom.app.gwt'

def getSysPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (System.hasProperty(propName)
            && System.getProperty(propName) != "unspecified"
            && System.getProperty(propName) != "") {
        val = System.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

def resourcesDir = project(':stroom-app').file('src/main/resources')
def warDir = "${resourcesDir}/ui"
def outputDir = "${warDir}/stroom"

//def gwtBuildDir = "${project.buildDir}/gwt"
def javaIoTmpDir = getSysPropertyOrDefault("java.io.tmpdir", "/tmp")
println 'javaIoTmpDir: ' + javaIoTmpDir
// Append the rootDir so gwt builds from different dirs don't conflict
def gwtBuildDir = javaIoTmpDir + "/app-gwt_build/" + rootDir
gwtBuildDir = gwtBuildDir.replaceAll('//', '/')
println 'gwtBuildDir: ' + gwtBuildDir

def tmpDir = "${gwtBuildDir}/tmp"
println 'tmpDir: ' + tmpDir
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"
def modifiedProjectsBasePath = "${gwtBuildDir}/modified_projects"

def gwtSourceDirs = []
def modifiedCoreSharedJarPath = null
def modifiedCoreSharedSourcePath = null

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'javax.xml.bind') {
                details.useVersion "2.3.1"
            }
            if (details.requested.group == 'com.fasterxml.jackson.core') {
                details.useVersion "2.9.6"
            }
        }
    }
}


// Declare a source set just for our GWT compile that is separate from teh Java compilation source set.
sourceSets {
    gwtSource
}

dependencies {
    implementation project(':stroom-core-client')
    implementation project(':stroom-core-client-widget')
    implementation project(':stroom-core-shared')
    implementation project(':stroom-dashboard:stroom-dashboard-client')
    implementation project(':stroom-docref')
    implementation project(':stroom-query:stroom-query-language-api')
    implementation project(':stroom-query:stroom-query-api')
    implementation project(':stroom-query:stroom-query-common')
    implementation project(':stroom-security:stroom-security-client')
    implementation project(':stroom-security:stroom-security-client-api')
    implementation project(':stroom-statistics:stroom-statistics-client')

    // These source deps are all needed for the GWT transpiling to javascript
    implementation libs.gin
    implementation libs.guice3
    implementation libs.gwt_dev
    implementation libs.gwt_user
    implementation libs.gwtp_mvp_client
    implementation libs.jackson_annotations
    implementation libs.jaxb_api__gwt
    implementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations
    implementation libs.ws_rs_api__gwt

    gwtSourceImplementation libs.gin
    gwtSourceImplementation libs.gwt_dev
    gwtSourceImplementation libs.gwt_user
    gwtSourceImplementation libs.gwtp_mvp_client
    gwtSourceImplementation libs.jaxb_api__gwt
    gwtSourceImplementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations
    gwtSourceImplementation libs.restygwt
    gwtSourceImplementation libs.ws_rs_api__gwt

//    gwtSourceImplementation libs.stroomDocRef
//    gwtSourceCompile "${libs.stroomDocRef}:sources"
//    gwtSourceImplementation libs.stroomQueryApi
//    gwtSourceCompile "${libs.stroomQueryApi}:sources"
//    gwtSourceImplementation libs.stroomQueryCommon
//    gwtSourceCompile "${libs.stroomQueryCommon}:sources"
}

// Define a list of projects that contain the source code we want to compile with GWT.
def projList = [
    project(':stroom-app-gwt'),
    project(':stroom-core-client'),
    project(':stroom-core-client-widget'),
    project(':stroom-dashboard:stroom-dashboard-client'),
    project(':stroom-security:stroom-security-client'),
    project(':stroom-statistics:stroom-statistics-client'),
]

// Mutually exclusive with projList
// List of projects to do the jakarta => javax transform on
def projectsToRename = [
    project(':stroom-core-shared'),
    project(':stroom-docref'),
    project(':stroom-query:stroom-query-api'),
    project(':stroom-util-shared'),
    project(':stroom-query:stroom-query-common'),
    project(':stroom-query:stroom-query-language-api'),
    project(':stroom-security:stroom-security-client-api'),
]

configurations {
    jakartaTransformerConfiguration
}

dependencies {
    jakartaTransformerConfiguration "org.eclipse.transformer:org.eclipse.transformer.cli:0.5.0"
}

//task jakartaReverseTransform(dependsOn: ':stroom-core-shared:jar', type: JavaExec) {

    ////doFirst {
        ////def coreSharedJar = project(':stroom-core-shared').jar
        ////def inputJarName = coreSharedJar.archiveFileName
        ////println 'inputJarName: ' + inputJarName
    ////}

    //classpath configurations.jakartaTransformerConfiguration
    //mainClass = "org.eclipse.transformer.cli.JakartaTransformerCLI"

    //def coreSharedJarPath = project(':stroom-core-shared').jar.archiveFile.get().getAsFile().toPath()
    //def tempDirPath = File.createTempDir().toPath()
    //modifiedCoreSharedJarPath = tempDirPath.resolve('stroom-core-shared.modified.jar')
    //def propFilePath = rootDir.toPath().resolve('jakarta-renames-reverse.properties')
    //println 'coreSharedJarPath: ' + coreSharedJarPath
    //println 'modifiedCoreSharedJarPath: ' + modifiedCoreSharedJarPath
    //println 'propFilePath: ' + propFilePath

    //args = [
        //coreSharedJarPath,
        //modifiedCoreSharedJarPath,
        //'-tr', propFilePath
    //]

    //doLast {
        //// Create a list of source directories where source for GWT can be found.
        //gwtSourceDirs = []

        //// Add source from each of the defined projects.
        //projList.each { p ->
            //gwtSourceDirs.addAll(p.sourceSets.main.output.classesDirs)
            //gwtSourceDirs.addAll(p.sourceSets.main.java.srcDirs)
            //gwtSourceDirs.addAll(p.sourceSets.main.resources.srcDirs)
        //}

        //// Add all of the library sources from the gwtSource source set defined above.
        //gwtSourceDirs.addAll(sourceSets.gwtSource.compileClasspath)

        //gwtSourceDirs.add(modifiedCoreSharedJarPath)

        //println "Dumping $gwtSourceDirs.size gwtSourceDirs"
        //gwtSourceDirs.each {
            //println "${it.toString()}"
        //}
    //}
//}

//println "output classesDirs:    " + project(':stroom-core-shared').sourceSets.main.output.classesDirs
//println "java srcDirs:          " + project(':stroom-core-shared').sourceSets.main.java.srcDirs
//println "resources classesDirs: " + project(':stroom-core-shared').sourceSets.main.resources.srcDirs

//task jakartaReverseTransformSources(dependsOn: ':stroom-core-shared:jar', type: JavaExec) {

    //classpath configurations.jakartaTransformerConfiguration
    //mainClass = "org.eclipse.transformer.cli.TransformerCLI"

    //def coreSharedProjectPath = project(':stroom-core-shared').projectDir
    //def tempDirPath = File.createTempDir().toPath()
    //modifiedCoreSharedSourcePath = tempDirPath.resolve('stroom-core-shared-modified')
    //def propFilePath = rootDir.toPath().resolve('jakarta-renames-reverse.properties')
    //println 'modifiedProjectsBasePath: ' + modifiedProjectsBasePath
    //println 'coreSharedProjectPath: ' + coreSharedProjectPath
    //println 'modifiedCoreSharedSourcePath: ' + modifiedCoreSharedSourcePath
    //println 'propFilePath: ' + propFilePath

    //args = [
        //coreSharedProjectPath,
        //modifiedCoreSharedSourcePath,
        //'-tr', propFilePath
    //]

    //doLast {
        //// Create a list of source directories where source for GWT can be found.
        //gwtSourceDirs = []

        //// Add source from each of the defined projects.
        //projList.each { p ->
            //gwtSourceDirs.addAll(p.sourceSets.main.output.classesDirs)
            //gwtSourceDirs.addAll(p.sourceSets.main.java.srcDirs)
            //gwtSourceDirs.addAll(p.sourceSets.main.resources.srcDirs)
        //}

        //// Add all of the library sources from the gwtSource source set defined above.
        //gwtSourceDirs.addAll(sourceSets.gwtSource.compileClasspath)

        //// Now add the dirs from out modified (jakarta => javax) stroom-core-shared temp dir
        //gwtSourceDirs.add(modifiedCoreSharedSourcePath.resolve('build').resolve('classes').resolve('java').resolve('main'))
        //gwtSourceDirs.add(modifiedCoreSharedSourcePath.resolve('src').resolve('main').resolve('java'))
        //gwtSourceDirs.add(modifiedCoreSharedSourcePath.resolve('src').resolve('main').resolve('resources'))

        //println "Dumping $gwtSourceDirs.size gwtSourceDirs"
        //gwtSourceDirs.each {
            //println "${it.toString()}"
        //}
    //}
//}

task jakartaReverseTransformSources {

    projectsToRename.each { prj ->
        dependsOn prj.tasks.getByName('compileJava')
    }

    doFirst {
        // Create a list of source directories where source for GWT can be found.
        gwtSourceDirs = []

    }

    // This file has all the rename mappings for TransformerCLI to use
    def propFilePath = rootDir.toPath().resolve('jakarta-renames-reverse.properties')
    println 'modifiedProjectsBasePath: ' + modifiedProjectsBasePath
    println 'propFilePath: ' + propFilePath

    projectsToRename.each { prj ->
        def inputProjectPath = prj.projectDir
        def outputProjectPath = new File(modifiedProjectsBasePath).toPath().resolve(prj.name)

        doLast {
            println 'Running eclipse TransformerCLI on ' + prj.name
            println 'inputProjectPath: ' + inputProjectPath
            println 'outputProjectPath: ' + outputProjectPath
            println 'modifiedProjectsBasePath: ' + modifiedProjectsBasePath
            new File(modifiedProjectsBasePath).mkdirs();

            javaexec {
                classpath configurations.jakartaTransformerConfiguration
                mainClass = "org.eclipse.transformer.cli.TransformerCLI"
                args = [
                    inputProjectPath,
                    outputProjectPath,
                    '-tr', propFilePath
                ]
            }
            // Now add the dirs from out modified (jakarta => javax) stroom-core-shared temp dir
            gwtSourceDirs.add(outputProjectPath.resolve('build').resolve('classes').resolve('java').resolve('main'))
            gwtSourceDirs.add(outputProjectPath.resolve('src').resolve('main').resolve('java'))
            gwtSourceDirs.add(outputProjectPath.resolve('src').resolve('main').resolve('resources'))
        }
    }

    doLast {
        // Add source from each of the defined projects.
        projList.each { prj ->
            gwtSourceDirs.addAll(prj.sourceSets.main.output.classesDirs)
            gwtSourceDirs.addAll(prj.sourceSets.main.java.srcDirs)
            gwtSourceDirs.addAll(prj.sourceSets.main.resources.srcDirs)
        }

        // Add all of the library sources from the gwtSource source set defined above.
        gwtSourceDirs.addAll(sourceSets.gwtSource.compileClasspath)

        println "Dumping $gwtSourceDirs.size gwtSourceDirs"
        gwtSourceDirs.each {
            println "${it.toString()}"
        }
    }
}

task gwtCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'gwtClean'
    dependsOn 'jakartaReverseTransformSources'
    //finalizedBy 'cleanTempFiles'

    def module = 'stroom.app.App'

    doFirst {
        println 'Deleting GWT build dirs in ' + gwtBuildDir.toString()
        delete tmpDir
        delete workDir
        delete deployDir
        delete extraDir

        println "Making directory gwtBuildDir $gwtBuildDir"
        new File(gwtBuildDir).mkdirs();
        println "Making directory tmpDir $tmpDir"
        new File(tmpDir).mkdirs();
        println "Making directory workDir $workDir"
        new File(workDir).mkdirs();
        println "Making directory deployDir $deployDir"
        new File(deployDir).mkdirs();
        println "Making directory extraDir $extraDir"
        new File(extraDir).mkdirs();

        println "gwtSourceDirs count: ${gwtSourceDirs.size()}"

        println "Dumping $gwtSourceDirs.size gwtSourceDirs"
        gwtSourceDirs.each {
            println "${it.toString()}"
        }
        println 'modifiedProjectsBasePath: ' + modifiedProjectsBasePath
    }

    mainClass = gwtCompilerProps.mainClass

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-XfragmentCount', '5',
            '-optimize', '9',
            '-failOnError',
            '-localWorkers', gwtCompilerProps.workers,
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                               // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${tmpDir}",
            '-Dgwt.persistentunitcache=false',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'jakartaReverseTransformSources'
    //finalizedBy 'cleanTempFiles'
    def module = 'stroom.app.AppSuperDevModeChrome'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        println "Making directory gwtBuildDir $gwtBuildDir"
        new File(gwtBuildDir).mkdirs();
        println "Making directory tmpDir $tmpDir"
        new File(tmpDir).mkdirs();
        println "Making directory workDir $workDir"
        new File(workDir).mkdirs();
        println "Making directory deployDir $deployDir"
        new File(deployDir).mkdirs();
        println "Making directory extraDir $extraDir"
        new File(extraDir).mkdirs();
    }

    mainClass = 'com.google.gwt.dev.Compiler'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-draftCompile',                        // Speeds up compile with 25%
            '-XfragmentCount', '0',
            '-optimize', '0',
            '-failOnError',
            '-localWorkers', '5',
            '-incremental',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${tmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'jakartaReverseTransformSources'
    def module = 'stroom.app.AppSuperDevModeChrome'

//    def dirs = []
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("java") {dirs << it}}}}
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("resources") {dirs << it}}}}
//    println dirs

    doFirst {
        println "Making directory gwtBuildDir $gwtBuildDir"
        new File(gwtBuildDir).mkdirs();
        println "Making directory tmpDir $tmpDir"
        new File(tmpDir).mkdirs();
        println "Making directory workDir $workDir"
        new File(workDir).mkdirs();
        println "Making directory deployDir $deployDir"
        new File(deployDir).mkdirs();
        println "Making directory extraDir $extraDir"
        new File(extraDir).mkdirs();

        def GREEN = '\033[1;32m'
        def NC = '\033[0m'

        println """
        ${NC}To run stroom in SuperDevMode:${GREEN}
          * Visit the 'code server' (link further down) and copy the dev mode buttons to your browser bookmarks
          * Visit stroom at http://localhost:8080 (NOTE: http, not https), or https://localhost if running Nginx
          * Click 'Dev Mode On'${NC}
        """.stripIndent().trim()
    }

    mainClass = 'com.google.gwt.dev.DevMode'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-failOnError',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            '-noserver',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${tmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtClean {
    group "gwt"
    doLast {
//        println 'Deleting GWT unit cache: ' + unitCacheDir.toString()
//        delete unitCacheDir
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir
        println 'Deleting modified projects: ' + modifiedProjectsBasePath.toString()
        delete modifiedProjectsBasePath

        println "Making directory gwtBuildDir $gwtBuildDir"
        //Files.createDirectories(Paths.get(gwtBuildDir));
        new File(gwtBuildDir).mkdirs();
        println "Making directory tmpDir $tmpDir"
        new File(tmpDir).mkdirs();
    }
}

task cleanTempFiles(type: Delete) {
    //delete modifiedProjectsBasePath
}

task doNothing {

}

//import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorPlugin
//import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorExtension.Generator
//import guru.nidi.graphviz.attribute.Color
//import guru.nidi.graphviz.attribute.Style
//
//plugins.apply(DependencyGraphGeneratorPlugin)
//
//def stroomGenerator = new Generator(
//        "stroomLibraries", // Suffix for our Gradle task.
//        { dependency -> dependency.getModuleGroup().startsWith("stroom") }, // Only want stroom.
//        { dependency -> true }, // Include transitive dependencies.
//        { node, dependency -> node.add(Style.FILLED, Color.rgb("#ff6f00")) }, // Give them some stroom color.
//)
//
//dependencyGraphGenerator {
//    generators = [ stroomGenerator ]
//}
