ext.moduleName = 'stroom.app.gwt'

def resourcesDir = project(':stroom-app').file('src/main/resources')
def warDir = "${resourcesDir}/ui"
def outputDir = "${warDir}/stroom"

def gwtBuildDir = "${project.buildDir}/gwt"
def tmpDir = "${gwtBuildDir}/tmp"
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'javax.xml.bind') {
                details.useVersion "2.3.1"
            }
            if (details.requested.group == 'com.fasterxml.jackson.core') {
                details.useVersion "2.9.6"
            }
        }
    }
}

// Declare a source set just for our GWT compile that is separate from teh Java compilation source set.
sourceSets {
    gwtSource
}

dependencies {
    implementation project(':stroom-core-client')
    implementation project(':stroom-core-client-widget')
    implementation project(':stroom-core-shared')
    implementation project(':stroom-dashboard:stroom-dashboard-client')
    implementation project(':stroom-docref')
    implementation project(':stroom-query:stroom-query-api')
    implementation project(':stroom-query:stroom-query-common')
    implementation project(':stroom-security:stroom-security-client')
    implementation project(':stroom-security:stroom-security-client-api')
    implementation project(':stroom-statistics:stroom-statistics-client')

    // These source deps are all needed for the GWT transpiling to javascript
    implementation libs.gin
    implementation libs.guice3
    implementation libs.gwt_dev
    implementation libs.gwt_user
    implementation libs.gwtp_mvp_client
    implementation libs.jackson_annotations
    implementation libs.jaxb_api
    implementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations

    gwtSourceImplementation libs.gin
    gwtSourceImplementation libs.gwt_dev
    gwtSourceImplementation libs.gwt_user
    gwtSourceImplementation libs.gwtp_mvp_client
    gwtSourceImplementation libs.jaxb_api
    gwtSourceImplementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations
    gwtSourceImplementation libs.restygwt
    gwtSourceImplementation libs.ws_rs_api

//    gwtSourceImplementation libs.stroomDocRef
//    gwtSourceCompile "${libs.stroomDocRef}:sources"
//    gwtSourceImplementation libs.stroomQueryApi
//    gwtSourceCompile "${libs.stroomQueryApi}:sources"
//    gwtSourceImplementation libs.stroomQueryCommon
//    gwtSourceCompile "${libs.stroomQueryCommon}:sources"
}

// Create a list of source directories where source for GWT can be found.
def gwtSourceDirs = []

// Define a list of projects that contain the source code we want to compile with GWT.
def projList = [
        project(':stroom-app-gwt'),
        project(':stroom-core-client'),
        project(':stroom-core-client-widget'),
        project(':stroom-core-shared'),
        project(':stroom-dashboard:stroom-dashboard-client'),
        project(':stroom-docref'),
        project(':stroom-query:stroom-query-api'),
        project(':stroom-query:stroom-query-common'),
        project(':stroom-security:stroom-security-client'),
        project(':stroom-security:stroom-security-client-api'),
        project(':stroom-statistics:stroom-statistics-client'),
        project(':stroom-util-shared')
]

// Add source from each of the defined projects.
projList.each { p ->
    gwtSourceDirs.addAll(p.sourceSets.main.output.classesDirs)
    gwtSourceDirs.addAll(p.sourceSets.main.java.srcDirs)
    gwtSourceDirs.addAll(p.sourceSets.main.resources.srcDirs)
}

// Add all of the library sources from the gwtSource source set defined above.
gwtSourceDirs.addAll(sourceSets.gwtSource.compileClasspath)

task gwtCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'gwtClean'

    def module = 'stroom.app.App'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir

        println "Making directory gwtBuildDir $gwtBuildDir"
        file(gwtBuildDir).mkdirs()
        println "Making directory tmpDir $tmpDir"
        file(tmpDir).mkdirs()
        println "Making directory workDir $workDir"
        file(workDir).mkdirs()
        println "Making directory deployDir $deployDir"
        file(deployDir).mkdirs()
        println "Making directory extraDir $extraDir"
        file(extraDir).mkdirs()

        println "Dumping $gwtSourceDirs.size gwtSourceDirs"
        gwtSourceDirs.each {
            println "${it.toString()}"
        }
    }

    mainClass = gwtCompilerProps.mainClass

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-XfragmentCount', '5',
            '-optimize', '9',
            '-failOnError',
            '-localWorkers', gwtCompilerProps.workers,
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                               // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${tmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    def module = 'stroom.app.AppSuperDevModeChrome'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    mainClass = 'com.google.gwt.dev.Compiler'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-draftCompile',                        // Speeds up compile with 25%
            '-XfragmentCount', '0',
            '-optimize', '0',
            '-failOnError',
            '-localWorkers', '5',
            '-incremental',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${tmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    group "gwt"
    def module = 'stroom.app.AppSuperDevModeChrome'

//    def dirs = []
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("java") {dirs << it}}}}
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("resources") {dirs << it}}}}
//    println dirs

    doFirst {
        println "Making directory gwtBuildDir $gwtBuildDir"
        file(gwtBuildDir).mkdirs()
        println "Making directory tmpDir $tmpDir"
        file(tmpDir).mkdirs()
        println "Making directory workDir $workDir"
        file(workDir).mkdirs()
        println "Making directory deployDir $deployDir"
        file(deployDir).mkdirs()
        println "Making directory extraDir $extraDir"
        file(extraDir).mkdirs()

        def GREEN = '\033[1;32m'
        def NC = '\033[0m'

        println """
        ${NC}To run stroom in SuperDevMode:${GREEN}
          * Visit the 'code server' (link further down) and copy the dev mode buttons to your browser bookmarks
          * Visit stroom at http://localhost:8080 (NOTE: http, not https), or https://localhost if running Nginx
          * Click 'Dev Mode On'${NC}
        """.stripIndent().trim()
    }

    mainClass = 'com.google.gwt.dev.DevMode'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-failOnError',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            '-noserver',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${tmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtClean {
    group "gwt"
    doLast {
//        println 'Deleting GWT unit cache: ' + unitCacheDir.toString()
//        delete unitCacheDir
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir
        println "Making directory gwtBuildDir $gwtBuildDir"
        file(gwtBuildDir).mkdirs()
        println "Making directory tmpDir $tmpDir"
        file(tmpDir).mkdirs()
    }
}


//import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorPlugin
//import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorExtension.Generator
//import guru.nidi.graphviz.attribute.Color
//import guru.nidi.graphviz.attribute.Style
//
//plugins.apply(DependencyGraphGeneratorPlugin)
//
//def stroomGenerator = new Generator(
//        "stroomLibraries", // Suffix for our Gradle task.
//        { dependency -> dependency.getModuleGroup().startsWith("stroom") }, // Only want stroom.
//        { dependency -> true }, // Include transitive dependencies.
//        { node, dependency -> node.add(Style.FILLED, Color.rgb("#ff6f00")) }, // Give them some stroom color.
//)
//
//dependencyGraphGenerator {
//    generators = [ stroomGenerator ]
//}
