def warDir = project(':stroom-app').file('src/main/resources/ui')
def outputDir = "${warDir}/stroom"

def gwtBuildDir = "${project.buildDir}/gwt"
def tmpDir = "${gwtBuildDir}/tmp"
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"

def gwtSourceDirs = []
parent.subprojects.each { p ->
    if (p.name != 'stroom-dashboard-gwt') {
        gwtSourceDirs << p.sourceSets.main.output.classesDir
        gwtSourceDirs << p.sourceSets.main.java.srcDirs
        gwtSourceDirs << p.sourceSets.main.resources.srcDirs
    }
}
gwtSourceDirs << sourceSets.main.compileClasspath

// We need to add the sources of GitHub dependencies.
gwtSourceDirs.add(files(fileDependency('queryApiSources', true)).getAsPath())

dependencies {
    compile project(':stroom-index-client')
    compile project(':stroom-statistics-client')
    compile project(':stroom-security-shared')
    compile project(':stroom-dashboard-client')

    compile 'com.google.gwt.inject:gin:2.1.2'
    compile 'com.google.gwt:gwt-dev:2.8.0'
}

task gwtCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.app.App'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        gwtSourceDirs
    }

    args =
        [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-XfragmentCount', '5',
            '-optimize', '9',
            '-failOnError',
            '-localWorkers', '5',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                               // Your GWT module
        ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.app.AppSuperDevModeChrome'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        gwtSourceDirs
    }

    args =
        [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-draftCompile',                        // Speeds up compile with 25%
            '-XfragmentCount', '0',
            '-optimize', '0',
            '-failOnError',
            '-localWorkers', '5',
            '-incremental',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                                  // Your GWT module
        ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    def module = 'stroom.app.AppSuperDevModeChrome'

//    def dirs = []
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("java") {dirs << it}}}}
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("resources") {dirs << it}}}}
//    println dirs

    doFirst {
        println 'Making GWT output directories'
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
        file(workDir).mkdirs()
        file(deployDir).mkdirs()
        file(extraDir).mkdirs()
    }

    main = 'com.google.gwt.dev.DevMode'

    classpath {
        gwtSourceDirs
    }

    args =
        [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-failOnError',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            '-noserver',
            module                                  // Your GWT module
        ]

    jvmArgs = ["-Djava.io.tmpdir=${tmpDir}"]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtClean {
    doLast {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir
        println 'Deleting GWT build dir: ' + gwtBuildDir.toString()
        delete gwtBuildDir
        file(gwtBuildDir).mkdirs()
        file(tmpDir).mkdirs()
    }
}

gwtCompile.onlyIf { !project.hasProperty('skipGWT') }
build.dependsOn('gwtCompile')