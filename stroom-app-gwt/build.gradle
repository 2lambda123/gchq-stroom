import java.nio.file.Files;

ext.moduleName = 'stroom.app.gwt'

def getSysPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (System.hasProperty(propName)
            && System.getProperty(propName) != "unspecified"
            && System.getProperty(propName) != "") {
        val = System.getProperty(propName)
        logger.info("Using property [${propName}] with value [${val}]")
    } else {
        val = defaultValue
        logger.info("Property [${propName}] has no value, using default value [${val}]")
    }
    return val;
}

def resourcesDir = project(':stroom-app').file('src/main/resources')
def warDir = "${resourcesDir}/ui"
def outputDir = "${warDir}/stroom"

def javaIoTmpDir = getSysPropertyOrDefault("java.io.tmpdir", "/tmp")
logger.info('javaIoTmpDir: ' + javaIoTmpDir)
// Append the rootDir so gwt builds from different dirs don't conflict
def gwtBuildDir = javaIoTmpDir + "/app-gwt_build/" + rootDir
gwtBuildDir = gwtBuildDir.replaceAll('//', '/')
logger.info('gwtBuildDir: ' + gwtBuildDir)

def gwtTmpDir = "${gwtBuildDir}/tmp"
logger.info('gwtTmpDir: ' + gwtTmpDir)
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"
// This is where eclipse transformer outputs to
def modifiedProjectsBasePath = "${gwtBuildDir}/modified_projects"
// This will contain a copy of modifiedProjectsBasePath that GWT uses on its classpath
def modifiedProjectsBasePathGwt = "${gwtBuildDir}/modified_projects_gwt"

def gwtSourceDirs = []
def modifiedCoreSharedJarPath = null
def modifiedCoreSharedSourcePath = null
def dynamicJakartaTasks = []

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'javax.xml.bind') {
                details.useVersion "2.3.1"
            }
            if (details.requested.group == 'com.fasterxml.jackson.core') {
                details.useVersion "2.9.6"
            }
        }
    }
}

// Declare a source set just for our GWT compile that is separate from teh Java compilation source set.
sourceSets {
    gwtSource
}

dependencies {
    implementation project(':stroom-core-client')
    implementation project(':stroom-core-client-widget')
    implementation project(':stroom-core-shared')
    implementation project(':stroom-dashboard:stroom-dashboard-client')
    implementation project(':stroom-docref')
    implementation project(':stroom-gwt')
    implementation project(':stroom-query:stroom-query-language-api')
    implementation project(':stroom-query:stroom-query-api')
    implementation project(':stroom-security:stroom-security-client')
    implementation project(':stroom-security:stroom-security-client-api')
    implementation project(':stroom-statistics:stroom-statistics-client')

    // These source deps are all needed for the GWT transpiling to javascript
    implementation libs.gin
    implementation libs.guice__gwt
    implementation libs.gwt_dev
    implementation libs.gwt_user
    implementation libs.gwtp_mvp_client
    implementation libs.jackson_annotations
    implementation libs.jaxb_api__gwt
    implementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations
    implementation libs.ws_rs_api__gwt

    gwtSourceImplementation libs.gin
    gwtSourceImplementation libs.gwt_dev
    gwtSourceImplementation libs.gwt_user
    gwtSourceImplementation libs.gwtp_mvp_client
    gwtSourceImplementation libs.jaxb_api__gwt
    gwtSourceImplementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations
    gwtSourceImplementation libs.restygwt
    gwtSourceImplementation libs.ws_rs_api__gwt
}

// Define a list of projects that contain the source code we want to compile with GWT.
def clientProjects = [
        project(':stroom-app-gwt'),
        project(':stroom-core-client'),
        project(':stroom-core-client-widget'),
        project(':stroom-dashboard:stroom-dashboard-client'),
        project(':stroom-statistics:stroom-statistics-client'),
        project(':stroom-core-shared'),
        project(':stroom-docref'),
        project(':stroom-query:stroom-query-api'),
        project(':stroom-query:stroom-query-language-api'),
        project(':stroom-security:stroom-security-client'),
        project(':stroom-security:stroom-security-client-api'),
        project(':stroom-util-shared'),
]

configurations {
    jakartaTransformerConfiguration {
        resolutionStrategy {
            // org.eclipse.transformer.cli:0.5.0 uses biz.aQute.bnd:biz.aQute.bnd.transform:6.3.1 which does not work
            // on J21 compiled classes/jars, so we need to uplift to bnd 7.0.0 which does.
            // It seems eclipse are reluctant to uplift bnd to 7.0.0 as that is J17 and they want to support J8
            // See https://github.com/eclipse/transformer/issues/475 and https://github.com/bndtools/bnd/issues/5886
            dependencySubstitution {
                substitute module('biz.aQute.bnd:biz.aQute.bnd.transform') using module("biz.aQute.bnd:biz.aQute.bnd.transform:${versions.bnd}")
            }
        }
    }
}

dependencies {
    // Note the dependencySubstitution on this dep above
    jakartaTransformerConfiguration libs.eclipse_transformer_cli
}

// Task to make a copy of each project in projectsToRename then change all imports
// from jakarta => javax (in source/classses/resources) so that GWT can use them.
// It adds the modified projects to GWTs compile classpath.
// This is a temporary hack until there is a jakarta friendly version of GWT.
// See https://github.com/gwtproject/gwt/issues/9727 for details on jakarta progress but
// be aware that restgwt is not jakarta friendly and is a dormant project so that will need
// sorting somehow.
task copySources {
    doLast {
        // This file has all the rename mappings for TransformerCLI to use
        def gwtSource = "${project.projectDir}/build/gwt-source"
        println('gwtSource: ' + gwtSource)

        // Delete current source output.
        delete gwtSource

        // Copy all code into source output.
        clientProjects.each { prj ->
            println('copy: ' + prj.projectDir)
            copy {
                from prj.projectDir.toPath().resolve('src').resolve('main').resolve('java')
                into gwtSource
            }
            copy {
                from prj.projectDir.toPath().resolve('src').resolve('main').resolve('resources')
                into gwtSource
            }
        }

        // Transform code.
        def propFilePath = rootDir.toPath().resolve('jakarta-renames-reverse.properties')
        def inputProjectPath = gwtSource;
        def outputProjectPath = "${project.projectDir}/build/transformed-source"

        println 'Running eclipse TransformerCLI'
        println('inputProjectPath: ' + inputProjectPath)
        println('outputProjectPath: ' + outputProjectPath)
        delete outputProjectPath

        javaexec {
            classpath configurations.jakartaTransformerConfiguration
            mainClass = "org.eclipse.transformer.cli.TransformerCLI"
            args = [
                    inputProjectPath,
                    outputProjectPath,
                    '-tr', propFilePath,
            ]
        }
    }
}

task compileSources(type: JavaCompile) {
    dependsOn copySources
    def sources = "${project.projectDir}/build/transformed-source"
    def build = "${project.projectDir}/build/transformed-build"

    source = file(sources)
    destinationDir = file(build)
    classpath = files(sources, sourceSets.gwtSource.compileClasspath)
    options.sourcepath = files(sources)

    outputs.dir(destinationDir)
}

task sourcesJar(type: Jar, dependsOn: copySources) {
    destinationDirectory = file("${project.projectDir}/build")
    archiveFileName = "transformed-source.jar"
    from "${project.projectDir}/build/transformed-source"
    includeEmptyDirs = false
}

task buildJar(type: Jar, dependsOn: copySources) {
    dependsOn compileSources
    destinationDirectory = file("${project.projectDir}/build")
    archiveFileName = "transformed-build.jar"
    from "${project.projectDir}/build/transformed-build"
    includeEmptyDirs = false
}

task makeGwtSourceDirs {
    dependsOn sourcesJar
    dependsOn buildJar

    doLast {
        gwtSourceDirs = []

        // Add all of the library sources from the gwtSource source set defined above.
        gwtSourceDirs.addAll(sourceSets.gwtSource.compileClasspath)

        gwtSourceDirs.addAll(project(':stroom-gwt').sourceSets.main.output.classesDirs)

        gwtSourceDirs.add(new File("${project.projectDir}/build/transformed-source.jar"))
        gwtSourceDirs.add(new File("${project.projectDir}/build/transformed-build.jar"))

        println "Dumping ${gwtSourceDirs.size} gwtSourceDirs"
        gwtSourceDirs.each {
            println "${it.toString()}"
        }
    }
}

task gwtCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'gwtClean'
    dependsOn 'makeGwtSourceDirs'

    def module = 'stroom.app.App'

    doFirst {
        println 'Deleting GWT build dirs in ' + gwtBuildDir.toString()
        delete gwtTmpDir
        delete workDir
        delete deployDir
        delete extraDir

        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
        logger.info("Ensuring directory workDir ${workDir}")
        new File(workDir).mkdirs();
        logger.info("Ensuring directory deployDir ${deployDir}")
        new File(deployDir).mkdirs();
        logger.info("Ensuring directory extraDir ${extraDir}")
        new File(extraDir).mkdirs();

        logger.info("gwtSourceDirs count: ${gwtSourceDirs.size()}")

        //println "Dumping $gwtSourceDirs.size gwtSourceDirs"
        //gwtSourceDirs.each {
            //println "${it.toString()}"
        //}
        logger.info('modifiedProjectsBasePath: ' + modifiedProjectsBasePath)

        gwtSourceDirs.each {
            if (it instanceof Path && Files.exists(it)) {
                println "Can't find gwtSourceDir" + it
                //throw new GradleException("Can't find gwtSourceDir ${it}")
            } else if (it instanceof File && !Files.exists(it.toPath())) {
                println "Can't find gwtSourceDir" + it
            }
        }
    }

    mainClass = gwtCompilerProps.mainClass

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-XfragmentCount', '5',
            '-optimize', '9',
            '-failOnError',
            '-localWorkers', gwtCompilerProps.workers,
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                               // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${gwtTmpDir}",
            //'-Dgwt.persistentunitcache=false',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'makeGwtSourceDirs'

    def module = 'stroom.app.AppSuperDevModeChrome'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
        logger.info("Ensuring directory workDir ${workDir}")
        new File(workDir).mkdirs();
        logger.info("Ensuring directory deployDir ${deployDir}")
        new File(deployDir).mkdirs();
        logger.info("Ensuring directory extraDir ${extraDir}")
        new File(extraDir).mkdirs();

        gwtSourceDirs.each {
            if (it instanceof Path && Files.exists(it)) {
                println "Can't find gwtSourceDir" + it
                //throw new GradleException("Can't find gwtSourceDir ${it}")
            } else if (it instanceof File && !Files.exists(it.toPath())) {
                println "Can't find gwtSourceDir" + it
            }
        }
    }

    mainClass = 'com.google.gwt.dev.Compiler'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-draftCompile',                        // Speeds up compile with 25%
            '-XfragmentCount', '0',
            '-optimize', '0',
            '-failOnError',
            '-localWorkers', '5',
            '-incremental',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${gwtTmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'makeGwtSourceDirs'

    def module = 'stroom.app.AppSuperDevModeChrome'

//    def dirs = []
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("java") {dirs << it}}}}
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("resources") {dirs << it}}}}
//    println dirs

    doFirst {
        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
        logger.info("Ensuring directory workDir ${workDir}")
        new File(workDir).mkdirs();
        logger.info("Ensuring directory deployDir ${deployDir}")
        new File(deployDir).mkdirs();
        logger.info("Ensuring directory extraDir ${extraDir}")
        new File(extraDir).mkdirs();

        def GREEN = '\033[1;32m'
        def NC = '\033[0m'

        println """
        ${NC}To run stroom in SuperDevMode:${GREEN}
          * Visit the 'code server' (link further down) and copy the dev mode buttons to your browser bookmarks
          * Visit stroom at http://localhost:8080 (NOTE: http, not https), or https://localhost if running Nginx
          * Click 'Dev Mode On'${NC}

          If you change any code shared between client and server, you will need to run :stroom-app-gwt:jakarta to
          update GWT's view of the code.
        """.stripIndent().trim()
    }

    mainClass = 'com.google.gwt.dev.DevMode'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-failOnError',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            '-noserver',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${gwtTmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtClean {
    group "gwt"
    doLast {
//        println 'Deleting GWT unit cache: ' + unitCacheDir.toString()
//        delete unitCacheDir

        logger.info('Deleting GWT compiled output: ' + outputDir.toString())
        delete outputDir
        logger.info('Deleting GWT build dir: ' + gwtBuildDir.toString())
        delete gwtBuildDir
        logger.info('Deleting modified projects: ' + modifiedProjectsBasePath.toString())
        delete modifiedProjectsBasePath
        logger.info('Deleting modified projects (GWT copy): ' + modifiedProjectsBasePathGwt.toString())
        delete modifiedProjectsBasePathGwt

        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
    }
}

// Now all the tasks are configured, we need to add dependencies on our dynamically
// registered tasks to ensure they get run
dynamicJakartaTasks.each { dynamicTask ->
    tasks.getByName('gwtDraftCompile').dependsOn dynamicTask
    tasks.getByName('gwtCompile').dependsOn dynamicTask
    tasks.getByName('gwtSuperDevMode').dependsOn dynamicTask
}
