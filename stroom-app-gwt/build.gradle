ext.moduleName = 'stroom.app.gwt'

def getSysPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (System.hasProperty(propName)
            && System.getProperty(propName) != "unspecified"
            && System.getProperty(propName) != "") {
        val = System.getProperty(propName)
        logger.info("Using property [${propName}] with value [${val}]")
    } else {
        val = defaultValue
        logger.info("Property [${propName}] has no value, using default value [${val}]")
    }
    return val;
}

def resourcesDir = project(':stroom-app').file('src/main/resources')
def warDir = "${resourcesDir}/ui"
def outputDir = "${warDir}/stroom"

def javaIoTmpDir = getSysPropertyOrDefault("java.io.tmpdir", "/tmp")
logger.info('javaIoTmpDir: ' + javaIoTmpDir)
// Append the rootDir so gwt builds from different dirs don't conflict
def gwtBuildDir = javaIoTmpDir + "/app-gwt_build/" + rootDir
gwtBuildDir = gwtBuildDir.replaceAll('//', '/')
logger.info('gwtBuildDir: ' + gwtBuildDir)

def gwtTmpDir = "${gwtBuildDir}/tmp"
logger.info('gwtTmpDir: ' + gwtTmpDir)
def workDir = "${gwtBuildDir}/work"
def deployDir = "${gwtBuildDir}/deploy"
def extraDir = "${gwtBuildDir}/extra"
// This is where eclipse transformer outputs to
def modifiedProjectsBasePath = "${gwtBuildDir}/modified_projects"
// This will contain a copy of modifiedProjectsBasePath that GWT uses on its classpath
def modifiedProjectsBasePathGwt = "${gwtBuildDir}/modified_projects_gwt"

def gwtSourceDirs = []
def modifiedCoreSharedJarPath = null
def modifiedCoreSharedSourcePath = null
def dynamicJakartaTasks = []

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'javax.xml.bind') {
                details.useVersion "2.3.1"
            }
            if (details.requested.group == 'com.fasterxml.jackson.core') {
                details.useVersion "2.9.6"
            }
        }
    }
}


// Declare a source set just for our GWT compile that is separate from teh Java compilation source set.
sourceSets {
    gwtSource
}

dependencies {
    implementation project(':stroom-core-client')
    implementation project(':stroom-core-client-widget')
    implementation project(':stroom-core-shared')
    implementation project(':stroom-dashboard:stroom-dashboard-client')
    implementation project(':stroom-docref')
    implementation project(':stroom-query:stroom-query-language-api')
    implementation project(':stroom-query:stroom-query-api')
    implementation project(':stroom-query:stroom-query-common')
    implementation project(':stroom-security:stroom-security-client')
    implementation project(':stroom-security:stroom-security-client-api')
    implementation project(':stroom-statistics:stroom-statistics-client')

    // These source deps are all needed for the GWT transpiling to javascript
    implementation libs.gin
    implementation libs.guice__gwt
    implementation libs.gwt_dev
    implementation libs.gwt_user
    implementation libs.gwtp_mvp_client
    implementation libs.jackson_annotations
    implementation libs.jaxb_api__gwt
    implementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations
    implementation libs.ws_rs_api__gwt

    gwtSourceImplementation libs.gin
    gwtSourceImplementation libs.gwt_dev
    gwtSourceImplementation libs.gwt_user
    gwtSourceImplementation libs.gwtp_mvp_client
    gwtSourceImplementation libs.jaxb_api__gwt
    gwtSourceImplementation libs.swagger_annotations // needed so gwt can compile the stroom-query code that contains swagger annotations
    gwtSourceImplementation libs.restygwt
    gwtSourceImplementation libs.ws_rs_api__gwt
}

// Define a list of projects that contain the source code we want to compile with GWT.
def projList = [
    project(':stroom-app-gwt'),
    project(':stroom-core-client'),
    project(':stroom-core-client-widget'),
    project(':stroom-dashboard:stroom-dashboard-client'),
    project(':stroom-security:stroom-security-client'),
    project(':stroom-statistics:stroom-statistics-client'),
]

// Mutually exclusive with projList
// List of projects to do the jakarta => javax transform on
def projectsToRename = [
    project(':stroom-core-shared'),
    project(':stroom-docref'),
    project(':stroom-query:stroom-query-api'),
    project(':stroom-util-shared'),
    project(':stroom-query:stroom-query-common'),
    project(':stroom-query:stroom-query-language-api'),
    project(':stroom-security:stroom-security-client-api'),
]

configurations {
    jakartaTransformerConfiguration {
        resolutionStrategy {
            // org.eclipse.transformer.cli:0.5.0 uses biz.aQute.bnd:biz.aQute.bnd.transform:6.3.1 which does not work
            // on J21 compiled classes/jars, so we need to uplift to bnd 7.0.0 which does.
            // It seems eclipse are reluctant to uplift bnd to 7.0.0 as that is J17 and they want to support J8
            // See https://github.com/eclipse/transformer/issues/475 and https://github.com/bndtools/bnd/issues/5886
            dependencySubstitution {
                substitute module('biz.aQute.bnd:biz.aQute.bnd.transform') using module("biz.aQute.bnd:biz.aQute.bnd.transform:${versions.bnd}")
            }
        }
    }
}

dependencies {
    // Note the dependencySubstitution on this dep above
    jakartaTransformerConfiguration libs.eclipse_transformer_cli
}

// Task to make a copy of each project in projectsToRename then change all imports
// from jakarta => javax (in source/classses/resources) so that GWT can use them.
// It adds the modified projects to GWTs compile classpath.
// This is a temporary hack until there is a jakarta friendly version of GWT.
// See https://github.com/gwtproject/gwt/issues/9727 for details on jakarta progress but
// be aware that restgwt is not jakarta friendly and is a dormant project so that will need
// sorting somehow.
task jakarta {

    gwtSourceDirs = []

    // This file has all the rename mappings for TransformerCLI to use
    def propFilePath = rootDir.toPath().resolve('jakarta-renames-reverse.properties')
    logger.info('modifiedProjectsBasePath: ' + modifiedProjectsBasePath)
    logger.info('propFilePath: ' + propFilePath)

    projectsToRename.each { prj ->
        // Dynamically create a task for each shared project
        def dynamicTaskName =  "jakarta-${prj.name}"
        logger.info('Registering task: ' + dynamicTaskName)
        tasks.register(dynamicTaskName) {
            dependsOn prj.tasks.getByName('compileJava')

            // This is where eclipse transformer outputs the modified source/classes to
            def outputProjectPath = new File(modifiedProjectsBasePath).toPath().resolve(prj.name)
            // This dir will be a copy of outputProjectPath that GWT uses for its classpath
            def gwtProjectSourcePath = new File(modifiedProjectsBasePathGwt).toPath().resolve(prj.name)

            def inputProjectPath = prj.projectDir
            // Define the inputs/outputs of this dynamic task so gradle knows if anything has changed, so
            // can skip the task if not.
            inputs.dir inputProjectPath
            outputs.dir gwtProjectSourcePath

            // Now add the dirs from out modified (jakarta => javax) stroom-core-shared temp dir
            // We have to do this in the configuration stage rather than in doLast so they get
            // added even if the dynamic task is skipped due to no change.
            gwtSourceDirs.add(gwtProjectSourcePath.resolve('build').resolve('classes').resolve('java').resolve('main'))
            gwtSourceDirs.add(gwtProjectSourcePath.resolve('src').resolve('main').resolve('java'))
            gwtSourceDirs.add(gwtProjectSourcePath.resolve('src').resolve('main').resolve('resources'))

            doLast {
                println 'Running eclipse TransformerCLI on ' + prj.name
                logger.info('inputProjectPath: ' + inputProjectPath)
                logger.info('outputProjectPath: ' + outputProjectPath)
                logger.info('modifiedProjectsBasePath: ' + modifiedProjectsBasePath)
                new File(modifiedProjectsBasePath).mkdirs();
                new File(modifiedProjectsBasePathGwt).mkdirs();

                // Eclipse transformer won't run unless the output dir is empty
                logger.info('Deleting outputProjectPath: ' + outputProjectPath.toString())
                delete outputProjectPath

                javaexec {
                    classpath configurations.jakartaTransformerConfiguration
                    mainClass = "org.eclipse.transformer.cli.TransformerCLI"
                    args = [
                        inputProjectPath,
                        outputProjectPath,
                        '-tr', propFilePath,
                    ]
                }

                // Rsync the output from the eclipse transformer to the dir that GWT is using for its
                // classpath. This means we don't delete all the files that superdev is monitoring, which
                // it doesn't like. Rsync should only change the files that have actually changed in their
                // original modules, i.e. when doing superdev code changes.
                println "rsync-ing from ${outputProjectPath} to ${gwtProjectSourcePath}"
                exec {
                    executable "rsync"
                    args = [
                        "--archive", 
                        "${outputProjectPath}/",
                        "${gwtProjectSourcePath}/",
                    ]
                }
            }
        }
        // Run this dynamic task after the one that registred it
        finalizedBy dynamicTaskName
        // Make a note of the dynamic task so we can add dependencies on it later
        dynamicJakartaTasks.add(tasks.getByName(dynamicTaskName))
    }

    doLast {
        // Add source/classes/resources from each of the non-modified projects.
        projList.each { prj ->
            gwtSourceDirs.addAll(prj.sourceSets.main.output.classesDirs)
            gwtSourceDirs.addAll(prj.sourceSets.main.java.srcDirs)
            gwtSourceDirs.addAll(prj.sourceSets.main.resources.srcDirs)
        }

        // Add all of the library sources from the gwtSource source set defined above.
        gwtSourceDirs.addAll(sourceSets.gwtSource.compileClasspath)

        //println "Dumping ${gwtSourceDirs.size} gwtSourceDirs"
        //gwtSourceDirs.each {
            //println "${it.toString()}"
        //}
    }
}

task gwtCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'gwtClean'
    dependsOn 'jakarta'
    //finalizedBy 'cleanTempFiles'

    def module = 'stroom.app.App'

    doFirst {
        println 'Deleting GWT build dirs in ' + gwtBuildDir.toString()
        delete gwtTmpDir
        delete workDir
        delete deployDir
        delete extraDir

        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
        logger.info("Ensuring directory workDir ${workDir}")
        new File(workDir).mkdirs();
        logger.info("Ensuring directory deployDir ${deployDir}")
        new File(deployDir).mkdirs();
        logger.info("Ensuring directory extraDir ${extraDir}")
        new File(extraDir).mkdirs();

        logger.info("gwtSourceDirs count: ${gwtSourceDirs.size()}")

        //println "Dumping $gwtSourceDirs.size gwtSourceDirs"
        //gwtSourceDirs.each {
            //println "${it.toString()}"
        //}
        logger.info('modifiedProjectsBasePath: ' + modifiedProjectsBasePath)
    }

    mainClass = gwtCompilerProps.mainClass

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-XfragmentCount', '5',
            '-optimize', '9',
            '-failOnError',
            '-localWorkers', gwtCompilerProps.workers,
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                               // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${gwtTmpDir}",
            //'-Dgwt.persistentunitcache=false',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtDraftCompile(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'jakarta'
    //finalizedBy 'cleanTempFiles'
    def module = 'stroom.app.AppSuperDevModeChrome'

    doFirst {
        println 'Deleting GWT compiled output: ' + outputDir.toString()
        delete outputDir

        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
        logger.info("Ensuring directory workDir ${workDir}")
        new File(workDir).mkdirs();
        logger.info("Ensuring directory deployDir ${deployDir}")
        new File(deployDir).mkdirs();
        logger.info("Ensuring directory extraDir ${extraDir}")
        new File(extraDir).mkdirs();
    }

    mainClass = 'com.google.gwt.dev.Compiler'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-draftCompile',                        // Speeds up compile with 25%
            '-XfragmentCount', '0',
            '-optimize', '0',
            '-failOnError',
            '-localWorkers', '5',
            '-incremental',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${gwtTmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = '1G'
    maxHeapSize = '4G'
}

task gwtSuperDevMode(dependsOn: classes, type: JavaExec) {
    group "gwt"
    dependsOn 'jakarta'
    def module = 'stroom.app.AppSuperDevModeChrome'

//    def dirs = []
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("java") {dirs << it}}}}
//    parent.file(".").eachDir {it.eachDirMatch("src") {it.eachDirMatch("main") { it.eachDirMatch("resources") {dirs << it}}}}
//    println dirs

    doFirst {
        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
        logger.info("Ensuring directory workDir ${workDir}")
        new File(workDir).mkdirs();
        logger.info("Ensuring directory deployDir ${deployDir}")
        new File(deployDir).mkdirs();
        logger.info("Ensuring directory extraDir ${extraDir}")
        new File(extraDir).mkdirs();

        def GREEN = '\033[1;32m'
        def NC = '\033[0m'

        println """
        ${NC}To run stroom in SuperDevMode:${GREEN}
          * Visit the 'code server' (link further down) and copy the dev mode buttons to your browser bookmarks
          * Visit stroom at http://localhost:8080 (NOTE: http, not https), or https://localhost if running Nginx
          * Click 'Dev Mode On'${NC}

          If you change any code shared between client and server, you will need to run :stroom-app-gwt:jakarta to
          update GWT's view of the code.
        """.stripIndent().trim()
    }

    mainClass = 'com.google.gwt.dev.DevMode'

    classpath {
        gwtSourceDirs
    }

    args = [
            '-logLevel', 'INFO',
            '-workDir', workDir,
            '-failOnError',
            '-war', warDir,
            '-deploy', deployDir,
            '-extra', extraDir,
            '-strict',
            '-noserver',
            module                                  // Your GWT module
    ]

    jvmArgs = [
            "-Djava.io.tmpdir=${gwtTmpDir}",
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',  // needed for GWT
    ]
    minHeapSize = gwtCompilerProps.minHeap
    maxHeapSize = gwtCompilerProps.maxHeap
}

task gwtClean {
    group "gwt"
    doLast {
//        println 'Deleting GWT unit cache: ' + unitCacheDir.toString()
//        delete unitCacheDir

        logger.info('Deleting GWT compiled output: ' + outputDir.toString())
        delete outputDir
        logger.info('Deleting GWT build dir: ' + gwtBuildDir.toString())
        delete gwtBuildDir
        logger.info('Deleting modified projects: ' + modifiedProjectsBasePath.toString())
        delete modifiedProjectsBasePath
        logger.info('Deleting modified projects (GWT copy): ' + modifiedProjectsBasePathGwt.toString())
        delete modifiedProjectsBasePathGwt

        logger.info("Ensuring directory gwtBuildDir ${gwtBuildDir}")
        new File(gwtBuildDir).mkdirs();
        logger.info("Ensuring directory gwtTmpDir ${gwtTmpDir}")
        new File(gwtTmpDir).mkdirs();
    }
}

// Now all the tasks are configured, we need to add dependencies on our dynamically
// registered tasks to ensure they get run
dynamicJakartaTasks.each { dynamicTask ->
    tasks.getByName('gwtDraftCompile').dependsOn dynamicTask
    tasks.getByName('gwtCompile').dependsOn dynamicTask
    tasks.getByName('gwtSuperDevMode').dependsOn dynamicTask
}

//import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorPlugin
//import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorExtension.Generator
//import guru.nidi.graphviz.attribute.Color
//import guru.nidi.graphviz.attribute.Style
//
//plugins.apply(DependencyGraphGeneratorPlugin)
//
//def stroomGenerator = new Generator(
//        "stroomLibraries", // Suffix for our Gradle task.
//        { dependency -> dependency.getModuleGroup().startsWith("stroom") }, // Only want stroom.
//        { dependency -> true }, // Include transitive dependencies.
//        { node, dependency -> node.add(Style.FILLED, Color.rgb("#ff6f00")) }, // Give them some stroom color.
//)
//
//dependencyGraphGenerator {
//    generators = [ stroomGenerator ]
//}
