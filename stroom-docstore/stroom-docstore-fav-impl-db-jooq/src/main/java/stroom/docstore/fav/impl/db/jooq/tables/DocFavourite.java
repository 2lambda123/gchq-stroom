/*
 * This file is generated by jOOQ.
 */
package stroom.docstore.fav.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.docstore.fav.impl.db.jooq.Keys;
import stroom.docstore.fav.impl.db.jooq.Stroom;
import stroom.docstore.fav.impl.db.jooq.tables.records.DocFavouriteRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocFavourite extends TableImpl<DocFavouriteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.doc_favourite</code>
     */
    public static final DocFavourite DOC_FAVOURITE = new DocFavourite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocFavouriteRecord> getRecordType() {
        return DocFavouriteRecord.class;
    }

    /**
     * The column <code>stroom.doc_favourite.id</code>.
     */
    public final TableField<DocFavouriteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.doc_favourite.doc_type</code>.
     */
    public final TableField<DocFavouriteRecord, String> DOC_TYPE = createField(DSL.name("doc_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.doc_favourite.doc_uuid</code>.
     */
    public final TableField<DocFavouriteRecord, String> DOC_UUID = createField(DSL.name("doc_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.doc_favourite.user_uuid</code>.
     */
    public final TableField<DocFavouriteRecord, String> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.doc_favourite.create_time_ms</code>.
     */
    public final TableField<DocFavouriteRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    private DocFavourite(Name alias, Table<DocFavouriteRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocFavourite(Name alias, Table<DocFavouriteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.doc_favourite</code> table reference
     */
    public DocFavourite(String alias) {
        this(DSL.name(alias), DOC_FAVOURITE);
    }

    /**
     * Create an aliased <code>stroom.doc_favourite</code> table reference
     */
    public DocFavourite(Name alias) {
        this(alias, DOC_FAVOURITE);
    }

    /**
     * Create a <code>stroom.doc_favourite</code> table reference
     */
    public DocFavourite() {
        this(DSL.name("doc_favourite"), null);
    }

    public <O extends Record> DocFavourite(Table<O> child, ForeignKey<O, DocFavouriteRecord> key) {
        super(child, key, DOC_FAVOURITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<DocFavouriteRecord, Long> getIdentity() {
        return (Identity<DocFavouriteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocFavouriteRecord> getPrimaryKey() {
        return Keys.KEY_DOC_FAVOURITE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocFavouriteRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DOC_FAVOURITE_DOC_FAVOURITE_FK_DOC_TYPE_DOC_UUID_USER_UUID);
    }

    @Override
    public DocFavourite as(String alias) {
        return new DocFavourite(DSL.name(alias), this);
    }

    @Override
    public DocFavourite as(Name alias) {
        return new DocFavourite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocFavourite rename(String name) {
        return new DocFavourite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocFavourite rename(Name name) {
        return new DocFavourite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
