import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath group: 'gchq', name: 'urlDependencyPlugin', version: 'v0.2.0'
        classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: '1.1.0'
    }
}

plugins {
    //plugin for downloading content from the 'net
    id "de.undercouch.download" version "3.2.0"

    //plugin for producing a tree of task dependencies, run task 'taskTree'
    id "com.dorongold.task-tree" version "1.3"
}

apply plugin: 'gchq.urldependencies'

ext.stroomPluginsDir = System.getProperty("user.home") + "/.stroom/plugins"

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified") {
        val = project.getProperty(propName)
        println "Using propery $propName with value $val"
    } else {
        val = defaultValue
        println "Propery $propName has no value, using default value $val"
    }
    return val;
}

ext.gwtCompilerProps = [
    mainClass: 'stroom.gwt.GwtCompilerWrapper',
    minHeap: getPropertyOrDefault('gwtCompilerMinHeap', '1G'),
    maxHeap: getPropertyOrDefault('gwtCompilerMaxHeap', '4G'),
    workers: getPropertyOrDefault('gwtCompilerWorkers', '5')
]

//version numbers for libs that share version numbers, e.g. dropwizard-*, or for github repo release versions
ext.versions = [
    //----------Stroom-----------------
    stroom: getPropertyOrDefault('version', 'SNAPSHOT'),

    //------Stroom-repos---------------
//    stroomProxyRepo: 'v5.1-beta.8',
    eventLogging: 'v3.1.0',
    hadoopCommonShaded: 'v2.6.4-3',
    hadoopHdfsShaded: 'v2.6.4',
    stroomExpression: 'v1.0.0', 
    stroomQuery: 'v2.0.0-alpha.3', //same version for both stroom-query-api and stroom-query-common
    stroomStats: 'v0.6.0-alpha',

    //------------3rd-party------------
    curator: '2.12.0', //must be chosen to be compatible with the ZK version in CDH 5.10
    dropwizard: '1.1.0', //if you change this version you should check the versions below that need to move in sync with it
    dropwizard_metrics: '3.2.2', //should be kept in step with dropwizard
    gwt: '2.8.0',
    hibernate: '4.3.8.Final', //dropwiz 1.1.0 uses -validator 5.3.4.Final and -core 5.2.8.Final
    jackson: '2.8.6',
    jersey: '2.25.1',
    jetty: '9.4.2.v20170220', //in line with dropwizard 1.1.0
    logback: '1.2.1', //in line with dropwizard 1.1.0
    lucene: '5.5.3',
    shiro: '1.3.2',
    slf4j: '1.7.24', //in line with dropwizard 1.1.0
    spring: '4.3.4.RELEASE',
    swagger: '1.5.16',
    zzDUMMYzz: 'makes sorting easier'
]

//lib names for urlDependenciesPlugin
ext.urlLibs = [
    stroomQueryApi: "stroom-query-api-$versions.stroomQuery",
    stroomQueryApiSources: "stroom-query-api-$versions.stroomQuery-sources",
    stroomQueryCommon: "stroom-query-common-$versions.stroomQuery",
    stroomQueryCommonSources: "stroom-query-common-$versions.stroomQuery-sources",
    stroomExpression: "stroom-expression-$versions.stroomExpression",
    stroomStatsSchema: "stroom-stats-schema-$versions.stroomStats",
//    stroomProxyRepo: "stroom-proxy-repo-$versions.stroomProxyRepo",
    eventLogging: "event-logging-$versions.eventLogging",
    hadoopCommonShaded: "hadoop-common-shaded-$versions.hadoopCommonShaded-all",
    hadoopHdfsShaded: "hadoop-hdfs-shaded-$versions.hadoopHdfsShaded-all",
    zzDUMMYzz: "makes sorting easier"
]

//dependency strings for use in sub projects
ext.libs = [
    aopalliance: "aopalliance:aopalliance:1.0",
    aspectjrt: "org.aspectj:aspectjrt:1.8.10",
    aspectjweaver: "org.aspectj:aspectjweaver:1.8.10",
    assertj_core: "org.assertj:assertj-core:3.6.2",
    c3p0: "com.mchange:c3p0:0.9.5.2",
    commons_compress: "org.apache.commons:commons-compress:1.12",
    commons_fileupload: "commons-fileupload:commons-fileupload:1.3.2",
    commons_io: "commons-io:commons-io:2.5",
    commons_lang: "commons-lang:commons-lang:2.6",
    commons_pool2: "org.apache.commons:commons-pool2:2.4.2",
    curator_client: "org.apache.curator:curator-client:$versions.curator",
    curator_framework: "org.apache.curator:curator-framework:$versions.curator",
    curator_x_discovery: "org.apache.curator:curator-x-discovery:$versions.curator",
    dropwizard_assets: "io.dropwizard:dropwizard-assets:$versions.dropwizard"  ,
    dropwizard_client: "io.dropwizard:dropwizard-client:$versions.dropwizard",
    dropwizard_core: "io.dropwizard:dropwizard-core:$versions.dropwizard"  ,
    dropwizard_jersey: "io.dropwizard:dropwizard-jersey:$versions.dropwizard",
    dropwizard_jetty: "io.dropwizard:dropwizard-jetty:$versions.dropwizard", //was 1.0.6 now 1.1.0
    dropwizard_lifecycle: "io.dropwizard:dropwizard-lifecycle:$versions.dropwizard",
    dropwizard_metrics_annotation: "io.dropwizard.metrics:metrics-annotation:$versions.dropwizard_metrics",
    dropwizard_metrics_healthchecks: "io.dropwizard.metrics:metrics-healthchecks:$versions.dropwizard_metrics",
    dropwizard_servlets: "io.dropwizard:dropwizard-servlets:$versions.dropwizard",
    dropwizard_testing: "io.dropwizard:dropwizard-testing:$versions.dropwizard",
    ehcache_core: "net.sf.ehcache:ehcache-core:2.6.11",
    ehcache_spring_annotations: "com.googlecode.ehcache-spring-annotations:ehcache-spring-annotations:1.2.0",
    flyway_core: "org.flywaydb:flyway-core:4.0.3",
    gin: "com.google.gwt.inject:gin:2.1.2",
    guava: "com.google.guava:guava:21.0", //>=v21 removes MoreExecutors.sameThreadExecutor() which is needed by curator 2.11
    guice: "com.google.inject:guice:3.0",
    gwt_dev: "com.google.gwt:gwt-dev:$versions.gwt",
    gwt_servlet: "com.google.gwt:gwt-servlet:$versions.gwt",
    gwt_user: "com.google.gwt:gwt-user:$versions.gwt",
    gwtp_mvp_client: "com.gwtplatform:gwtp-mvp-client:0.7",
    hamcrest_core: "org.hamcrest:hamcrest-core:1.3",
    hbase: "org.apache.hbase:hbase-common:1.2.1", //should be set to be consistent with CDH version
    hessian: "com.caucho:hessian:4.0.38",
    hibernate_core: "org.hibernate:hibernate-core:$versions.hibernate" /* LATEST 5.2.5.Final */,
    hibernate_entitymanager: "org.hibernate:hibernate-entitymanager:$versions.hibernate" /* LATEST 5.2.5.Final */,
    hibernate_jpa_api: "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final",
    hibernate_validator: "org.hibernate:hibernate-validator:5.3.4.Final",
    hsqldb: "org.hsqldb:hsqldb:2.3.4",
    jBCrypt: "de.svenkubiak:jBCrypt:0.4.1",
    jackson_annotations: "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson",
    jackson_core: "com.fasterxml.jackson.core:jackson-core:$versions.jackson",
    jackson_databind: "com.fasterxml.jackson.core:jackson-databind:$versions.jackson", //was 2.8.5, now 2.8.6
    java_jwt: "com.auth0:java-jwt:3.1.0",
    javassist: "org.javassist:javassist:3.18.1-GA",
    javax_annotation_api: "javax.annotation:javax.annotation-api:1.2",
    javax_el: "org.glassfish:javax.el:3.0.1-b08",
    javax_el_api: "javax.el:javax.el-api:3.0.0",
    javax_inject: "javax.inject:javax.inject:1",
    javax_servlet_api: "javax.servlet:javax.servlet-api:3.1.0",
    jcl_over_slf4j: "org.slf4j:jcl-over-slf4j:$versions.slf4j",
    jersey_client: "org.glassfish.jersey.core:jersey-client:$versions.jersey",
    jersey_common: "org.glassfish.jersey.core:jersey-common:$versions.jersey",
    jersey_server: "org.glassfish.jersey.core:jersey-server:$versions.jersey", //was 2.25 now 2.25.1
    jetty_server: "org.eclipse.jetty:jetty-server:$versions.jetty",
    jetty_servlet: "org.eclipse.jetty:jetty-servlet:$versions.jetty",
    jetty_servlets: "org.eclipse.jetty:jetty-servlets:$versions.jetty",
    jose4j: "org.bitbucket.b_c:jose4j:0.5.5",
    jsinterop_annotations: "com.google.jsinterop:jsinterop-annotations:1.0.1",
    jul_to_slf4j: "org.slf4j:jul-to-slf4j:$versions.slf4j",
    junit: "junit:junit:4.12",
    log4j_over_slf4j: "org.slf4j:log4j-over-slf4j:$versions.slf4j",
    logback_classic: "ch.qos.logback:logback-classic:$versions.logback",
    logback_core: "ch.qos.logback:logback-core:$versions.logback",
    lucene_analyzers_common: "org.apache.lucene:lucene-analyzers-common:$versions.lucene",
    lucene_core: "org.apache.lucene:lucene-core:$versions.lucene",
    lucene_queryparser: "org.apache.lucene:lucene-queryparser:$versions.lucene",
    mockito_core: "org.mockito:mockito-core:2.0.2-beta",
    mysql_connector_java: "mysql:mysql-connector-java:5.1.40",
    poi: "org.apache.poi:poi:3.15",
    poi_ooxml: "org.apache.poi:poi-ooxml:3.15",
    saxon_he: "net.sf.saxon:Saxon-HE:9.7.0-18",
    shiro_aspectj: "org.apache.shiro:shiro-aspectj:$versions.shiro",
    shiro_core: "org.apache.shiro:shiro-core:$versions.shiro",
    shiro_spring: "org.apache.shiro:shiro-spring:$versions.shiro",
    shiro_web: "org.apache.shiro:shiro-web:$versions.shiro",
    slf4j_api: "org.slf4j:slf4j-api:$versions.slf4j",
    spring_aop: "org.springframework:spring-aop:$versions.spring",
    spring_beans: "org.springframework:spring-beans:$versions.spring",
    spring_context: "org.springframework:spring-context:$versions.spring",
    spring_context_support: "org.springframework:spring-context-support:$versions.spring",
    spring_core: "org.springframework:spring-core:$versions.spring",
    spring_jdbc: "org.springframework:spring-jdbc:$versions.spring",
    spring_orm: "org.springframework:spring-orm:$versions.spring",
    spring_test: "org.springframework:spring-test:$versions.spring",
    spring_tx: "org.springframework:spring-tx:$versions.spring",
    stax_api: "stax:stax-api:1.0.1",
    swagger_annotations: "io.swagger:swagger-annotations:$versions.swagger",
    validation_api: "javax.validation:validation-api:1.0.0.GA", //GWT 2.8.0 throws errors on gwtCompile if validation-api 1.1.0.Final is used
    vavr: "io.vavr:vavr:0.9.0",
    ws_rs_api: "javax.ws.rs:javax.ws.rs-api:2.0.1",
    xml_apis: "xml-apis:xml-apis:1.0.b2",
    zzDUMMYzz: "makes sorting easier"
]

def contentPackImportDir = "${System.properties['user.home']}/.stroom/contentPackImport/"
def contentReleasesUrl = "http://github.com/gchq/stroom-content/releases/download/"
def visualisationsContentPackVer = "v3.0.4"
def visualisationsContentPackUrl = "http://github.com/gchq/stroom-visualisations-dev/releases/download/${visualisationsContentPackVer}/visualisations-production-${visualisationsContentPackVer}.zip"

//A set of content packs to download in the task downloadStroomContent
ext.contentPacks = [
    'core-xml-schemas': 'v2.0',
    'internal-statistics-stroom-stats': 'v2.0',
    'internal-statistics-sql': 'v2.0',
    'internal-dashboards': 'v1.1',
    'stroom-101': 'v1.0',
    'event-logging-xml-schema': 'v3.1.1'
]

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    group = 'stroom'
    version = versions.stroom
}

subprojects {
    apply plugin: 'java'

    //analyze missing dependencies for the code base
    apply plugin: 'ca.cutterslade.analyze'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        // This lets us use different directories for our integration tests.
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/java')
            }
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    configurations {
        testArtifacts
        sourceArtifacts

        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"
            exclude module: 'xercesImpl'

            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.name == 'log4j') {
                    details.useTarget "org.slf4j:log4j-over-slf4j:$versions.slf4j"
                }
            }
            resolutionStrategy {
                forcedModules = [
                    //>=v21 removes MoreExecutors.sameThreadExecutor() which is needed by curator 2.11
                    //libs.guava
                ]
            }
        }
        
        // This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task testJar(type: Jar) {
        baseName = "${project.name}-test"
        from sourceSets.test.output
    }
    task sources(type: Jar) {
        baseName = "${project.name}-source"
        from sourceSets.main.allSource
    }
    artifacts {
        testArtifacts testJar
        sourceArtifacts sources
    }

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }
    artifacts.archives packageTests

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    // This means the reports from our integration tests won't over-write the reports from our unit tests.
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

    // This task lets us run the actual integration tests.
    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        // Integration tests are quite slow so output progress for each test to keep travis alive
        afterTest { desc, result -> 
            println "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

clean{
    //clear out the 'out' dirs used by intelliJ
    delete "out"
}

    //ensure we download our libs before compiling java
    tasks.compileJava.dependsOn downloadUrlDependencies

    // These lines pull the integration test task into our build process.
    tasks.check.dependsOn integrationTest
    tasks.integrationTest.mustRunAfter test
}

// NOT SURE IF WE NEED THIS NOW
//configure(subprojects.findAll {it.name != 'stroom-app' && it.name != 'stroom-integrationtest'}) {
//    //swagger has to generate the spec from code so all modules except for stroom-app (which is the module the
//    //swagger task is in) and stroom-integrationtest (which depends on stroom-app) must be compiled to jars first
//    //so stroom-app can access their code
//    //However, generateSwaggerDocumentation must run before stroom-app:jar as its artefacts (the json/yaml spec files)
//    // need to go into that jar
//    tasks.getByPath(':stroom-core-module:generateSwaggerDocumentation').mustRunAfter jar
//}


task clearContentPackImportDir(type: Delete) {
    //ensure the import directory exists
    new File(contentPackImportDir).mkdirs()

    //cleans out any zip files in the contentPackImportDir
    delete fileTree(new File(contentPackImportDir)) {
        include '**/*.zip'
    }
}

task downloadStroomContent() {

    dependsOn clearContentPackImportDir

    doLast {
        //download each content pack to the contentPackImportDir ready for stroom to import on startup
        for (pack in contentPacks) {
            def packName = pack.key
            def packVer = pack.value
            def packUrl = "${contentReleasesUrl}${packName}-${packVer}/${packName}-${packVer}.zip"
            download {
                src packUrl
                dest new File(contentPackImportDir)
                overwrite true
            }
        }
        //now get the visualisations pack from a different repo
        download {
            src visualisationsContentPackUrl
            dest new File(contentPackImportDir)
            overwrite true
        }
    }
}

task setupSampleData() {
    dependsOn downloadStroomContent
    dependsOn ':stroom-integrationtest:setupSampleData'
}

project(':stroom-util') {
    publishing.publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

project(':stroom-util-shared') {
    publishing.publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

project(':stroom-entity-shared') {
    publishing.publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

urlDependencies {
    libs "libs"
    compile(urlLibs.stroomQueryApi,
        "https://github.com/gchq/stroom-query/releases/download/$versions.stroomQuery/${urlLibs.stroomQueryApi}.jar")

    compile(urlLibs.stroomQueryApiSources,
        "https://github.com/gchq/stroom-query/releases/download/$versions.stroomQuery/${urlLibs.stroomQueryApiSources}.jar")

    compile(urlLibs.stroomQueryCommon,
            "https://github.com/gchq/stroom-query/releases/download/$versions.stroomQuery/${urlLibs.stroomQueryCommon}.jar")

    compile(urlLibs.stroomQueryCommonSources,
            "https://github.com/gchq/stroom-query/releases/download/$versions.stroomQuery/${urlLibs.stroomQueryCommonSources}.jar")

    compile(urlLibs.stroomExpression,
            "https://github.com/gchq/stroom-expression/releases/download/$versions.stroomExpression/${urlLibs.stroomExpression}.jar")

    compile(urlLibs.stroomStatsSchema,
            "https://github.com/gchq/stroom-stats/releases/download/$versions.stroomStats/${urlLibs.stroomStatsSchema}.jar")

//    compile(urlLibs.stroomProxyRepo,
//            "https://github.com/gchq/stroom-proxy/releases/download/$versions.stroomProxyRepo/${urlLibs.stroomProxyRepo}.jar")

    compile(urlLibs.eventLogging,
            "https://github.com/gchq/event-logging/releases/download/$versions.eventLogging/${urlLibs.eventLogging}.jar")

    compile(urlLibs.hadoopHdfsShaded,
            "https://github.com/gchq/hadoop-hdfs-shaded/releases/download/$versions.hadoopHdfsShaded/${urlLibs.hadoopHdfsShaded}.jar")

    compile(urlLibs.hadoopCommonShaded,
            "https://github.com/gchq/hadoop-common-shaded/releases/download/$versions.hadoopCommonShaded/${urlLibs.hadoopCommonShaded}.jar")
}


