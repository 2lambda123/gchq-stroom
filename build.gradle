buildscript {
    repositories {
        mavenLocal()
        jcenter()
        // used for
        maven { url "https://dl.bintray.com/stroom/stroom" }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'

        // A fork of https://github.com/wfhartford/gradle-dependency-analyze that works with Java 10
        classpath 'stroom:gradle-dependency-analyze:v2.2.5'

        // The following are required to put JAXB on the Gradle classpath for the purpose of JOOQ code generation in J9+.
        // Later versions of the JOOQ Gradle plugin should make this unnecessary.
        // Using beta versions of jaxb libs as they resolve the split pkg problem between jaxb-core and jaxb-runtime
        classpath 'javax.activation:activation:1.1.1'
        classpath 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
        classpath 'com.sun.xml.bind:jaxb-impl:2.4.0-b180830.0438'
        classpath 'org.glassfish.jaxb:jaxb-runtime:2.4.0-b180830.0438'
    }
}

plugins {
    // Plugin for downloading content from the 'net
    id "de.undercouch.download" version "3.4.3" apply false

    // Plugin for producing a tree of task dependencies, run task 'taskTree'
    id "com.dorongold.task-tree" version "1.3.1" apply true

    id "com.github.johnrengelman.shadow" version "4.0.3" apply false

    id 'nu.studer.jooq' version '3.0.2' apply false

    id 'org.flywaydb.flyway' version '5.2.4' apply false

//    id 'java-library'

//    id 'nebula.lint' version '10.4.2'
}

wrapper{
    gradleVersion = '5.1'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'de.undercouch.download'
apply plugin: 'ca.cutterslade.analyze'

if (!JavaVersion.current().isJava10()) {
    throw new GradleException("This build must be run with Java 10 (current = " + JavaVersion.current() + ")")
}

ext.stroomPluginsDir = System.getProperty("user.home") + "/.stroom/plugins"
ext.stroomContentImportDir = System.getProperty("user.home") + "/.stroom/contentPackImport"

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

ext.gwtCompilerProps = [
        mainClass: 'stroom.gwt.GwtCompilerWrapper',
        minHeap  : getPropertyOrDefault('gwtCompilerMinHeap', '1G'),
        maxHeap  : getPropertyOrDefault('gwtCompilerMaxHeap', '4G'),
        workers  : getPropertyOrDefault('gwtCompilerWorkers', '5')
]

//version numbers for libs that share version numbers, e.g. dropwizard-*, or for github repo release versions
ext.versions = [
        //----------Stroom-----------------
        stroom            : getPropertyOrDefault('version', 'SNAPSHOT'),

        //------Stroom-repos---------------
        //    stroomProxyRepo: 'v5.1-beta.8',
        eventLogging      : 'v4.0.5_schema-v3.2.4',
        hadoopCommonShaded: 'v2.6.4-5',
        hadoopHdfsShaded  : 'v2.6.4-4',
        stroomAuth        : 'v1.0-beta.8',
        stroomExpression  : 'v2.0.4',
        stroomQuery       : 'v4.0-beta.25', // same version for both stroom-query-api and stroom-query-common
        stroomStats       : 'v0.6.0-alpha.2',

        // NOTE: Curator relies on zookeeper and we are pegged to zookeeper 3.4.5 server by the cloudera stack.
        // Curator 4 can apparently work with zk 3.4.x as long as you exclude its zk dependency
        // and explicitly add your own 3.4.x dependency. See https://curator.apache.org/zk-compatibility.html
        // Also curator has a dependency on guava as it uses a handful of guava classes in its api. Its
        // implementation relies on a shaded guava so you should be able to use any version of guava
        // to satisfy the few classes used in the curator api, see https://issues.apache.org/jira/browse/CURATOR-200
        // It is not clear whether a 3.4.x zk client (where x > 5) and a 3.4.5 zk server are compatible. Given that
        // CHD6.1 ships with HBase 2.1 which uses a 3.4.10 zk client against a 3.4.5 server, we should be ok.
        // If the version of curator is changed then this may need to be done in tandem with stroom-stats to ensure
        // both sides' curator content in zk are compatible.

        // For details of cloudera maven dependencies (i.e. hbase/zookeeper versions) see:
        // 5.16.x - https://www.cloudera.com/documentation/enterprise/release-notes/topics/cdh_vd_cdh5_maven_repo_516x.html
        // 6.1.x - https://www.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_61_maven_artifacts.html

        //------------3rd-party------------
        curator           : '2.12.0', // See NOTE above. You MUST exclude its zk dep
        dropwizard        : '1.3.8', // used to set the dropwizard-bom version, that controls lots of dependency versions
        guice4            : '4.2.0',
        gwt               : '2.8.2',
        hibernate         : '5.2.15.Final', // DW BOM doesn't supply version for hibernate-entitymanager so we have to set it here
        hikari            : '3.2.0',
        jooq              : '3.11.9',
        junit_jupiter     : '5.3.2',
        lucene            : '5.5.3',
        mockito           : '2.23.4',
        rxjava            : '2.1.10',
        swagger           : '1.5.21',
        unirest           : '1.4.9',
        zookeeper         : '3.4.8', // Roughly pegged to the server version used by Cloudera, see links above. This version is forced below.
        zzDUMMYzz         : 'makes sorting easier'
]

//dependency strings for use in sub projects
ext.libs = [
        //------Stroom-libs---------------
        eventLogging                   : "event-logging:event-logging:$versions.eventLogging",
        hadoopCommonShaded             : "stroom:hadoop-common-shaded:$versions.hadoopCommonShaded",
        hadoopHdfsShaded               : "stroom:hadoop-hdfs-shaded:$versions.hadoopHdfsShaded",
        stroomAuthApi                  : "stroom:stroom-auth-service-api:$versions.stroomAuth",
        stroomDocRef                   : "stroom:stroom-docref:$versions.stroomQuery",
        stroomExpression               : "stroom:stroom-expression:$versions.stroomExpression",
        stroomQueryApi                 : "stroom:stroom-query-api:$versions.stroomQuery",
        stroomQueryAudit               : "stroom:stroom-query-audit:$versions.stroomQuery",
        stroomQueryAuthorisation       : "stroom:stroom-query-authorisation:$versions.stroomQuery",
        stroomQueryCommon              : "stroom:stroom-query-common:$versions.stroomQuery",
        stroomStatsSchema              : "stroom:stroom-stats-schema:$versions.stroomStats",

        //------3rd Party-libs---------------
        aopalliance                    : "aopalliance:aopalliance:1.0",
        assertj_core                   : "org.assertj:assertj-core:3.10.0",
        c3p0                           : "com.mchange:c3p0:0.9.5.2",
        commons_codec                  : "commons-codec:commons-codec:1.11",
        commons_compress               : "org.apache.commons:commons-compress:1.18",
        commons_exec                   : "org.apache.commons:commons-exec:1.3",
        commons_fileupload             : "commons-fileupload:commons-fileupload:1.3.3",
        commons_io                     : "commons-io:commons-io:2.6",
        commons_lang                   : "org.apache.commons:commons-lang3:", // version controlled by DW BOM
        commons_pool2                  : "org.apache.commons:commons-pool2:2.6.0",
        commons_text                   : "org.apache.commons:commons-text:1.4", // 1.4 needed by YamlUtil
        curator_client                 : "org.apache.curator:curator-client:$versions.curator",
        curator_framework              : "org.apache.curator:curator-framework:$versions.curator",
        curator_x_discovery            : "org.apache.curator:curator-x-discovery:$versions.curator",
        dropwizard_assets              : "io.dropwizard:dropwizard-assets", // version controlled by DW BOM
        dropwizard_bom                 : "io.dropwizard:dropwizard-bom:$versions.dropwizard",
        dropwizard_client              : "io.dropwizard:dropwizard-client", // version controlled by DW BOM
        dropwizard_configuration       : "io.dropwizard:dropwizard-configuration", // version controlled by DW BOM
        dropwizard_core                : "io.dropwizard:dropwizard-core", // version controlled by DW BOM
        dropwizard_jackson             : "io.dropwizard:dropwizard-jackson", // version controlled by DW BOM
        dropwizard_jersey              : "io.dropwizard:dropwizard-jersey", // version controlled by DW BOM
        dropwizard_jetty               : "io.dropwizard:dropwizard-jetty", //was 1.0.6 now 1.1.0
        dropwizard_lifecycle           : "io.dropwizard:dropwizard-lifecycle", // version controlled by DW BOM
        dropwizard_metrics_annotation  : "io.dropwizard.metrics:metrics-annotation", // version controlled by DW BOM
        dropwizard_metrics_core        : "io.dropwizard.metrics:metrics-core", // version controlled by DW BOM
        dropwizard_metrics_healthchecks: "io.dropwizard.metrics:metrics-healthchecks", // version controlled by DW BOM
        dropwizard_servlets            : "io.dropwizard:dropwizard-servlets", // version controlled by DW BOM
        dropwizard_testing             : "io.dropwizard:dropwizard-testing", // version controlled by DW BOM
        fast_infoset                   : "com.sun.xml.fastinfoset:FastInfoset:1.2.12",
        flyway_core                    : "org.flywaydb:flyway-core:5.2.4",
        gin                            : "com.google.gwt.inject:gin:2.1.2",
        google_findbugs                : "com.google.code.findbugs:jsr305:3.0.2",
        guava                          : "com.google.guava:guava", // version controlled by DW BOM
        guice3                         : "com.google.inject:guice:3.0",
        guice4                         : "com.google.inject:guice:$versions.guice4:no_aop",
        guice_assistedinject           : "com.google.inject.extensions:guice-assistedinject:$versions.guice4",
        guice_multibindings            : "com.google.inject.extensions:guice-multibindings:$versions.guice4",
        gwt_dev                        : "com.google.gwt:gwt-dev:$versions.gwt",
        gwt_servlet                    : "com.google.gwt:gwt-servlet:$versions.gwt",
        gwt_user                       : "com.google.gwt:gwt-user:$versions.gwt",
        gwtp_mvp_client                : "com.gwtplatform:gwtp-mvp-client:0.7",
        hbase                          : "org.apache.hbase:hbase-common:1.2.1", //should be set to be consistent with CDH version
        hessian                        : "com.caucho:hessian:4.0.51",
        hibernate_core                 : "org.hibernate:hibernate-core", // version controlled by DW BOM
        hibernate_entitymanager        : "org.hibernate:hibernate-entitymanager:$versions.hibernate", // No in DW BOM so will take the greater of our version or the BOM version
        hibernate_jpa_api              : "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
        hibernate_validator            : "org.hibernate:hibernate-validator:5.3.4.Final",
        hikari                         : "com.zaxxer:HikariCP:$versions.hikari",
        hsqldb                         : "org.hsqldb:hsqldb", // version controlled by DW BOM
        jBCrypt                        : "de.svenkubiak:jBCrypt:0.4.1",
        jackson_annotations            : "com.fasterxml.jackson.core:jackson-annotations", // version controlled by DW BOM
        jackson_core                   : "com.fasterxml.jackson.core:jackson-core", // version controlled by DW BOM
        jackson_databind               : "com.fasterxml.jackson.core:jackson-databind", // version controlled by DW BOM
        jackson_dataformat_yaml        : "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", // version controlled by DW BOM
        java_jwt                       : "com.auth0:java-jwt:3.1.0",
        javassist                      : "org.javassist:javassist", // version controlled by DW BOM
        javax_activation               : "javax.activation:javax.activation-api:1.2.0",
        javax_activation_impl          : "javax.activation:activation:1.1.1",
        javax_annotation               : "javax.annotation:javax.annotation-api:1.3.2",
        javax_el                       : "org.glassfish:javax.el:3.0.1-b08",
        javax_el_api                   : "javax.el:javax.el-api:3.0.0",
        javax_inject                   : "javax.inject:javax.inject:1",
        javax_mail_api                 : "javax.mail:javax.mail-api:1.6.0",
        javax_servlet_api              : "javax.servlet:javax.servlet-api", //version controlled by DB BOM
        javax_validation               : 'javax.validation:validation-api:1.1.0.Final',
        jaxb_api                       : "javax.xml.bind:jaxb-api:2.4.0-b180830.0359", // Using beta versions of jaxb libs as they resolve the split pkg problem between jaxb-core and jaxb-runtime
        jaxb_impl                      : "com.sun.xml.bind:jaxb-impl:2.4.0-b180830.0438",
        jaxb_runtime                   : "org.glassfish.jaxb:jaxb-runtime:2.4.0-b180830.0438",
        jcl_over_slf4j                 : "org.slf4j:jcl-over-slf4j", // version controlled by DW BOM
        jcommander                     : 'com.beust:jcommander:1.72',
        jersey_bom                     : "org.glassfish.jersey:jersey-bom", // version controlled by DW BOM
        jersey_client                  : "org.glassfish.jersey.core:jersey-client", // version controlled by DW BOM
        jersey_common                  : "org.glassfish.jersey.core:jersey-common", // version controlled by DW BOM
        jersey_server                  : "org.glassfish.jersey.core:jersey-server", // version controlled by DW BOM
        jetty_http                     : "org.eclipse.jetty:jetty-http", // version controlled by DW BOM
        jetty_server                   : "org.eclipse.jetty:jetty-server", // version controlled by DW BOM
        jetty_servlet                  : "org.eclipse.jetty:jetty-servlet", // version controlled by DW BOM
        jetty_servlets                 : "org.eclipse.jetty:jetty-servlets", // version controlled by DW BOM
        jooq                           : "org.jooq:jooq:$versions.jooq",
        jooq_codegen                   : "org.jooq:jooq-codegen:$versions.jooq",
        jooq_meta                      : "org.jooq:jooq-meta:$versions.jooq",
        jose4j                         : "org.bitbucket.b_c:jose4j:0.5.5",
        jsinterop_annotations          : "com.google.jsinterop:jsinterop-annotations:1.0.1",
        jsr173_api                     : "javax.xml.bind:jsr173_api:1.0",
        jul_to_slf4j                   : "org.slf4j:jul-to-slf4j", // version controlled by DW BOM
        junit_jupiter_api              : "org.junit.jupiter:junit-jupiter-api:$versions.junit_jupiter",
        junit_jupiter_engine           : "org.junit.jupiter:junit-jupiter-engine:$versions.junit_jupiter",
        kryo                           : "com.esotericsoftware:kryo-shaded:4.0.0",
        lmdbjava                       : "org.lmdbjava:lmdbjava:0.6.3",
        log4j_over_slf4j               : "org.slf4j:log4j-over-slf4j", // version controlled by DW BOM
        logback_classic                : "ch.qos.logback:logback-classic", // version controlled by DW BOM
        logback_core                   : "ch.qos.logback:logback-core", // version controlled by DW BOM
        lucene_analyzers_common        : "org.apache.lucene:lucene-analyzers-common:$versions.lucene",
        lucene_backward_codecs         : "org.apache.lucene:lucene-backward-codecs:$versions.lucene",
        lucene_core                    : "org.apache.lucene:lucene-core:$versions.lucene",
        lucene_queryparser             : "org.apache.lucene:lucene-queryparser:$versions.lucene",
        mockito_core                   : "org.mockito:mockito-core:$versions.mockito",
        mockito_junit_jupiter          : "org.mockito:mockito-junit-jupiter:$versions.mockito",
        mysql_connector_java           : "mysql:mysql-connector-java:5.1.40",
        objenesis                      : "org.objenesis:objenesis", // version controlled by DW BOM
        poi                            : "org.apache.poi:poi:3.17",
        poi_ooxml                      : "org.apache.poi:poi-ooxml:3.17",
        reactivestreams                : "org.reactivestreams:reactive-streams:1.0.2", //used by rxjava
        rxjava                         : "io.reactivex.rxjava2:rxjava:$versions.rxjava",
        saxon_he                       : "net.sf.saxon:Saxon-HE:9.7.0-21",
        slf4j_api                      : "org.slf4j:slf4j-api", // version controlled by DW BOM
        stax_api                       : "stax:stax-api:1.0.1",
        swagger_annotations            : "io.swagger:swagger-annotations:$versions.swagger",
        test_containers                : "org.testcontainers:testcontainers:1.8.0",
        test_containers_mysql          : "org.testcontainers:mysql:1.8.0",
        unirest                        : "com.mashape.unirest:unirest-java:$versions.unirest",
        validation_api                 : "javax.validation:validation-api:1.0.0.GA", //GWT 2.8.0 throws errors on gwtCompile if validation-api 1.1.0.Final is used
        vavr                           : "io.vavr:vavr:0.9.0",
        ws_rs_api                      : "javax.ws.rs:javax.ws.rs-api:2.1",
        xml_apis                       : "xml-apis:xml-apis:1.0.b2",
        zookeeper                      : "org.apache.zookeeper:zookeeper:$versions.zookeeper",
        zzDUMMYzz                      : "makes sorting this array easier"
]

def contentPackDownloadDir = "${project.buildDir}/contentPackDownload"
ext.contentPackDownloadDir = contentPackDownloadDir
def contentPackImportDir = "${System.properties['user.home']}/.stroom/contentPackImport/"
ext.contentPackImportDir = contentPackImportDir
def contentReleasesUrl = "http://github.com/gchq/stroom-content/releases/download/"
def visualisationsContentPackVer = "v3.1.0"
def visualisationsContentPackUrl = "http://github.com/gchq/stroom-visualisations-dev/releases/download/${visualisationsContentPackVer}/visualisations-production-${visualisationsContentPackVer}.zip"

//A set of content packs to download in the task downloadStroomContent
ext.contentPacks = [
    'core-xml-schemas': 'v2.0',
    'event-logging-xml-schema': 'v3.2.3',
    'internal-dashboards': 'v1.1',
    'internal-statistics-sql': 'v2.1',
    'internal-statistics-stroom-stats': 'v2.1',
    'standard-pipelines': 'v0.1',
    'stroom-101': 'v1.0',
    'stroom-logs': 'v2.0-alpha.5',
    'template-pipelines': 'v0.2'
]

//defines a list of gradle projects that we will publish with maven/bintray
def projectsToBePublished = subprojects.findAll { project ->
    project.path in [
        ':stroom-util',
        ':stroom-util-shared',
        'zzDUMMYzz to ease sorting'
    ]
}

//list to hold details of any failed test classes
def failedTestReportFiles = []

//Configuration applicable to all projects
allprojects {
    // Make doclint be quiet - we don't care about JavaDoc warnings.
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addBooleanOption('html5', true)
    }
}

// Variable to capture the version of slf4j defined in the DW BOM, so
// we can use it to set the version of slf4j when we do a dependency
// substitution with log4j
def dropwizardBomSlf4jVersion = null

//Configuration applicable to all sub projects
subprojects {
    //println "Configuring subproject ${project.path}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'ca.cutterslade.analyze'
//    apply plugin: 'java-library'
//    apply plugin: 'nebula.lint'
//
//    gradleLint {
//        rules +=  'unused-dependency'
////        rules +=  'all-dependency'
//    }

    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10

    // Make all projects use these BOMs to constrain dependency versions
    dependencies {
        implementation platform(libs.dropwizard_bom)
        implementation platform(libs.jersey_bom)
    }

    //println project.getConfigurations().getByName("implementation").getAllDependencies()

    configurations {

        // ensure deps don't bring any logging implementations with them as this will
        // conflict with logback. Also replace any log4j deps with log4j-over-slf4j
        // so dependency jars work with slf4j
        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"
            exclude group: "commons-logging", module: "commons-logging"
            exclude module: 'xercesImpl'

            resolutionStrategy {
                // A very hacky way of finding out what version of slf4j is in the dropwizard BOM
                // TODO make it less hacky
                if (dropwizardBomSlf4jVersion == null) {
                    eachDependency { DependencyResolveDetails details ->
                        if (dropwizardBomSlf4jVersion == null) {
                            if (details.requested.group == 'org.slf4j' && details.requested.name == "log4j-over-slf4j") {
                            //if (details.requested.group == 'org.slf4j') {
                                dropwizardBomSlf4jVersion = details.getTarget().getVersion()
                                println "Slf4j version = $dropwizardBomSlf4jVersion ${details.requested}"
                            }
                        }
                    }
                }

                dependencySubstitution {
                    //println "Slf4j version = $dropwizardBomSlf4jVersion"
                    substitute module('log4j:log4j') with module("org.slf4j:log4j-over-slf4j:$dropwizardBomSlf4jVersion")
                }

                // Stop stroom libs from dragging in a different version of dropwizard
                // Currently commented out in the hope the dropwiz BOM will solve things
                //eachDependency { DependencyResolveDetails details ->
                    //if (details.requested.group == 'io.dropwizard') {
                        //details.useVersion versions.dropwizard
                    //}
                    //if (details.requested.group == 'io.dropwizard.metrics') {
                        //details.useVersion versions.dropwizard_metrics
                    //}
                //}

                forcedModules = [
                    // This is how to force a dep to a specfic version

                    // Curator will drag in a more recent version of zk but will support older versions so
                    // substitute it here. See NOTE in versions block above.
                    libs.zookeeper
                ]
            }
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/stroom/event-logging" }
        maven { url "https://dl.bintray.com/stroom/stroom" }
    }

    test {
        useJUnitPlatform()

        reports.html.destination = file("${reporting.baseDir}/${name}")

        afterSuite { descriptor, result ->
            //println "Executed suite ${descriptor.name} ${descriptor.className} with result: ${result.resultType}"

            if (descriptor != null
                    && descriptor.className != null
                    && result.resultType.toString() == "FAILURE") {

                //test class failed so add its project info and test report file to a global list for
                //processing at the end of the build
                def reportFileName = "${reports.junitXml.destination}/TEST-${descriptor.className}.xml"
                def reportFile = file(reportFileName)
                def pair = new Tuple2("${project.name} ${descriptor.name}", reportFile)
                failedTestReportFiles.add(pair)
            }
        }

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

    clean {
        // clear out the 'out' dirs used by intelliJ
        delete "out"
    }

    task allDeps(type: DependencyReportTask) {}

//    // These lines pull the integration test task into our build process.
//    tasks.check.dependsOn integrationTest
//    tasks.integrationTest.mustRunAfter test

//    afterEvaluate {
//        repositories {
//            jcenter()
//        }
//
//        compileJava {
//            inputs.property("moduleName", moduleName)
//            doFirst {
//                options.compilerArgs = [
//                        '--module-path', classpath.asPath,
//                ]
//                classpath = files()
//            }
//        }
//
//        compileTestJava {
//            inputs.property("moduleName", moduleName)
//            doFirst {
//                options.compilerArgs = [
//                        '--module-path', classpath.asPath,
////                        '--add-modules', 'junit',
////                        '--add-reads', "$moduleName=junit",
//                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
//                ]
//                classpath = files()
//            }
//        }
//
//        test {
//            inputs.property("moduleName", moduleName)
//            doFirst {
//                jvmArgs = [
//                        '--module-path', classpath.asPath,
//                        '--add-modules', 'ALL-MODULE-PATH',
////                        '--add-reads', "$moduleName=junit",
//                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
//                ]
//                classpath = files()
//            }
//        }
//
//        javadoc {
//            options.addStringOption('-module-path', classpath.asPath)
//            options.addStringOption('Xdoclint:all,-missing', '-html5')
//        }
//
//        jar {
//            inputs.property("moduleName", moduleName)
//            manifest {
//                attributes(
//                        "Automatic-Module-Name": moduleName,
//                )
//            }
//            version versions.stroomQuery
//        }
//    }
//

    //task analyzeJavaLibraryDependencies(type: ca.cutterslade.gradle.analyze.AnalyzeDependenciesTask) {
//    classesDirs = sourceSets.main.output.classesDirs
//    require = [
//            project.configurations.runtimeClasspath
//    ]
//    allowedToDeclare = [
//            project.configurations.permitUnusedDeclared
//    ]
//    justWarn = true
//}
//task analyzeJavaLibraryTestDependencies(type: ca.cutterslade.gradle.analyze.AnalyzeDependenciesTask) {
//    classesDirs = sourceSets.test.output.classesDirs
//    require = [
//            project.configurations.testRuntimeClasspath
//    ]
//    allowedToDeclare = [
//            project.configurations.permitTestUnusedDeclared
//    ]
//    allowedToUse = [
//            project.configurations.runtimeClasspath
//    ]
//    justWarn = true
//}
//tasks.build.dependsOn analyzeJavaLibraryDependencies
//tasks.build.dependsOn analyzeJavaLibraryTestDependencies
//    
    analyzeClassesDependencies {
        justWarn = true
    }

    analyzeTestClassesDependencies {
        justWarn = true
    }



}

//configures only those projects in publishedProjectsPaths
configure(projectsToBePublished) {

    println "Configuring ${project.path} for publishing"

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group = 'stroom'
    version = versions.stroom

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        scm {
            url "https://github.com/stroom/stroom"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project.name)
                    root.children().last() + pomConfig
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    //configuration for the bintray plugin for uploading maven artefacts to bintray
    //see https://github.com/bintray/gradle-bintray-plugin
    //run task bintrayUpload to push the files, assuming BINTRAY_USER/KEY are set as env vars
    bintray {
        //Must never write these to log or system out
        user = System.getenv('BINTRAY_USER') //set in Travis UI
        key = System.getenv('BINTRAY_KEY') //set in Travis UI

        //The maven plugin publications to push to bintray
        publications = ['mavenJava']

        //immediately make the artefacts public
        publish = true

        pkg {
            repo = 'stroom'
            name = 'stroom'
            userOrg = 'stroom'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/gchq/stroom.git'
            version {
                name = "${versions.stroom}"
                desc = "stroom-${versions.stroom}"
                released = new Date()
                vcsTag = "${versions.stroom}"
                gpg {
                    //Bintray will self-sign the files
                    sign = true //Determines whether to GPG sign the files. The default is false
                }
            }
        }
    }
}

////configuration specific to projects that expose their test jars for other projects to use
//configure(projectsWithSharedTestJars) {
//
//    println "Configuring ${project.path} to expose its test jars"
//
//    configurations {
//        testArtifacts
//    }
//
//    task testJar(type: Jar) {
//        baseName = "${project.name}-test"
//        from sourceSets.test.output
//    }
//
//    artifacts {
//        testArtifacts testJar
//    }
//
//    task packageTests(type: Jar) {
//        from sourceSets.test.output
//        classifier = 'tests'
//    }
//
//    artifacts.archives packageTests
//}

task clearContentPackImportDir(type: Delete) {
    //ensure the import directory exists
    new File(contentPackImportDir).mkdirs()

    //cleans out any zip files in the contentPackImportDir
    delete fileTree(new File(contentPackImportDir)) {
        include '**/*.zip'
    }
}

task clearContentPackDownloadDir(type: Delete) {
    //ensure the import directory exists
    new File(contentPackDownloadDir).mkdirs()

    //cleans out any zip files in the contentPackImportDir
    delete fileTree(new File(contentPackDownloadDir)) {
        include '**/*.zip'
    }
}

task downloadStroomContent() {

    dependsOn clearContentPackDownloadDir

    doLast {
        //download each content pack to the contentPackImportDir ready for stroom to import on startup
        for (pack in contentPacks) {
            def packName = pack.key
            def packVer = pack.value
            def packUrl = "${contentReleasesUrl}${packName}-${packVer}/${packName}-${packVer}.zip"
            download {
                src packUrl
                dest new File(contentPackDownloadDir)
                overwrite true
            }
        }
        //now get the visualisations pack from a different repo
        download {
            src visualisationsContentPackUrl
            dest new File(contentPackDownloadDir)
            overwrite true
        }
    }
}

task copyContentPacksToImportDir(type: Copy) {
    dependsOn clearContentPackImportDir
    dependsOn downloadStroomContent

    println "Configuring copy from ${contentPackDownloadDir} to ${contentPackImportDir}"

    from "${contentPackDownloadDir}"
    into stroomContentImportDir
}

task setupSampleData() {
    dependsOn copyContentPacksToImportDir
    dependsOn ':stroom-app:setupSampleDataApplication'
}

gradle.buildFinished {
    //if any of the tests failed dump the junit xml to the console
    if (getPropertyOrDefault('dumpFailedTestXml', 'false') == 'true' && failedTestReportFiles.size > 0) {
        println "Build has ${failedTestReportFiles.size} failed test classes, dumping JUnit xml output"
        failedTestReportFiles.each { pair ->
            def info = pair.first
            def reportFile = pair.second

            if (reportFile.exists()) {
                println "-----Failed test class ${info} ------------------"
                def lines = reportFile.readLines()
                lines.each { String line ->
                    println "${line}"
                }
                println "-----End of test class ${info} ------------------"
            } else {
                println "File ${reportFile.toString()}"
            }
        }
    }
}

task dependenciesPng() {
    def reportsDir = new File("build/reports")
    def compileDepsDot = file("$reportsDir/compileDeps.dot")
    inputs.files subprojects.configurations.compile
    outputs.files compileDepsDot
    doFirst {
        if(!reportsDir.exists()) reportsDir.mkdirs()
    }
    doLast {
        def dotGraph = "digraph compile{" + System.getProperty("line.separator")
        Set deps = [] as Set
        subprojects.each {subproject ->
            subproject.configurations.compile.dependencies.each {dependency ->
                if(dependency instanceof ProjectDependency) {
                    String dep = "\"$subproject.name\" -> \"$dependency.name\";"
                    if (deps.add(dep)){ // if was not there before - avoid duplicates
                        dotGraph += dep + System.getProperty("line.separator")
                    }
                }
            }
        }
        dotGraph += "}"
        compileDepsDot.write(dotGraph)
    }
}

