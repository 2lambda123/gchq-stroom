/*
 * This file is generated by jOOQ.
*/
package stroom.data.store.impl.fs.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.data.store.impl.fs.db.stroom.Indexes;
import stroom.data.store.impl.fs.db.stroom.Keys;
import stroom.data.store.impl.fs.db.stroom.Stroom;
import stroom.data.store.impl.fs.db.stroom.tables.records.DataVolumeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataVolume extends TableImpl<DataVolumeRecord> {

    private static final long serialVersionUID = 1387403690;

    /**
     * The reference instance of <code>stroom.data_volume</code>
     */
    public static final DataVolume DATA_VOLUME = new DataVolume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataVolumeRecord> getRecordType() {
        return DataVolumeRecord.class;
    }

    /**
     * The column <code>stroom.data_volume.data_id</code>.
     */
    public final TableField<DataVolumeRecord, Long> DATA_ID = createField("data_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.data_volume.volume_id</code>.
     */
    public final TableField<DataVolumeRecord, Integer> VOLUME_ID = createField("volume_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.data_volume</code> table reference
     */
    public DataVolume() {
        this(DSL.name("data_volume"), null);
    }

    /**
     * Create an aliased <code>stroom.data_volume</code> table reference
     */
    public DataVolume(String alias) {
        this(DSL.name(alias), DATA_VOLUME);
    }

    /**
     * Create an aliased <code>stroom.data_volume</code> table reference
     */
    public DataVolume(Name alias) {
        this(alias, DATA_VOLUME);
    }

    private DataVolume(Name alias, Table<DataVolumeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataVolume(Name alias, Table<DataVolumeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_VOLUME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataVolumeRecord> getPrimaryKey() {
        return Keys.KEY_DATA_VOLUME_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataVolumeRecord>> getKeys() {
        return Arrays.<UniqueKey<DataVolumeRecord>>asList(Keys.KEY_DATA_VOLUME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataVolume as(String alias) {
        return new DataVolume(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataVolume as(Name alias) {
        return new DataVolume(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataVolume rename(String name) {
        return new DataVolume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataVolume rename(Name name) {
        return new DataVolume(name, null);
    }
}
