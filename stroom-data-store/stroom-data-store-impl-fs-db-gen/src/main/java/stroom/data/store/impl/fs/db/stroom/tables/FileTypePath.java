/*
 * This file is generated by jOOQ.
*/
package stroom.data.store.impl.fs.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.data.store.impl.fs.db.stroom.Indexes;
import stroom.data.store.impl.fs.db.stroom.Keys;
import stroom.data.store.impl.fs.db.stroom.Stroom;
import stroom.data.store.impl.fs.db.stroom.tables.records.FileTypePathRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileTypePath extends TableImpl<FileTypePathRecord> {

    private static final long serialVersionUID = -876079192;

    /**
     * The reference instance of <code>stroom.file_type_path</code>
     */
    public static final FileTypePath FILE_TYPE_PATH = new FileTypePath();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileTypePathRecord> getRecordType() {
        return FileTypePathRecord.class;
    }

    /**
     * The column <code>stroom.file_type_path.id</code>.
     */
    public final TableField<FileTypePathRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.file_type_path.name</code>.
     */
    public final TableField<FileTypePathRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.file_type_path.path</code>.
     */
    public final TableField<FileTypePathRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.file_type_path</code> table reference
     */
    public FileTypePath() {
        this(DSL.name("file_type_path"), null);
    }

    /**
     * Create an aliased <code>stroom.file_type_path</code> table reference
     */
    public FileTypePath(String alias) {
        this(DSL.name(alias), FILE_TYPE_PATH);
    }

    /**
     * Create an aliased <code>stroom.file_type_path</code> table reference
     */
    public FileTypePath(Name alias) {
        this(alias, FILE_TYPE_PATH);
    }

    private FileTypePath(Name alias, Table<FileTypePathRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileTypePath(Name alias, Table<FileTypePathRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FILE_TYPE_PATH_NAME, Indexes.FILE_TYPE_PATH_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FileTypePathRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FILE_TYPE_PATH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FileTypePathRecord> getPrimaryKey() {
        return Keys.KEY_FILE_TYPE_PATH_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FileTypePathRecord>> getKeys() {
        return Arrays.<UniqueKey<FileTypePathRecord>>asList(Keys.KEY_FILE_TYPE_PATH_PRIMARY, Keys.KEY_FILE_TYPE_PATH_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileTypePath as(String alias) {
        return new FileTypePath(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileTypePath as(Name alias) {
        return new FileTypePath(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileTypePath rename(String name) {
        return new FileTypePath(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileTypePath rename(Name name) {
        return new FileTypePath(name, null);
    }
}
