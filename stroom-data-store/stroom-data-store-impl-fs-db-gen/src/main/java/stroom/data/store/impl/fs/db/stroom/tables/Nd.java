/*
 * This file is generated by jOOQ.
*/
package stroom.data.store.impl.fs.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.data.store.impl.fs.db.stroom.Indexes;
import stroom.data.store.impl.fs.db.stroom.Keys;
import stroom.data.store.impl.fs.db.stroom.Stroom;
import stroom.data.store.impl.fs.db.stroom.tables.records.NdRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nd extends TableImpl<NdRecord> {

    private static final long serialVersionUID = -115118187;

    /**
     * The reference instance of <code>stroom.ND</code>
     */
    public static final Nd ND = new Nd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NdRecord> getRecordType() {
        return NdRecord.class;
    }

    /**
     * The column <code>stroom.ND.ID</code>.
     */
    public final TableField<NdRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.ND.VER</code>.
     */
    public final TableField<NdRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.ND.CRT_USER</code>.
     */
    public final TableField<NdRecord, String> CRT_USER = createField("CRT_USER", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.ND.UPD_USER</code>.
     */
    public final TableField<NdRecord, String> UPD_USER = createField("UPD_USER", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.ND.CLSTR_URL</code>.
     */
    public final TableField<NdRecord, String> CLSTR_URL = createField("CLSTR_URL", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.ND.NAME</code>.
     */
    public final TableField<NdRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.ND.PRIOR</code>.
     */
    public final TableField<NdRecord, Short> PRIOR = createField("PRIOR", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>stroom.ND.ENBL</code>.
     */
    public final TableField<NdRecord, Boolean> ENBL = createField("ENBL", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>stroom.ND.FK_RK_ID</code>.
     */
    public final TableField<NdRecord, Integer> FK_RK_ID = createField("FK_RK_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.ND.CRT_MS</code>.
     */
    public final TableField<NdRecord, Long> CRT_MS = createField("CRT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.ND.UPD_MS</code>.
     */
    public final TableField<NdRecord, Long> UPD_MS = createField("UPD_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>stroom.ND</code> table reference
     */
    public Nd() {
        this(DSL.name("ND"), null);
    }

    /**
     * Create an aliased <code>stroom.ND</code> table reference
     */
    public Nd(String alias) {
        this(DSL.name(alias), ND);
    }

    /**
     * Create an aliased <code>stroom.ND</code> table reference
     */
    public Nd(Name alias) {
        this(alias, ND);
    }

    private Nd(Name alias, Table<NdRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nd(Name alias, Table<NdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ND_NAME, Indexes.ND_ND_FK_RK_ID, Indexes.ND_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NdRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NdRecord> getPrimaryKey() {
        return Keys.KEY_ND_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NdRecord>> getKeys() {
        return Arrays.<UniqueKey<NdRecord>>asList(Keys.KEY_ND_PRIMARY, Keys.KEY_ND_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NdRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NdRecord, ?>>asList(Keys.ND_FK_RK_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nd as(String alias) {
        return new Nd(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nd as(Name alias) {
        return new Nd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nd rename(String name) {
        return new Nd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nd rename(Name name) {
        return new Nd(name, null);
    }
}
