/*
 * This file is generated by jOOQ.
*/
package stroom.properties.impl.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.properties.impl.db.stroom.Indexes;
import stroom.properties.impl.db.stroom.Keys;
import stroom.properties.impl.db.stroom.Stroom;
import stroom.properties.impl.db.stroom.tables.records.PropertyHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PropertyHistory extends TableImpl<PropertyHistoryRecord> {

    private static final long serialVersionUID = 1654050788;

    /**
     * The reference instance of <code>stroom.property_history</code>
     */
    public static final PropertyHistory PROPERTY_HISTORY = new PropertyHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyHistoryRecord> getRecordType() {
        return PropertyHistoryRecord.class;
    }

    /**
     * The column <code>stroom.property_history.id</code>.
     */
    public final TableField<PropertyHistoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.property_history.update_time</code>.
     */
    public final TableField<PropertyHistoryRecord, Long> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.property_history.update_user</code>.
     */
    public final TableField<PropertyHistoryRecord, String> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.property_history.name</code>.
     */
    public final TableField<PropertyHistoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.property_history.val</code>.
     */
    public final TableField<PropertyHistoryRecord, String> VAL = createField("val", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>stroom.property_history</code> table reference
     */
    public PropertyHistory() {
        this(DSL.name("property_history"), null);
    }

    /**
     * Create an aliased <code>stroom.property_history</code> table reference
     */
    public PropertyHistory(String alias) {
        this(DSL.name(alias), PROPERTY_HISTORY);
    }

    /**
     * Create an aliased <code>stroom.property_history</code> table reference
     */
    public PropertyHistory(Name alias) {
        this(alias, PROPERTY_HISTORY);
    }

    private PropertyHistory(Name alias, Table<PropertyHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private PropertyHistory(Name alias, Table<PropertyHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROPERTY_HISTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PropertyHistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROPERTY_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PropertyHistoryRecord> getPrimaryKey() {
        return Keys.KEY_PROPERTY_HISTORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PropertyHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<PropertyHistoryRecord>>asList(Keys.KEY_PROPERTY_HISTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PropertyHistory as(String alias) {
        return new PropertyHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PropertyHistory as(Name alias) {
        return new PropertyHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyHistory rename(String name) {
        return new PropertyHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyHistory rename(Name name) {
        return new PropertyHistory(name, null);
    }
}
