plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'application'
apply plugin: 'java'
mainClassName = 'stroom.startup.App'

jar {
    manifest {
        attributes(
                "Implementation-Title": "Stroom",
                "Implementation-Version": versions.stroom,
                "Main-Class" : "stroom.startup.App"
        )
    }
    archiveName 'stroom-app.jar'
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    // A transformer to merge spring's generated config files, e.g. spring.handlers and spring.schemas
    transform(ServiceFileTransformer) {
        include 'META-INF/spring.*'
    }
    archiveName 'stroom-app-all.jar'
}


dependencies {
    compile project(':stroom-module')

    compile project(':stroom-core-module')
    permitUnusedDeclared project(':stroom-core-module') // This is a runtime dependency but included as compile time to ensure packaging.

    compile urlDependencies.get(urlLibs.stroomQueryApi)
    compile urlDependencies.get(urlLibs.stroomQueryCommon)

    compile (libs.dropwizard_assets) {
        exclude ( group: "org.glassfish.web", module: "javax.el" )
    }
    compile (libs.dropwizard_core) {
        exclude ( group: "org.glassfish.web", module: "javax.el" )
    }
    compile libs.dropwizard_jersey
    compile libs.dropwizard_jetty
    compile libs.dropwizard_metrics_healthchecks
    compile libs.dropwizard_servlets
    compile libs.javax_servlet_api
    compile libs.jetty_server
    compile libs.jetty_servlets
    compile libs.logback_classic
    compile libs.slf4j_api

    runtime libs.shiro_web
    runtime libs.javax_el
    runtime libs.javax_el_api
}

run {
    //Ensure we have the latest kafka plugin jar available for runtime
    dependsOn ':stroom-kafka-client-impl_0_10_0_1:copyPluginJar'
    args 'server', './dev.yml'
}

runShadow {
    //Ensure we have the latest kafka plugin jar available for runtime
    dependsOn ':stroom-kafka-client-impl_0_10_0_1:copyPluginJar'
    args 'server', './dev.yml'
}

//The gwtCompile tasks create files in stroom-app/src/main/resources/ui
//so those tasks MUST be run before processResource else this jar and 
//the fat jar will be missing all the GWT generated files and the UI will fail to start
processResources.mustRunAfter(':stroom-app-gwt:gwtCompile')
processResources.mustRunAfter(':stroom-dashboard-gwt:gwtCompile')
processResources.mustRunAfter(':stroom-core-module:generateSwaggerDocumentation')

tasks.build.dependsOn shadowJar
