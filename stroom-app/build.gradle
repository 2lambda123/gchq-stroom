buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath libs.mysql_connector_java
        classpath 'org.reflections:reflections:0.9.12'
    }
}

plugins {
    id "com.benjaminsproule.swagger" version "1.0.8"
    //id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.1"
}
import org.reflections.*
import org.reflections.util.*
import org.reflections.scanners.*

ext.moduleName = 'stroom.app'

def uiDir = project.file('src/main/resources/ui')
def swaggerDir = "${uiDir}/noauth/swagger"
def restResourceClassNames = []
def jarName = 'stroom-app.jar'
def fatJarName = 'stroom-app-all.jar'
def sendToStroomScriptVersion = 'send-to-stroom-v2.0'
def releaseBuildDir = 'build/release'
def configDefaultsFile = releaseBuildDir + '/config/config-defaults.yml'
def configSchemaFile = releaseBuildDir + '/config/config-schema.yml'

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = 'stroom.app.App'

dependencies {
    compile project(':stroom-activity:stroom-activity-impl-db')
    compile project(':stroom-annotation:stroom-annotation-impl-db')
    compile project(':stroom-annotation:stroom-annotation-pipeline')
    compile project(':stroom-authentication:stroom-authentication-impl')
    compile project(':stroom-authentication:stroom-authentication-impl-db')
    compile project(':stroom-cache:stroom-cache-impl')
    compile project(':stroom-cluster:stroom-cluster-impl')
    compile project(':stroom-cluster:stroom-cluster-lock-impl-db')
    compile project(':stroom-cluster:stroom-cluster-task-impl')
    compile project(':stroom-config:stroom-config-app')
    compile project(':stroom-config:stroom-config-global-impl')
    compile project(':stroom-config:stroom-config-global-impl-db')
    compile project(':stroom-core')
    compile project(':stroom-core-shared')
    compile project(':stroom-dashboard:stroom-dashboard-impl')
    compile project(':stroom-dashboard:stroom-storedquery-impl-db')
    compile project(':stroom-data:stroom-data-retention-impl')
    compile project(':stroom-data:stroom-data-store-impl')
    compile project(':stroom-data:stroom-data-store-impl-fs')
    compile project(':stroom-data:stroom-data-store-impl-fs-db')
    compile project(':stroom-data:stroom-data-zip')
    compile project(':stroom-db-util')
    compile project(':stroom-dictionary:stroom-dictionary-impl')
    compile project(':stroom-dictionary:stroom-dictionary-mock')
    compile project(':stroom-docstore:stroom-docstore-impl')
    compile project(':stroom-docstore:stroom-docstore-impl-db')
    compile project(':stroom-dropwizard-common')
    compile project(':stroom-elastic:stroom-elastic-impl')
    compile project(':stroom-elastic:stroom-elastic-impl-http')
    compile project(':stroom-event-logging:stroom-event-logging-impl')
    compile project(':stroom-explorer:stroom-explorer-impl')
    compile project(':stroom-feed:stroom-feed-impl')
    compile project(':stroom-importexport:stroom-importexport-impl')
    compile project(':stroom-index:stroom-index-impl')
    compile project(':stroom-index:stroom-index-impl-db')
    compile project(':stroom-job:stroom-job-impl')
    compile project(':stroom-job:stroom-job-impl-db')
    compile project(':stroom-kafka:stroom-kafka')
    compile project(':stroom-lifecycle:stroom-lifecycle-impl')
    compile project(':stroom-meta:stroom-meta-impl-db')
    compile project(':stroom-meta:stroom-meta-statistics-impl')
    compile project(':stroom-node:stroom-node-impl-db')
    compile project(':stroom-pipeline')
    compile project(':stroom-processor:stroom-processor-impl-db')
    compile project(':stroom-proxy:stroom-proxy-repo')
    compile project(':stroom-receive:stroom-receive-common')
    compile project(':stroom-receive:stroom-receive-rules-impl')
    compile project(':stroom-resource:stroom-resource-impl')
    compile project(':stroom-search:stroom-search-extraction')
    compile project(':stroom-search:stroom-search-solr')
    compile project(':stroom-search:stroom-searchable-impl')
    compile project(':stroom-security:stroom-security-impl-db')
    compile project(':stroom-servicediscovery:stroom-servicediscovery-impl')
    compile project(':stroom-statistics:stroom-statistics-impl')
    compile project(':stroom-statistics:stroom-statistics-impl-hbase')
    compile project(':stroom-statistics:stroom-statistics-impl-sql')
    compile project(':stroom-task:stroom-task-impl')
    compile project(':stroom-util')
    compile project(':stroom-util-shared')

    compile libs.dropwizard_client
    compile(libs.dropwizard_assets) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile(libs.dropwizard_core) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile libs.dropwizard_configuration
    compile libs.dropwizard_jersey
    compile libs.dropwizard_jetty
    compile libs.dropwizard_lifecycle
    compile libs.dropwizard_metrics_annotation
    compile libs.dropwizard_metrics_core
    compile libs.dropwizard_metrics_healthchecks
    compile libs.dropwizard_servlets
    compile libs.dropwizard_validation
    compile libs.flyway_core
    compile libs.guava
    compile libs.guice4
    compile libs.javax_inject
    compile libs.javax_servlet_api
    compile libs.jaxb_api
    compile libs.jcommander
    compile libs.jersey_common
    compile libs.jetty_server
    compile libs.jetty_servlet
    compile libs.jetty_servlets
    compile libs.logback_classic
    compile libs.slf4j_api
    compile libs.stroomDocRef
    compile libs.validation_api
    compile libs.ws_rs_api

    runtimeOnly libs.javax_el
    runtimeOnly libs.javax_el_api

    testCompile project(':stroom-app')
    // Use default DB config.

    testCompile project(':stroom-activity:stroom-activity-api')
    testCompile project(':stroom-activity:stroom-activity-mock')
    testCompile project(':stroom-authentication:stroom-authentication-impl')
    testCompile project(':stroom-config:stroom-config-app')
    testCompile project(':stroom-config:stroom-config-global-impl')
    testCompile project(':stroom-core')
    testCompile project(':stroom-core-shared')
    testCompile project(':stroom-dashboard:stroom-dashboard-impl')
    testCompile project(':stroom-data:stroom-data-store-api')
    testCompile project(':stroom-data:stroom-data-store-impl-fs')
    testCompile project(':stroom-data:stroom-data-store-mock')
    testCompile project(':stroom-docstore:stroom-docstore-api')
    testCompile project(':stroom-docstore:stroom-docstore-impl')
    testCompile project(':stroom-docstore:stroom-docstore-impl-memory')
    testCompile project(':stroom-elastic:stroom-elastic-impl')
    testCompile project(':stroom-event-logging:stroom-event-logging-api')
    testCompile project(':stroom-event-logging:stroom-event-logging-impl')
    testCompile project(':stroom-explorer:stroom-collection-mock')
    testCompile project(':stroom-explorer:stroom-explorer-api')
    testCompile project(':stroom-explorer:stroom-explorer-impl')
    testCompile project(':stroom-explorer:stroom-explorer-impl-db')
    testCompile project(':stroom-headless')
    testCompile project(':stroom-importexport:stroom-importexport-api')
    testCompile project(':stroom-index:stroom-index-impl')
    testCompile project(':stroom-index:stroom-index-mock')
    testCompile project(':stroom-meta:stroom-meta-api')
    testCompile project(':stroom-meta:stroom-meta-mock')
    testCompile project(':stroom-node:stroom-node-mock')
    testCompile project(':stroom-pipeline')
    testCompile project(':stroom-processor:stroom-processor-mock')
    testCompile project(':stroom-receive:stroom-receive-rules-impl')
    testCompile project(':stroom-security:stroom-security-api')
    testCompile project(':stroom-security:stroom-security-impl')
    testCompile project(':stroom-security:stroom-security-mock')
    testCompile project(':stroom-statistics:stroom-statistics-api')
    testCompile project(':stroom-statistics:stroom-statistics-impl')
    testCompile project(':stroom-statistics:stroom-statistics-impl-hbase')
    testCompile project(':stroom-statistics:stroom-statistics-impl-sql')
    testCompile project(':stroom-statistics:stroom-statistics-mock')
    testCompile project(':stroom-task:stroom-task-api')
    testCompile project(':stroom-test-common')
    testCompile project(':stroom-util')
    testCompile project(':stroom-util-shared')

    testCompile libs.commons_io
    testCompile libs.classgraph
    testCompile libs.guice4
    testCompile libs.guice_extension
    testCompile libs.hikari
    testCompile libs.junit_jupiter_api
    testCompile libs.lmdbjava
    testCompile libs.lucene_core
    testCompile libs.saxon_he
    testCompile libs.slf4j_api
    testCompile libs.stroomQueryCommon
    testCompile libs.vavr

    testRuntimeOnly libs.javax_activation
    testRuntimeOnly libs.javax_el
    testRuntimeOnly libs.jaxb_runtime
    testRuntimeOnly libs.junit_jupiter_engine

    // The following logging libs are needed when running junits outside dropwizard
    testRuntimeOnly libs.jcl_over_slf4j
    testRuntimeOnly libs.jul_to_slf4j
    testRuntimeOnly libs.log4j_over_slf4j
    testRuntimeOnly libs.logback_classic
    testRuntimeOnly libs.logback_core

    testCompile libs.assertj_core
    testCompile libs.dropwizard_client
    testCompile libs.dropwizard_testing
    testCompile libs.mockito_core
    testCompile libs.mockito_junit_jupiter
}

jar {
    //we need to first generate the swagger spec files so they can be added in to the jar
//    mustRunAfter generateSwaggerDocumentation
    manifest {
        attributes(
                "Implementation-Title": "Stroom",
                "Implementation-Version": versions.stroom,
                "Main-Class": "stroom.app.App"
        )
    }
    archiveName jarName
    exclude '**/gwt-unitCache'
}

shadowJar {
    // We want to run the tests before we build the fat jar.
    dependsOn test
    // We want to compile all GWT content before we build the fat jar.
    dependsOn ':stroom-app-gwt:gwtCompile'
    dependsOn ':stroom-dashboard-gwt:gwtCompile'

    // Allows us to build fat jars with lots of files
    zip64 true

    // Ensure we include the GWT generated resources.
    from './src/main/resources'

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    archiveName fatJarName
    exclude '**/gwt-unitCache'
}
// Make sure GWT compilation doesn't run before tests.
tasks.getByPath(':stroom-app-gwt:gwtCompile').mustRunAfter test
tasks.getByPath(':stroom-dashboard-gwt:gwtCompile').mustRunAfter test

run {
    //Ensure we have the latest kafka plugin jar available for runtime
    args 'server', '../local.yml'
}

runShadow {
    //Ensure we have the latest kafka plugin jar available for runtime
    args 'server', '../local.yml'
}

// Run the DB migrations then exit
task migrate(type: JavaExec) {
    dependsOn ':stroom-config:stroom-config-app:compileJava'

    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args 'migrate', '../local.yml'
}

def stroomDockerBuildDir = "${projectDir}/docker/build"

clean {
    delete stroomDockerBuildDir
}


// Copy all the files needed by the stroom docker build into stroom-app/docker/build
task copyFilesForStroomDockerBuild() {
    dependsOn shadowJar
    dependsOn parent.downloadStroomContent

    doFirst {
        new File(stroomPluginsDir).mkdirs()
        def stroomDockerContentPacksDir = "${stroomDockerBuildDir}/contentPacks"
        def stroomDockerPluginsDir = "${stroomDockerBuildDir}/plugins"
        new File(stroomPluginsDir).mkdirs()

        // Copy the stroom app fat jar
        copy {
            from "${project.buildDir}/libs/${fatJarName}"
            into stroomDockerBuildDir
        }

        // Copy the dropwizard yml configuration
        copy {
            from "${projectDir}/prod.yml"
            into stroomDockerBuildDir
        }

        //Copy the downloaded content packs
        copy {
            from "${contentPackDownloadDir}"
            into stroomDockerContentPacksDir
        }
    }
}

// Generate the swagger spec files from the resource classes
swagger {
    apiSource {
        springmvc = false
        outputFormats = ['json', 'yaml']
        // See prepareSwaggerClasses task
        locations = restResourceClassNames
        schemes = ['http', 'https']
        basePath = '/api'
        info {
            title = 'Stroom API'
            version = 'v1/v2'
            description = 'Various APIs for interacting with Stroom and its data'
            contact {
                name = 'Stroom'
                url = 'https://github.com/gchq/stroom'
            }
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        securityDefinition {
            // `name` can be used refer to this security schemes from elsewhere
            name = 'ApiKeyAuth'
            type = 'apiKey'
            // The location of the API key. Valid values are "query" or "header".
            keyLocation = 'header'
            // The name of the header
            keyName = 'Authorization'
        }
        swaggerDirectory = "${swaggerDir}"
    }
}


// A task to fix the classpath for running the swagger plugin and
// to scan the classpath to find all the REST resource classes to pass to
// the plugin to generate documentation for.
task prepareSwaggerClasses {
    doLast {
        // Get all jars from the compile classpath
        def urls = project.configurations.compileClasspath.resolve()
            .collect { 
                it.toURI().toURL() 
            }

        // Add each one to the gradle build script classpath
        // so the swagger plugin can see them all.
        // https://github.com/gigaSproule/swagger-gradle-plugin/issues/158#issuecomment-585823379
        urls.each { 
            buildscript.classLoader.addURL it 
        }

        // Now filter down to just our stroom jars
        def stroomUrls = urls
            .findAll {
                it.toString() =~ /.*stroom[a-z-]+.jar$/
            }
            .sort {
                it.toString()
            }
            .unique();

        // Scan all the stroom pks in the stroom jars
        // Filter should be redundant if we only look in stroom jars
        ConfigurationBuilder configBuilder = new ConfigurationBuilder()
             .filterInputsBy(new FilterBuilder().includePackage("stroom"))
             .setUrls(stroomUrls)
             .setScanners(
                new TypeAnnotationsScanner(), 
                new SubTypesScanner()
             );

        // Find all the @Api classes
        Reflections reflections = new Reflections(configBuilder);
        Set<Class<?>> restClasses = reflections
            .getTypesAnnotatedWith(io.swagger.annotations.Api.class)

        logger.info("Adding API classes to Swagger spec")

        // Add them to a list for swagger to scan over
        restClasses
            .sort { it.name }
            .each {
                restResourceClassNames.add(it.name)
                logger.info it.name
            }
        print "Using swagger directory ${swaggerDir}"
    }
}
generateSwaggerDocumentation.dependsOn prepareSwaggerClasses


task copyJar(type: Copy) {
    from shadowJar.outputs.files
    into "${releaseBuildDir}/bin"
}

task copySupportingFiles(type: Copy) {
    from 'src/dist'
    into releaseBuildDir 

    doLast {
        // This is a sym-link so it seems to go into the zip with +x perms
        // which we don't want
        exec {
            commandLine 'chmod', '644', "${releaseBuildDir}/config/config.yml"
        }
    }
}

import de.undercouch.gradle.tasks.download.Download

task downloadSend(type: Download) {
    src "http://raw.githubusercontent.com/gchq/stroom-clients/${sendToStroomScriptVersion}/bash/send_to_stroom.sh"
    dest "${releaseBuildDir}/bin"
}

task downloadSendArgs(type: Download) {
    src "https://raw.githubusercontent.com/gchq/stroom-clients/${sendToStroomScriptVersion}/bash/send_to_stroom_args.sh"
    dest "${releaseBuildDir}/bin"
}

task makeSendExecutable {
    dependsOn copySupportingFiles
    doLast{
        // The args script is sourced so doesn't need execute perms
        exec {
            commandLine 'chmod', '+x', "${releaseBuildDir}/bin/send_to_stroom.sh"
        }
    }
}

task copyContentPackToDistribution(type: Copy) {
    from contentPackDownloadDir
    into "${releaseBuildDir}/contentPacks"
}

// Create an example yaml config file from the compile-time defaults
task generateConfigDefaultsYamlFile(type: JavaExec) {
    dependsOn ':stroom-config:stroom-config-app:compileJava'
    dependsOn ':stroom-config:stroom-config-app:compileTestJava'

    classpath = project(':stroom-config:stroom-config-app').sourceSets.test.runtimeClasspath
    main = 'stroom.config.app.GenerateExpectedYaml'
    args = [configDefaultsFile, configSchemaFile]
}

// Build the release distribution zip for stroom
task buildDistribution(type: Zip) {

    // run all the tasks that produce content for the zip
    dependsOn copyJar
    dependsOn copySupportingFiles
    dependsOn downloadSend
    dependsOn downloadSendArgs
    dependsOn makeSendExecutable
    dependsOn parent.downloadStroomContent
    dependsOn copyContentPackToDistribution
    dependsOn generateConfigDefaultsYamlFile

    from releaseBuildDir
}

// Ensure that the test task for this project runs after all other test tasks as
// this project has all the lengthy int tests so we want it to fail fast
def thisProject = project;
rootProject.subprojects { subProj ->
    //println "subProj ${subProj.name} project ${thisProject.name}"
    if (!subProj.name.equals(thisProject.name)) {
        subProj.tasks.withType(Test) { otherTestTask ->
            //println "subProj ${subProj}, task ${it.name} thisProject.tasks.test ${thisProject.tasks.test}"
            thisProject.tasks.test.mustRunAfter otherTestTask.path
            thisProject.tasks.jar.mustRunAfter otherTestTask.path
            thisProject.tasks.shadowJar.mustRunAfter otherTestTask.path
        }
    }
}

// Ensure all projects have built their jars so swagger can see them
tasks.generateSwaggerDocumentation.dependsOn rootProject.getTasksByName('jar', true)

tasks.build.dependsOn generateSwaggerDocumentation
tasks.build.dependsOn copyFilesForStroomDockerBuild
tasks.build.dependsOn shadowJar
tasks.build.dependsOn buildDistribution

// The gradle application plugin enables the distribution plugin
// which creates .zip/tar archives by default, as does the shadow plugin
// We have our own buildDistribution task so disable the standard ones to avoid confusion
distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

//commented out in case we decide to use this plugin
//honker {
//// Your project license
//license 'Apache 2'

//// Your project information, used to generate NOTICE files
//projectName 'Stroom'
//projectTimespan '2016-2017'
//projectOrganization 'GCHQ'

//// For dependencies that contains no licensing information (pom, manifest etc..)
//// you can define your licensing strategy, for example:
////licenseOverride { candidate ->
////if( candidate.group == 'something' && candidate.module == 'whatever' ) {
////candidate.license = 'BSD 3-Clause'
////}
////}
//}


task setupSampleDataApplication(type: JavaExec) {
    dependsOn this:compileJava
    dependsOn this:compileTestJava
    // We need to set the working directory as the stroom root otherwise
    // setupSampleData won't find 'samples' directories in other modules.
    workingDir '../'
    classpath = sourceSets.test.runtimeClasspath
    main = 'stroom.test.SetupSampleData'
}

////TODO This specific dep is needed to ensure TestKafkaExternalLoader has the jar available
////for its test. This is a TODO as stroom-connectors needs a big refactor once we
////decide what we are doing with plugable client libs and pipeline elements.
//tasks.test.dependsOn ':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:copyPluginJar'

// vim: set tabstop=4 shiftwidth=4 expandtab:
