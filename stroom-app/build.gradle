plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.4'
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Stroom",
                "Implementation-Version": version,
                "Main-Class" : "stroom.startup.App"
        )
    }
    archiveName 'stroom-app.jar'
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    // A transformer to merge spring's generated config files, e.g. spring.handlers and spring.schemas
    transform(ServiceFileTransformer) {
        include 'META-INF/spring.*'
    }
    archiveName 'stroom-app-all.jar'
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'log4j') {
                details.useTarget "org.slf4j:log4j-over-slf4j:1.7.5"
            }
        }
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "log4j", module: "log4j"
    }
}

dependencies {

    compile "ch.qos.logback:logback-classic:1.2.1"
    compile "org.slf4j:log4j-over-slf4j:1.7.22"

    compile project(':stroom-core-server')
    compile project(':stroom-index-server')
    compile project(':stroom-statistics-server')
    compile project(':stroom-dashboard-server')
    compile project(':stroom-security-server')

    compile 'org.glassfish:javax.el:3.0.1-b08'

    compile ("io.dropwizard:dropwizard-core:1.1.0" ) {
        exclude ( group: "org.glassfish.web", module: "javax.el" )
    }
    compile ("io.dropwizard:dropwizard-assets:1.1.0" ) {
        exclude ( group: "org.glassfish.web", module: "javax.el" )
    }

    compile 'org.springframework.security:spring-security-web:4.2.1.RELEASE'
    compile "org.springframework.security:spring-security-web:4.2.1.RELEASE"
    compile "org.springframework.security:spring-security-config:4.1.1.RELEASE"
    compile "org.springframework.security:spring-security-aspects:4.2.1.RELEASE"
    compile "org.springframework:spring-web:4.2.1.RELEASE"

    compile "org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0"

    testCompile 'io.dropwizard:dropwizard-testing:1.0.6'
    testCompile 'io.dropwizard:dropwizard-client:1.0.6'
}

sourceSets {
    // This lets us use different directories for our integration tests.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    // This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// This task lets us run the actual integration tests.
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// TODO: Integration tests currently require manual setup of resources, which means
//       they cannot be included in the build as automated tests.
// These lines pull the integration test task into our build process.
//check.dependsOn integrationTest
//integrationTest.mustRunAfter test

// This means the reports from our integration tests won't over-write the reports from our unit tests.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}