plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.4'
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Stroom",
                "Implementation-Version": version,
                "Main-Class" : "stroom.startup.App"
        )
    }
    archiveName 'stroom-app.jar'
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    // A transformer to merge spring's generated config files, e.g. spring.handlers and spring.schemas
    transform(ServiceFileTransformer) {
        include 'META-INF/spring.*'
    }
    archiveName 'stroom-app-all.jar'
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'log4j') {
                details.useTarget "org.slf4j:log4j-over-slf4j:1.7.5"
            }
        }
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "log4j", module: "log4j"
    }
}

dependencies {
    compile project(':stroom-core-server')
    compile project(':stroom-index-server')
    compile project(':stroom-security-server')
    compile project(':stroom-util')
    compile project(':stroom-entity-shared')
    compile project(':stroom-security-api')
    compile project(':stroom-index-shared')

    compile 'io.dropwizard:dropwizard-core:1.0.6'
    compile 'io.dropwizard:dropwizard-assets:1.0.6'
    compile 'io.dropwizard.metrics:metrics-annotation:3.1.2'
    compile 'io.dropwizard:dropwizard-jersey:1.0.6'
    compile 'io.dropwizard:dropwizard-jetty:1.0.6'
    compile 'io.dropwizard.metrics:metrics-healthchecks:3.1.2'

    compile 'org.springframework:spring-web:4.2.1.RELEASE'
    compile 'org.springframework:spring-beans:4.3.4.RELEASE'
    compile 'org.springframework:spring-context:4.3.4.RELEASE'

    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'com.google.guava:guava:20.0'
    compile 'org.glassfish.jersey.core:jersey-server:2.25'
    compile 'org.apache.shiro:shiro-core:1.3.2'
    compile 'org.eclipse.jetty:jetty-server:9.3.9.v20160517'
    compile 'org.eclipse.jetty:jetty-servlet:9.3.9.v20160517'
}

sourceSets {
    // This lets us use different directories for our integration tests.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    // This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// This task lets us run the actual integration tests.
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// TODO: Integration tests currently require manual setup of resources, which means
//       they cannot be included in the build as automated tests.
// These lines pull the integration test task into our build process.
//check.dependsOn integrationTest
//integrationTest.mustRunAfter test

// This means the reports from our integration tests won't over-write the reports from our unit tests.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}