buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath libs.mysql_connector_java
    }
}

plugins {
    id "com.benjaminsproule.swagger" version "1.0.6"
}

ext.moduleName = 'stroom.app'

def uiDir = project.file('src/main/resources/ui')
def swaggerDir = "${uiDir}/swagger"
def jarName = 'stroom-app.jar'
def fatJarName = 'stroom-app-all.jar'
def sendToStroomScriptVersion = 'send-to-stroom-v2.0'

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = 'stroom.startup.App'

jar {
    //we need to first generate the swagger spec files so they can be added in to the jar
//    mustRunAfter generateSwaggerDocumentation
    manifest {
        attributes(
                "Implementation-Title": "Stroom",
                "Implementation-Version": versions.stroom,
                "Main-Class": "stroom.startup.App"
        )
    }
    archiveName jarName
    exclude '**/gwt-unitCache'
}

shadowJar {    
    // Allows us to build fat jars with lots of files
    zip64 true

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    archiveName fatJarName
    exclude '**/gwt-unitCache'
}

dependencies {
    implementation project(':stroom-activity:stroom-activity-impl-db')
    implementation project(':stroom-config:stroom-config-app')
    implementation project(':stroom-config:stroom-config-global-impl-db')
    implementation project(':stroom-core-server')
    implementation project(':stroom-core-shared')
    implementation project(':stroom-dashboard:stroom-dashboard-server')
    implementation project(':stroom-data-meta:stroom-data-meta-impl-db')
    implementation project(':stroom-data-store:stroom-data-store-impl-fs')
    implementation project(':stroom-docstore:stroom-docstore-api')
    implementation project(':stroom-docstore:stroom-docstore-impl')
    implementation project(':stroom-docstore:stroom-docstore-impl-db')
    implementation project(':stroom-elastic:stroom-elastic-impl')
    implementation project(':stroom-elastic:stroom-elastic-impl-http')
    implementation project(':stroom-entity-shared')
    implementation project(':stroom-event-logging:stroom-event-logging-impl')
    implementation project(':stroom-explorer:stroom-explorer-api')
    implementation project(':stroom-explorer:stroom-explorer-impl')
    implementation project(':stroom-importexport:stroom-importexport-api')
    implementation project(':stroom-index:stroom-index-server')
    implementation project(':stroom-kafka:stroom-kafka-impl')
    implementation project(':stroom-kafka:stroom-kafka-pipeline')
    implementation project(':stroom-pipeline')
    implementation project(':stroom-pipeline')
    implementation project(':stroom-proxy')
    implementation project(':stroom-ruleset:stroom-ruleset-server')
    implementation project(':stroom-ruleset:stroom-ruleset-shared')
    implementation project(':stroom-security:stroom-security-api')
    implementation project(':stroom-security:stroom-security-server')
    implementation project(':stroom-statistics:stroom-statistics-server')
    implementation project(':stroom-task:stroom-task-api')
    implementation project(':stroom-task:stroom-task-shared')
    implementation project(':stroom-job:stroom-job-api')
    implementation project(':stroom-util')
    implementation project(':stroom-util-shared')

    implementation libs.stroomDocRef

    implementation libs.dropwizard_lifecycle
    implementation libs.guava
    implementation libs.guice4
    implementation libs.javax_inject
    implementation libs.jcommander
    implementation libs.jetty_servlet

    implementation(libs.dropwizard_assets) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    implementation(libs.dropwizard_core) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    implementation libs.dropwizard_jersey
    implementation libs.dropwizard_jetty
    implementation libs.dropwizard_metrics_healthchecks
    implementation libs.dropwizard_servlets
    implementation libs.dropwizard_metrics_core
    implementation libs.dropwizard_metrics_annotation
    implementation libs.dropwizard_configuration
    implementation libs.flyway_core
    implementation libs.guava
    implementation libs.javax_inject
    implementation libs.javax_servlet_api
    implementation libs.jetty_server
    implementation libs.jetty_servlets
    implementation libs.logback_classic
    implementation libs.slf4j_api
    implementation libs.ws_rs_api

    runtimeOnly libs.javax_el
    runtimeOnly libs.javax_el_api

    testImplementation project(':stroom-app')
    // Use default DB config.
    testImplementation project(':stroom-activity:stroom-activity-api')
    testImplementation project(':stroom-activity:stroom-activity-impl-mock')
    testImplementation project(':stroom-config:stroom-config-app')
    testImplementation project(':stroom-core-server')
    testImplementation project(':stroom-core-shared')
    testImplementation project(':stroom-dashboard:stroom-dashboard-server')
    testImplementation project(':stroom-dashboard:stroom-dashboard-shared')
    testImplementation project(':stroom-data-meta:stroom-data-meta-api')
    testImplementation project(':stroom-data-meta:stroom-data-meta-impl-db')
    testImplementation project(':stroom-data-meta:stroom-data-meta-impl-mock')
    testImplementation project(':stroom-data-store:stroom-data-store-api')
    testImplementation project(':stroom-data-store:stroom-data-store-impl-fs')
    testImplementation project(':stroom-data-store:stroom-data-store-impl-mock')
    testImplementation project(':stroom-docstore:stroom-docstore-api')
    testImplementation project(':stroom-docstore:stroom-docstore-impl')
    testImplementation project(':stroom-docstore:stroom-docstore-impl-memory')
    testImplementation project(':stroom-docstore:stroom-docstore-shared')
    testImplementation project(':stroom-elastic:stroom-elastic-impl')
    testImplementation project(':stroom-entity-shared')
    testImplementation project(':stroom-event-logging:stroom-event-logging-api')
    testImplementation project(':stroom-event-logging:stroom-event-logging-impl')
    testImplementation project(':stroom-explorer:stroom-explorer-api')
    testImplementation project(':stroom-explorer:stroom-explorer-impl')
    testImplementation project(':stroom-explorer:stroom-explorer-impl-db')
    testImplementation project(':stroom-headless')
    testImplementation project(':stroom-importexport:stroom-importexport-api')
    testImplementation project(':stroom-index:stroom-index-server')
    testImplementation project(':stroom-index:stroom-index-shared')
    testImplementation project(':stroom-pipeline')
    testImplementation project(':stroom-ruleset:stroom-ruleset-server')
    testImplementation project(':stroom-security:stroom-security-api')
    testImplementation project(':stroom-security:stroom-security-impl-mock')
    testImplementation project(':stroom-security:stroom-security-server')
    testImplementation project(':stroom-security:stroom-security-shared')
    testImplementation project(':stroom-statistics:stroom-statistics-api')
    testImplementation project(':stroom-statistics:stroom-statistics-server')
    testImplementation project(':stroom-statistics:stroom-statistics-shared')
    testImplementation project(':stroom-task:stroom-task-api')
    testImplementation project(':stroom-test-common')
    testImplementation project(':stroom-util')
    testImplementation project(':stroom-util-shared')

//    testImplementation project(path: ':stroom-core-server', configuration: 'testArtifacts')
//    testImplementation project(path: ':stroom-dashboard:stroom-dashboard-server', configuration: 'testArtifacts')
//    testImplementation project(path: ':stroom-index:stroom-index-server', configuration: 'testArtifacts')
//    testImplementation project(path: ':stroom-pipeline', configuration: 'testArtifacts')
//    testImplementation project(path: ':stroom-security:stroom-security-server', configuration: 'testArtifacts')
    testImplementation project(':stroom-test-common')

    testImplementation libs.commons_io
    testImplementation libs.fast_classpath_scanner
    testImplementation libs.guice4
    testImplementation libs.hibernate_core
    testImplementation libs.hibernate_jpa_api
    testImplementation libs.hikari
    testImplementation libs.junit_jupiter_api
    testImplementation libs.lucene_core
    testImplementation libs.saxon_he
    testImplementation libs.slf4j_api
    testImplementation libs.stroomQueryApi
    testImplementation libs.stroomQueryCommon
    testImplementation libs.vavr

    testRuntimeOnly libs.javax_activation
    testRuntimeOnly libs.javax_el
    testRuntimeOnly libs.jaxb_runtime
    testRuntimeOnly libs.junit_jupiter_engine

    //the following logging libs are needed when running junits outside dropwizard
    testRuntimeOnly libs.jcl_over_slf4j
    testRuntimeOnly libs.jul_to_slf4j
    testRuntimeOnly libs.log4j_over_slf4j
    testRuntimeOnly libs.logback_classic
    testRuntimeOnly libs.logback_core

    testImplementation libs.assertj_core
    testImplementation libs.dropwizard_client
    testImplementation libs.dropwizard_testing
    testImplementation libs.mockito_core
}

run {
//    //Ensure we have the latest kafka plugin jar available for runtime
//    dependsOn ':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:copyPluginJar'
    args 'server', '../local.yml'
}

runShadow {
//    //Ensure we have the latest kafka plugin jar available for runtime
//    dependsOn ':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:copyPluginJar'
    args 'server', '../local.yml'
}

test {
    // Tests in stroom-app are quite slow so output progress for each test to keep travis alive
    afterTest { desc, result -> 
        println "Executed test ${desc.className} ${desc.name} with result: ${result.resultType}"
    }
}

// The gwtCompile tasks create files in stroom-app/src/main/resources/ui
// so those tasks MUST be run before processResource else this jar and 
// the fat jar will be missing all the GWT generated files and the UI will fail to start
processResources.mustRunAfter(':stroom-app-gwt:gwtCompile')
processResources.mustRunAfter(':stroom-dashboard-gwt:gwtCompile')

def stroomDockerBuildDir = "${projectDir}/docker/build"
def proxyDockerBuildDir = "${projectDir}/proxy-docker/build"

clean {
    delete stroomDockerBuildDir
    delete proxyDockerBuildDir
}


// Copy all the files needed by the stroom docker build into stroom-app/docker/build
task copyFilesForStroomDockerBuild() {
    dependsOn shadowJar
//    dependsOn tasks.getByPath(':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:shadowJar')
//    dependsOn tasks.getByPath(':stroom-elastic:stroom-elastic-client-impl_5_6_4:shadowJar')
    doFirst {
        new File(stroomPluginsDir).mkdirs()
        def stroomDockerContentPacksDir = "${stroomDockerBuildDir}/contentPacks"
        def stroomDockerPluginsDir = "${stroomDockerBuildDir}/plugins"
        new File(stroomPluginsDir).mkdirs()

        // Copy the stroom app fat jar
        copy {
            from "${project.buildDir}/libs/${fatJarName}"
            into stroomDockerBuildDir
        }

//        // Copy the kafka client fat jar
//        copy {
//            from project(':stroom-kafka:stroom-kafka-client-impl_0_10_0_1').file('build/libs/stroom-kafka-client-impl_0_10_0_1-all.jar')
//            into dockerBuildDir
//        }
//
//        // Copy the elastic client fat jar
//        copy {
//            from project(':stroom-elastic:stroom-elastic-impl-http').file('build/libs/stroom-elastic-impl-http.jar')
//            into dockerBuildDir
//        }

        // Copy the dropwizard yml configuration
        copy {
            from "${projectDir}/prod.yml"
            into stroomDockerBuildDir
        }

        //Copy the downloaded content packs
        copy {
            from "${contentPackDownloadDir}"
            into stroomDockerContentPacksDir
        }
    }
}

// Copy all the files needed by the stroom-proxy docker build into stroom-app/proxy-docker/build
task copyFilesForProxyDockerBuild() {
    dependsOn shadowJar
    doFirst {
        // Copy the stroom app fat jar
        copy {
            from "${project.buildDir}/libs/${fatJarName}"
            into proxyDockerBuildDir
        }

        // Copy the dropwizard yml configuration
        copy {
            from "${projectDir}/proxy-prod.yml"
            into proxyDockerBuildDir
        }
    }
}

swagger {
    apiSource {
        outputFormats = ['json', 'yaml']
        // TODO need to decide if we want all of our resource classes added to swagger and if so,
        // they need annotating with @Api/@ApiOperation/etc.
        locations = [
                'stroom.statistics.sql.search.SqlStatisticsQueryResource',
                'stroom.index.StroomIndexQueryResource',
                //'stroom.dictionary.DictionaryResource',
                //'stroom.dictionary.DictionaryResource2',
                //'stroom.ruleset.RuleSetResource',
                //'stroom.ruleset.RuleSetResource2',
                'stroom.security.AuthorisationResource'
        ]
        schemes = ['http', 'https']
        host = 'localhost:8080'
        basePath = '/api'
        info {
            title = 'stroom API'
            version = 'v1'
            description = 'Various APIs for interacting with stroom and its data'
            contact {
                name = 'GCHQ'
                url = 'https://github.com/gchq/stroom'
            }
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        outputPath = "${swaggerDir}/document.html"
        swaggerDirectory = "${swaggerDir}"
    }
}


def releaseBuildDir= 'build/release'

task copyJar(type: Copy) {
    from shadowJar.outputs.files
    into "${releaseBuildDir}/bin"
}

task copySupportingFiles(type: Copy) {
    from 'src/dist'
    into releaseBuildDir 

//    doLast {
//        // stroom.conf is a sym-link so it seems to go into the zip with +x perms
//        // which we don't want
//        exec {
//            commandLine 'chmod', '644', "${releaseBuildDir}/config/stroom.conf"
//        }
//    }
}

import de.undercouch.gradle.tasks.download.Download

task downloadSend(type: Download) {
    src "http://raw.githubusercontent.com/gchq/stroom-clients/${sendToStroomScriptVersion}/bash/send_to_stroom.sh"
    dest "${releaseBuildDir}/bin"
}

task downloadSendArgs(type: Download) {
    src "https://raw.githubusercontent.com/gchq/stroom-clients/${sendToStroomScriptVersion}/bash/send_to_stroom_args.sh"
    dest "${releaseBuildDir}/bin"
}

task makeSendExecutable {
    dependsOn copySupportingFiles
    doLast{
        // The args script is sourced so doesn't need execute perms
        exec {
            commandLine 'chmod', '+x', "${releaseBuildDir}/bin/send_to_stroom.sh"
        }
    }
}

task copyContentPackToDistribution(type: Copy) {
    from contentPackDownloadDir
    into "${releaseBuildDir}/contentPacks"
}

task buildDistribution(type: Zip) {
    dependsOn copyJar
    dependsOn copySupportingFiles
    dependsOn downloadSend
    dependsOn downloadSendArgs
    dependsOn makeSendExecutable
    dependsOn parent.downloadStroomContent
    dependsOn copyContentPackToDistribution
    from releaseBuildDir
}


// Ensure all projects have built their jars so swagger can see them
tasks.generateSwaggerDocumentation.dependsOn rootProject.getTasksByName('jar', true)

tasks.build.dependsOn generateSwaggerDocumentation
tasks.build.dependsOn copyFilesForStroomDockerBuild
tasks.build.dependsOn copyFilesForProxyDockerBuild
tasks.build.dependsOn shadowJar
tasks.build.dependsOn buildDistribution

// The gradle application plugin enables the distribution plugin
// which creates .zip/tar archives by default, as does the shadow plugin
// We have our own buildDistribution task so disable the standard ones to avoid confusion
distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

//commented out in case we decide to use this plugin
//honker {
//// Your project license
//license 'Apache 2'

//// Your project information, used to generate NOTICE files
//projectName 'Stroom'
//projectTimespan '2016-2017'
//projectOrganization 'GCHQ'

//// For dependencies that contains no licensing information (pom, manifest etc..)
//// you can define your licensing strategy, for example:
////licenseOverride { candidate ->
////if( candidate.group == 'something' && candidate.module == 'whatever' ) {
////candidate.license = 'BSD 3-Clause'
////}
////}
//}































task setupSampleDataApplication(type: JavaExec) {
    dependsOn this:compileJava
    dependsOn this:compileTestJava
    // We need to set the working directory as the stroom root otherwise
    // setupSampleData won't find 'samples' directories in other modules.
    workingDir '../'
    classpath = sourceSets.test.runtimeClasspath
    main = 'stroom.test.SetupSampleData'
}

////TODO This specific dep is needed to ensure TestKafkaExternalLoader has the jar available
////for its test. This is a TODO as stroom-connectors needs a big refactor once we
////decide what we are doing with plugable client libs and pipeline elements.
//tasks.test.dependsOn ':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:copyPluginJar'

