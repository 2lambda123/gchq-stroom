---
swagger: "2.0"
info:
  description: "Various APIs for interacting with Stroom and its data"
  version: "v1/v2"
  title: "Stroom API"
  contact:
    name: "Stroom"
    url: "https://github.com/gchq/stroom"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api"
tags:
- name: "Account"
- name: "ApiKey"
- name: "Authentication"
- name: "Token"
- name: "activity - v1"
- name: "annotations - v1"
- name: "application permissions - v1"
- name: "authorisation - v1"
- name: "cache - v1"
- name: "clusterlock - v1"
- name: "config - v1"
- name: "content - v1"
- name: "dashboard - v1"
- name: "data - v1"
- name: "dataRetentionRules - v1"
- name: "dataSource - v1"
- name: "dbStatus - v1"
- name: "dictionary - v1"
- name: "dictionary - v2"
- name: "document permissions - v1"
- name: "elements - v1"
- name: "entityEvent - v1"
- name: "explorer - v1"
- name: "explorer - v2"
- name: "export - v1"
- name: "feed - v1"
- name: "feedStatus - v1"
- name: "fsVolume - v1"
- name: "index - v1"
- name: "index - v2"
- name: "index volume - v2"
- name: "index volumeGroup - v2"
- name: "job - v1"
- name: "jobNode - v1"
- name: "kafkaConfig - v1"
- name: "meta - v1"
- name: "node - v1"
- name: "pipeline - v1"
- name: "processor - v1"
- name: "processorFilter - v1"
- name: "processorTask - v1"
- name: "reference data - v1"
- name: "remoteSearch - v1"
- name: "ruleset - v2"
- name: "scheduledTime - v1"
- name: "script - v1"
- name: "searchable - v2"
- name: "session - v1"
- name: "sessionInfo - v1"
- name: "solr index - v1"
- name: "solrIndex - v1"
- name: "sqlstatistics query - v2"
- name: "statistic - v1"
- name: "statisticrollUp - v1"
- name: "statsStore - v1"
- name: "statsStorerollUp - v1"
- name: "stepping - v1"
- name: "storedQuery - v1"
- name: "stream attribute map - v1"
- name: "stream task - v1"
- name: "stroom-index query - v2"
- name: "stroom-index volumeGroup - v1"
- name: "stroom-index volumes - v1"
- name: "stroom-solr-index query - v2"
- name: "stroomSession - v1"
- name: "suggest - v1"
- name: "system info - v1"
- name: "task - v1"
- name: "textConverter - v1"
- name: "viewData - v1"
- name: "visualisation - v1"
- name: "welcome - v1"
- name: "xmlSchema - v1"
- name: "xslt - v1"
schemes:
- "https"
security:
- ApiKeyAuth: []
paths:
  /account/v1:
    get:
      tags:
      - "Account"
      summary: "Get all accounts."
      description: "Stroom Account API"
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
    post:
      tags:
      - "Account"
      summary: "Create an account."
      description: "Stroom Account API"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "account"
        required: false
        schema:
          $ref: "#/definitions/CreateAccountRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int32"
  /account/v1/search:
    post:
      tags:
      - "Account"
      summary: "Search for an account by email."
      description: "Stroom Account API"
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /account/v1/{id}:
    get:
      tags:
      - "Account"
      summary: "Get an account by ID."
      description: "Stroom Account API"
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
    put:
      tags:
      - "Account"
      summary: "Update an account."
      description: "Stroom Account API"
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "account"
        required: false
        schema:
          $ref: "#/definitions/UpdateAccountRequest"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
    delete:
      tags:
      - "Account"
      summary: "Delete an account by ID."
      description: "Stroom Account API"
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /activity/v1:
    get:
      tags:
      - "activity - v1"
      summary: "Lists activities"
      description: ""
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
    post:
      tags:
      - "activity - v1"
      summary: "Create an Activity"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Activity"
  /activity/v1/acknowledge:
    post:
      tags:
      - "activity - v1"
      summary: "Acknowledge the slash screen"
      description: ""
      operationId: "acknowledgeSplash"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/AcknowledgeSplashRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /activity/v1/current:
    get:
      tags:
      - "activity - v1"
      summary: "Gets the current activity"
      description: ""
      operationId: "getCurrentActivity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Activity"
    put:
      tags:
      - "activity - v1"
      summary: "Gets the current activity"
      description: ""
      operationId: "setCurrentActivity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Activity"
  /activity/v1/fields:
    get:
      tags:
      - "activity - v1"
      summary: "Lists activity field definitions"
      description: ""
      operationId: "listFieldDefinitions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /activity/v1/validate:
    post:
      tags:
      - "activity - v1"
      summary: "Create an Activity"
      description: ""
      operationId: "validate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "activity"
        required: false
        schema:
          $ref: "#/definitions/Activity"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ActivityValidationResult"
  /activity/v1/{id}:
    get:
      tags:
      - "activity - v1"
      summary: "Get an Activity"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Activity"
    put:
      tags:
      - "activity - v1"
      summary: "Update an Activity"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Activity"
    delete:
      tags:
      - "activity - v1"
      summary: "Delete an activity"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /annotation/v1:
    get:
      tags:
      - "annotations - v1"
      summary: "Gets an annotation"
      description: ""
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "annotations - v1"
      operationId: "createEntry"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/CreateEntryRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnnotationDetail"
  /annotation/v1/comment:
    get:
      tags:
      - "annotations - v1"
      summary: "Gets a list of predefined comments"
      description: ""
      operationId: "getComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /annotation/v1/link:
    post:
      tags:
      - "annotations - v1"
      summary: "Links an annotation to an event"
      description: ""
      operationId: "link"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "eventLink"
        required: false
        schema:
          $ref: "#/definitions/EventLink"
      responses:
        default:
          description: "successful operation"
  /annotation/v1/linkedEvents:
    get:
      tags:
      - "annotations - v1"
      summary: "Gets a list of events linked to this annotation"
      description: ""
      operationId: "getLinkedEvents"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
  /annotation/v1/setAssignedTo:
    post:
      tags:
      - "annotations - v1"
      summary: "Bulk action to set the assignment for several annotations"
      description: ""
      operationId: "setAssignedTo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/SetAssignedToRequest"
      responses:
        default:
          description: "successful operation"
  /annotation/v1/setStatus:
    post:
      tags:
      - "annotations - v1"
      summary: "Bulk action to set the status for several annotations"
      description: ""
      operationId: "setStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/SetStatusRequest"
      responses:
        default:
          description: "successful operation"
  /annotation/v1/status:
    get:
      tags:
      - "annotations - v1"
      summary: "Gets a list of allowed statuses"
      description: ""
      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /annotation/v1/unlink:
    post:
      tags:
      - "annotations - v1"
      summary: "Unlinks an annotation from an event"
      description: ""
      operationId: "unlink"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "eventLink"
        required: false
        schema:
          $ref: "#/definitions/EventLink"
      responses:
        default:
          description: "successful operation"
  /appPermissions/v1:
    get:
      tags:
      - "application permissions - v1"
      description: "Stroom Application Permissions API"
      operationId: "getAllPermissionNames"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /appPermissions/v1/byName/{userName}:
    get:
      tags:
      - "application permissions - v1"
      description: "Stroom Application Permissions API"
      operationId: "getPermissionNamesForUserName"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userName"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /appPermissions/v1/{userUuid}:
    get:
      tags:
      - "application permissions - v1"
      description: "Stroom Application Permissions API"
      operationId: "getPermissionNamesForUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /appPermissions/v1/{userUuid}/{permission}:
    post:
      tags:
      - "application permissions - v1"
      description: "Stroom Application Permissions API"
      operationId: "addPermission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "permission"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "application permissions - v1"
      description: "Stroom Application Permissions API"
      operationId: "removePermission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "permission"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /authentication/v1/logout:
    get:
      tags:
      - "Authentication"
      summary: "Log a user out of their session"
      description: "Stroom Authentication API"
      operationId: "logout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "redirect_uri"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /authentication/v1/needsPasswordChange:
    get:
      tags:
      - "Authentication"
      summary: "Check if a user's password needs changing."
      description: "Stroom Authentication API"
      operationId: "needsPasswordChange"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /authentication/v1/noauth/changePassword:
    post:
      tags:
      - "Authentication"
      summary: "Change a user's password."
      description: "Stroom Authentication API"
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "changePasswordRequest"
        required: false
        schema:
          $ref: "#/definitions/ChangePasswordRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /authentication/v1/noauth/confirmPassword:
    post:
      tags:
      - "Authentication"
      summary: "Confirm an authenticated users current password."
      description: "Stroom Authentication API"
      operationId: "confirmPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "confirmPasswordRequest"
        required: false
        schema:
          $ref: "#/definitions/ConfirmPasswordRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /authentication/v1/noauth/fetchPasswordPolicy:
    get:
      tags:
      - "Authentication"
      summary: "Get the password policy"
      description: "Stroom Authentication API"
      operationId: "fetchPasswordPolicy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PasswordPolicyConfig"
  /authentication/v1/noauth/getAuthenticationState:
    get:
      tags:
      - "Authentication"
      summary: "Get the current authentication state"
      description: "Stroom Authentication API"
      operationId: "getAuthenticationState"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthenticationState"
  /authentication/v1/noauth/login:
    post:
      tags:
      - "Authentication"
      summary: "Handle a login request made using username and password credentials."
      description: "Stroom Authentication API"
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Credentials"
        required: false
        schema:
          $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /authentication/v1/noauth/reset/{email}:
    get:
      tags:
      - "Authentication"
      summary: "Reset a user account using an email address."
      description: "Stroom Authentication API"
      operationId: "resetEmail"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /authentication/v1/resetPassword:
    post:
      tags:
      - "Authentication"
      summary: "Reset an authenticated user's password."
      description: "Stroom Authentication API"
      operationId: "resetPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "changePasswordRequest"
        required: false
        schema:
          $ref: "#/definitions/ResetPasswordRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /authorisation/v1/createUser:
    post:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /authorisation/v1/hasPermission:
    post:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "hasPermission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /authorisation/v1/isAuthorised:
    post:
      tags:
      - "authorisation - v1"
      summary: "Submit a request to verify if the user has the requested permission\
        \ on a 'document'"
      description: "Stroom Authorisation API"
      operationId: "isAuthorised"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "permission"
        required: false
        schema:
          type: "string"
      responses:
        default:
          description: "successful operation"
  /authorisation/v1/setUserStatus:
    get:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "setUserStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "userId"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /cache/v1:
    get:
      tags:
      - "cache - v1"
      summary: "Lists caches"
      description: ""
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
    delete:
      tags:
      - "cache - v1"
      summary: "Clears a cache"
      description: ""
      operationId: "clear"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cacheName"
        in: "query"
        required: false
        type: "string"
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int64"
  /cache/v1/info:
    get:
      tags:
      - "cache - v1"
      summary: "Gets cache info"
      description: ""
      operationId: "info"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cacheName"
        in: "query"
        required: false
        type: "string"
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CacheInfo"
  /cluster/lock/v1/keepALive/{nodeName}:
    put:
      tags:
      - "clusterlock - v1"
      summary: "Keep a lock alive"
      description: ""
      operationId: "keepLockAlive"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "key"
        required: false
        schema:
          $ref: "#/definitions/ClusterLockKey"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /cluster/lock/v1/release/{nodeName}:
    put:
      tags:
      - "clusterlock - v1"
      summary: "Release a lock"
      description: ""
      operationId: "releaseLock"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "key"
        required: false
        schema:
          $ref: "#/definitions/ClusterLockKey"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /cluster/lock/v1/try/{nodeName}:
    put:
      tags:
      - "clusterlock - v1"
      summary: "Try to lock"
      description: ""
      operationId: "tryLock"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "key"
        required: false
        schema:
          $ref: "#/definitions/ClusterLockKey"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /config/v1:
    post:
      tags:
      - "config - v1"
      summary: "Update a ConfigProperty"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "configProperty"
        required: false
        schema:
          $ref: "#/definitions/ConfigProperty"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConfigProperty"
  /config/v1/clusterProperties/{propertyName}/dbOverrideValue:
    put:
      tags:
      - "config - v1"
      summary: "Update a ConfigProperty"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "configProperty"
        required: false
        schema:
          $ref: "#/definitions/ConfigProperty"
      - name: "propertyName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConfigProperty"
  /config/v1/clusterProperties/{propertyName}/yamlOverrideValue/{nodeName}:
    get:
      tags:
      - "config - v1"
      operationId: "getYamlValueByNodeAndName"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      - name: "propertyName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OverrideValueString"
  /config/v1/noauth/fetchUiConfig:
    get:
      tags:
      - "config - v1"
      summary: "Get config property"
      description: ""
      operationId: "fetchUiConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UiConfig"
  /config/v1/nodeProperties/{nodeName}:
    post:
      tags:
      - "config - v1"
      operationId: "listByNode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/GlobalConfigCriteria"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ListConfigResponse"
  /config/v1/properties:
    post:
      tags:
      - "config - v1"
      summary: "TODO"
      description: ""
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/GlobalConfigCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ListConfigResponse"
  /config/v1/properties/{propertyName}:
    get:
      tags:
      - "config - v1"
      operationId: "getPropertyByName"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "propertyName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConfigProperty"
  /content/v1/confirmImport:
    post:
      tags:
      - "content - v1"
      summary: "Get import confirmation state"
      description: ""
      operationId: "confirmImport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "resourceKey"
        required: false
        schema:
          $ref: "#/definitions/ResourceKey"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /content/v1/export:
    post:
      tags:
      - "content - v1"
      summary: "Export content"
      description: ""
      operationId: "exportContent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRefs"
        required: false
        schema:
          $ref: "#/definitions/DocRefs"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /content/v1/fetchDependencies:
    post:
      tags:
      - "content - v1"
      summary: "Fetch content dependencies"
      description: ""
      operationId: "fetchDependencies"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/DependencyCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /content/v1/import:
    post:
      tags:
      - "content - v1"
      summary: "Import content"
      description: ""
      operationId: "importContent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ImportConfigRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /dashboard/v1/downloadQuery:
    post:
      tags:
      - "dashboard - v1"
      summary: "Download a query"
      description: ""
      operationId: "downloadQuery"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "downloadQueryRequest"
        required: false
        schema:
          $ref: "#/definitions/DownloadQueryRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /dashboard/v1/downloadSearchResults:
    post:
      tags:
      - "dashboard - v1"
      summary: "Download search results"
      description: ""
      operationId: "downloadSearchResults"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/DownloadSearchResultsRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /dashboard/v1/fetchTimeZones:
    get:
      tags:
      - "dashboard - v1"
      summary: "Fetch time zone data from the server"
      description: ""
      operationId: "fetchTimeZones"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /dashboard/v1/functions:
    get:
      tags:
      - "dashboard - v1"
      summary: "Fetch all expression functions"
      description: ""
      operationId: "fetchFunctions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /dashboard/v1/poll:
    post:
      tags:
      - "dashboard - v1"
      summary: "Poll for new search results"
      description: ""
      operationId: "poll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/SearchBusPollRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            uniqueItems: true
  /dashboard/v1/read:
    post:
      tags:
      - "dashboard - v1"
      summary: "Get a dashboard doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DashboardDoc"
  /dashboard/v1/update:
    put:
      tags:
      - "dashboard - v1"
      summary: "Update a dashboard doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DashboardDoc"
  /dashboard/v1/validateExpression:
    post:
      tags:
      - "dashboard - v1"
      summary: "Validate an expression"
      description: ""
      operationId: "validateExpression"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "expression"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ValidateExpressionResult"
  /data/v1/download:
    post:
      tags:
      - "data - v1"
      summary: "Download matching data"
      description: ""
      operationId: "download"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindMetaCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /data/v1/info/{id}:
    get:
      tags:
      - "data - v1"
      summary: "Find full info about a data item"
      description: ""
      operationId: "info"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataInfoSection"
  /data/v1/upload:
    post:
      tags:
      - "data - v1"
      summary: "Upload data"
      description: ""
      operationId: "upload"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/UploadDataRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /dataRetentionRules/v1/impactSummary:
    post:
      tags:
      - "dataRetentionRules - v1"
      summary: "Get a summary of meta deletions with the passed data retention rules"
      description: ""
      operationId: "getRetentionDeletionSummary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/DataRetentionDeleteSummaryRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataRetentionDeleteSummary"
  /dataRetentionRules/v1/impactSummary/{queryId}:
    delete:
      tags:
      - "dataRetentionRules - v1"
      summary: "Delete a running query"
      description: ""
      operationId: "cancelQuery"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queryId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /dataRetentionRules/v1/read:
    post:
      tags:
      - "dataRetentionRules - v1"
      summary: "Get data retention rules"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataRetentionRules"
  /dataRetentionRules/v1/update:
    put:
      tags:
      - "dataRetentionRules - v1"
      summary: "Update data retention rules"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "dataRetentionRules"
        required: false
        schema:
          $ref: "#/definitions/DataRetentionRules"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataRetentionRules"
  /dataSource/v1/fetchFields:
    post:
      tags:
      - "dataSource - v1"
      summary: "Fetch data source fields"
      description: ""
      operationId: "fetchFields"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "dataSourceRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /dbStatus/v1:
    get:
      tags:
      - "dbStatus - v1"
      summary: "Find status of the DB"
      description: ""
      operationId: "getSystemTableStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPageDBTableStatus"
    post:
      tags:
      - "dbStatus - v1"
      summary: "Find status of the DB"
      description: ""
      operationId: "findSystemTableStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindDBTableCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPageDBTableStatus"
  /dictionary/v1/download:
    post:
      tags:
      - "dictionary - v1"
      summary: "Download a dictionary doc"
      description: ""
      operationId: "download"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /dictionary/v1/export:
    post:
      tags:
      - "dictionary - v1"
      summary: "Submit an export request"
      description: ""
      operationId: "exportDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Base64EncodedDocumentData"
  /dictionary/v1/import:
    post:
      tags:
      - "dictionary - v1"
      summary: "Submit an import request"
      description: ""
      operationId: "importDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocumentData"
        required: false
        schema:
          $ref: "#/definitions/Base64EncodedDocumentData"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /dictionary/v1/list:
    get:
      tags:
      - "dictionary - v1"
      summary: "Submit a request for a list of doc refs held by this service"
      description: ""
      operationId: "listDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            uniqueItems: true
  /dictionary/v1/read:
    post:
      tags:
      - "dictionary - v1"
      summary: "Get a dictionary doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DictionaryDoc"
  /dictionary/v1/update:
    put:
      tags:
      - "dictionary - v1"
      summary: "Update a dictionary doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DictionaryDoc"
  /dictionary/v1/{dictionaryUuid}:
    get:
      tags:
      - "dictionary - v1"
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "dictionaryUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DictionaryDTO"
    post:
      tags:
      - "dictionary - v1"
      operationId: "save"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "dictionaryUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /dictionary/v2/export:
    post:
      tags:
      - "dictionary - v2"
      summary: "Submit an export request"
      description: ""
      operationId: "exportDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Base64EncodedDocumentData"
  /dictionary/v2/import:
    post:
      tags:
      - "dictionary - v2"
      summary: "Submit an import request"
      description: ""
      operationId: "importDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocumentData"
        required: false
        schema:
          $ref: "#/definitions/Base64EncodedDocumentData"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /dictionary/v2/list:
    get:
      tags:
      - "dictionary - v2"
      summary: "Submit a request for a list of doc refs held by this service"
      description: ""
      operationId: "listDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            uniqueItems: true
  /docPermissions/v1/forDoc/{docUuid}:
    get:
      tags:
      - "document permissions - v1"
      description: "Stroom Document Permissions API"
      operationId: "getPermissionsForDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "document permissions - v1"
      description: "Stroom Document Permissions API"
      operationId: "clearDocumentPermissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /docPermissions/v1/forDocForUser/{docUuid}/{userUuid}:
    get:
      tags:
      - "document permissions - v1"
      description: "Stroom Document Permissions API"
      operationId: "getPermissionsForDocumentForUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docUuid"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "document permissions - v1"
      description: "Stroom Document Permissions API"
      operationId: "removePermissionForDocumentForUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docUuid"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /docPermissions/v1/forDocForUser/{docUuid}/{userUuid}/{permissionName}:
    post:
      tags:
      - "document permissions - v1"
      description: "Stroom Document Permissions API"
      operationId: "addPermission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docUuid"
        in: "path"
        required: true
        type: "string"
      - name: "permissionName"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "document permissions - v1"
      description: "Stroom Document Permissions API"
      operationId: "removePermission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docUuid"
        in: "path"
        required: true
        type: "string"
      - name: "permissionName"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /docPermissions/v1/forDocType/{docType}:
    get:
      tags:
      - "document permissions - v1"
      description: "Stroom Document Permissions API"
      operationId: "getPermissionForDocType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docType"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /elements/v1/elementProperties:
    get:
      tags:
      - "elements - v1"
      operationId: "getElementProperties"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /elements/v1/elements:
    get:
      tags:
      - "elements - v1"
      operationId: "getElements"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /entityEvent/v1/{nodeName}:
    put:
      tags:
      - "entityEvent - v1"
      summary: "Sends an entity event"
      description: ""
      operationId: "fireEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "entityevent"
        required: false
        schema:
          $ref: "#/definitions/EntityEvent"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /explorer/v1/all:
    get:
      tags:
      - "explorer - v1"
      operationId: "getExplorerTree"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /explorer/v1/copy:
    post:
      tags:
      - "explorer - v1"
      operationId: "copyDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "op"
        required: false
        schema:
          $ref: "#/definitions/CopyOp"
      responses:
        default:
          description: "successful operation"
  /explorer/v1/create:
    post:
      tags:
      - "explorer - v1"
      operationId: "createDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "op"
        required: false
        schema:
          $ref: "#/definitions/CreateOp"
      responses:
        default:
          description: "successful operation"
  /explorer/v1/delete:
    delete:
      tags:
      - "explorer - v1"
      operationId: "deleteDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /explorer/v1/docRefTypes:
    get:
      tags:
      - "explorer - v1"
      operationId: "getDocRefTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /explorer/v1/info/{type}/{uuid}:
    get:
      tags:
      - "explorer - v1"
      operationId: "getDocInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRefInfo"
  /explorer/v1/move:
    put:
      tags:
      - "explorer - v1"
      operationId: "moveDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /explorer/v1/rename:
    put:
      tags:
      - "explorer - v1"
      operationId: "renameDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /explorer/v1/search:
    get:
      tags:
      - "explorer - v1"
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pageOffset"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "searchTerm"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /explorer/v2/copy:
    post:
      tags:
      - "explorer - v2"
      summary: "Copy explorer items"
      description: ""
      operationId: "copy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ExplorerServiceCopyRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BulkActionResult"
  /explorer/v2/create:
    post:
      tags:
      - "explorer - v2"
      summary: "Create explorer item"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ExplorerServiceCreateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /explorer/v2/delete:
    delete:
      tags:
      - "explorer - v2"
      summary: "Delete explorer items"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ExplorerServiceDeleteRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BulkActionResult"
  /explorer/v2/fetchDocRefs:
    post:
      tags:
      - "explorer - v2"
      summary: "Fetch document references"
      description: ""
      operationId: "fetchDocRefs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRefs"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            uniqueItems: true
  /explorer/v2/fetchDocumentTypes:
    get:
      tags:
      - "explorer - v2"
      summary: "Fetch document types"
      description: ""
      operationId: "fetchDocumentTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocumentTypes"
  /explorer/v2/fetchExplorerNodes:
    post:
      tags:
      - "explorer - v2"
      summary: "Fetch explorer nodes"
      description: ""
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/FindExplorerNodeCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FetchExplorerNodeResult"
  /explorer/v2/fetchExplorerPermissions:
    post:
      tags:
      - "explorer - v2"
      summary: "Fetch permissions for explorer items"
      description: ""
      operationId: "fetchExplorerPermissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "explorerNodes"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ExplorerNode"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
  /explorer/v2/info:
    post:
      tags:
      - "explorer - v2"
      summary: "Get document info"
      description: ""
      operationId: "info"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRefInfo"
  /explorer/v2/move:
    put:
      tags:
      - "explorer - v2"
      summary: "Move explorer items"
      description: ""
      operationId: "move"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ExplorerServiceMoveRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BulkActionResult"
  /explorer/v2/rename:
    put:
      tags:
      - "explorer - v2"
      summary: "Rename explorer items"
      description: ""
      operationId: "rename"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ExplorerServiceRenameRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /export/v1:
    get:
      tags:
      - "export - v1"
      operationId: "export"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /feed/v1/fetchSupportedEncodings:
    get:
      tags:
      - "feed - v1"
      summary: "Fetch supported encodings"
      description: ""
      operationId: "fetchSupportedEncodings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /feed/v1/read:
    post:
      tags:
      - "feed - v1"
      summary: "Get a feed doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FeedDoc"
  /feed/v1/update:
    put:
      tags:
      - "feed - v1"
      summary: "Update a feed doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "xslt"
        required: false
        schema:
          $ref: "#/definitions/FeedDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FeedDoc"
  /feedStatus/v1/getFeedStatus:
    post:
      tags:
      - "feedStatus - v1"
      summary: "Submit a request to get the status of a feed"
      description: ""
      operationId: "getFeedStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "GetFeedStatusRequest"
        required: false
        schema:
          $ref: "#/definitions/GetFeedStatusRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetFeedStatusResponse"
  /fsVolume/v1:
    post:
      tags:
      - "fsVolume - v1"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FsVolume"
  /fsVolume/v1/find:
    post:
      tags:
      - "fsVolume - v1"
      summary: "Finds volumes"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindFsVolumeCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /fsVolume/v1/rescan:
    get:
      tags:
      - "fsVolume - v1"
      summary: "Rescans volumes"
      description: ""
      operationId: "rescan"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /fsVolume/v1/{id}:
    get:
      tags:
      - "fsVolume - v1"
      summary: "Get a volume"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FsVolume"
    put:
      tags:
      - "fsVolume - v1"
      summary: "Update a volume"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "volume"
        required: false
        schema:
          $ref: "#/definitions/FsVolume"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FsVolume"
    delete:
      tags:
      - "fsVolume - v1"
      summary: "Delete a volume"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /index/v1/export:
    post:
      tags:
      - "index - v1"
      summary: "Submit an export request"
      description: ""
      operationId: "exportDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Base64EncodedDocumentData"
  /index/v1/import:
    post:
      tags:
      - "index - v1"
      summary: "Submit an import request"
      description: ""
      operationId: "importDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocumentData"
        required: false
        schema:
          $ref: "#/definitions/Base64EncodedDocumentData"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /index/v1/list:
    get:
      tags:
      - "index - v1"
      summary: "Submit a request for a list of doc refs held by this service"
      description: ""
      operationId: "listDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            uniqueItems: true
  /index/v1/{indexUuid}:
    get:
      tags:
      - "index - v1"
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "indexUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "index - v1"
      operationId: "save"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "indexUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /index/v2/read:
    post:
      tags:
      - "index - v2"
      summary: "Get an index doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexDoc"
  /index/v2/shard/delete:
    post:
      tags:
      - "index - v2"
      summary: "Delete matching index shards"
      description: ""
      operationId: "deleteIndexShards"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindIndexShardCriteria"
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int32"
  /index/v2/shard/find:
    post:
      tags:
      - "index - v2"
      summary: "Find matching index shards"
      description: ""
      operationId: "findIndexShards"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindIndexShardCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /index/v2/shard/flush:
    post:
      tags:
      - "index - v2"
      summary: "Flush matching index shards"
      description: ""
      operationId: "flushIndexShards"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindIndexShardCriteria"
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int32"
  /index/v2/update:
    put:
      tags:
      - "index - v2"
      summary: "Update an index doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexDoc"
  /index/volume/v2:
    post:
      tags:
      - "index volume - v2"
      summary: "Creates an index volume"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/IndexVolume"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexVolume"
  /index/volume/v2/find:
    post:
      tags:
      - "index volume - v2"
      summary: "Finds index volumes matching request"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ExpressionCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /index/volume/v2/rescan:
    delete:
      tags:
      - "index volume - v2"
      summary: "Rescans index volumes"
      description: ""
      operationId: "rescan"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /index/volume/v2/{id}:
    get:
      tags:
      - "index volume - v2"
      summary: "Gets an index volume"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexVolume"
    put:
      tags:
      - "index volume - v2"
      summary: "Updates an index volume"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "indexVolume"
        required: false
        schema:
          $ref: "#/definitions/IndexVolume"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexVolume"
    delete:
      tags:
      - "index volume - v2"
      summary: "Deletes an index volume"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /index/volumeGroup/v2:
    post:
      tags:
      - "index volumeGroup - v2"
      summary: "Creates an index volume group"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "name"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexVolumeGroup"
  /index/volumeGroup/v2/find:
    post:
      tags:
      - "index volumeGroup - v2"
      summary: "Finds index volume groups matching request"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ExpressionCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /index/volumeGroup/v2/{id}:
    get:
      tags:
      - "index volumeGroup - v2"
      summary: "Gets an index volume group"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexVolumeGroup"
    put:
      tags:
      - "index volumeGroup - v2"
      summary: "Updates an index volume group"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IndexVolumeGroup"
    delete:
      tags:
      - "index volumeGroup - v2"
      summary: "Deletes an index volume group"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /job/v1:
    get:
      tags:
      - "job - v1"
      summary: "Lists jobs"
      description: ""
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /job/v1/{id}/enabled:
    put:
      tags:
      - "job - v1"
      summary: "Sets the enabled status of the job"
      description: ""
      operationId: "setEnabled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "enabled"
        required: false
        schema:
          type: "boolean"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /jobNode/v1:
    get:
      tags:
      - "jobNode - v1"
      summary: "Lists job nodes"
      description: ""
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobName"
        in: "query"
        required: false
        type: "string"
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /jobNode/v1/info:
    get:
      tags:
      - "jobNode - v1"
      summary: "Gets current info for a job node"
      description: ""
      operationId: "info"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobName"
        in: "query"
        required: false
        type: "string"
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobNodeInfo"
  /jobNode/v1/{id}/enabled:
    put:
      tags:
      - "jobNode - v1"
      summary: "Sets the enabled status of the job node"
      description: ""
      operationId: "setEnabled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "enabled"
        required: false
        schema:
          type: "boolean"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /jobNode/v1/{id}/schedule:
    put:
      tags:
      - "jobNode - v1"
      summary: "Sets the schedule job node"
      description: ""
      operationId: "setSchedule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "schedule"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /jobNode/v1/{id}/taskLimit:
    put:
      tags:
      - "jobNode - v1"
      summary: "Sets the task limit for the job node"
      description: ""
      operationId: "setTaskLimit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "taskLimit"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /kafkaConfig/v1/download:
    post:
      tags:
      - "kafkaConfig - v1"
      summary: "Download a kafkaConfig doc"
      description: ""
      operationId: "download"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /kafkaConfig/v1/read:
    post:
      tags:
      - "kafkaConfig - v1"
      summary: "Get a kafkaConfig doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/KafkaConfigDoc"
  /kafkaConfig/v1/update:
    put:
      tags:
      - "kafkaConfig - v1"
      summary: "Update a kafkaConfig doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "updated"
        required: false
        schema:
          $ref: "#/definitions/KafkaConfigDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/KafkaConfigDoc"
  /meta/v1/find:
    post:
      tags:
      - "meta - v1"
      summary: "Find matching meta data"
      description: ""
      operationId: "findMetaRow"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindMetaCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /meta/v1/getReprocessSelectionSummary:
    post:
      tags:
      - "meta - v1"
      summary: "Get a summary of the parent items of the selected meta data"
      description: ""
      operationId: "getReprocessSelectionSummary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindMetaCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /meta/v1/getSelectionSummary:
    post:
      tags:
      - "meta - v1"
      summary: "Get a summary of the selected meta data"
      description: ""
      operationId: "getSelectionSummary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindMetaCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResourceGeneration"
  /meta/v1/getTypes:
    get:
      tags:
      - "meta - v1"
      summary: "Get a list of possible stream types"
      description: ""
      operationId: "getTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /meta/v1/update/status:
    put:
      tags:
      - "meta - v1"
      summary: "Update status on matching meta data"
      description: ""
      operationId: "updateStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int32"
  /node/v1:
    get:
      tags:
      - "node - v1"
      summary: "Lists nodes"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FetchNodeStatusResponse"
  /node/v1/all:
    get:
      tags:
      - "node - v1"
      summary: "Lists all nodes"
      description: ""
      operationId: "listAllNodes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /node/v1/enabled:
    get:
      tags:
      - "node - v1"
      summary: "Lists enabled nodes"
      description: ""
      operationId: "listEnabledNodes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /node/v1/enabled/{nodeName}:
    put:
      tags:
      - "node - v1"
      summary: "Sets whether a node is enabled"
      description: ""
      operationId: "setEnabled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "enabled"
        required: false
        schema:
          type: "boolean"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /node/v1/info/{nodeName}:
    get:
      tags:
      - "node - v1"
      summary: "Gets detailed information about a node"
      description: ""
      operationId: "info"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int64"
  /node/v1/ping/{nodeName}:
    get:
      tags:
      - "node - v1"
      summary: "Gets a ping time for a node"
      description: ""
      operationId: "ping"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int64"
  /node/v1/priority/{nodeName}:
    put:
      tags:
      - "node - v1"
      summary: "Sets the priority of a node"
      description: ""
      operationId: "setPriority"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "nodeName"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /oauth2/v1/noauth/.well-known/openid-configuration:
    get:
      tags:
      - "ApiKey"
      summary: "Provides discovery for openid configuration"
      description: ""
      operationId: "openIdConfiguration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /oauth2/v1/noauth/auth:
    get:
      tags:
      - "Authentication"
      summary: "Submit an OpenId AuthenticationRequest."
      description: ""
      operationId: "auth"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "client_id"
        in: "query"
        required: true
        type: "string"
      - name: "nonce"
        in: "query"
        required: false
        type: "string"
      - name: "prompt"
        in: "query"
        required: false
        type: "string"
      - name: "redirect_uri"
        in: "query"
        required: true
        type: "string"
      - name: "response_type"
        in: "query"
        required: true
        type: "string"
      - name: "scope"
        in: "query"
        required: true
        type: "string"
      - name: "state"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /oauth2/v1/noauth/certs:
    get:
      tags:
      - "ApiKey"
      summary: "Provides access to this service's current public key. A client may\
        \ use these keys to verify JWTs issued by this service."
      description: ""
      operationId: "certs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /oauth2/v1/noauth/token:
    post:
      tags:
      - "Authentication"
      summary: "Get a token from an access code"
      description: ""
      operationId: "token"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "tokenRequest"
        required: false
        schema:
          $ref: "#/definitions/TokenRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /permission/app/v1:
    get:
      tags:
      - "application permissions - v1"
      summary: "User and app permissions for the current session"
      description: ""
      operationId: "getUserAndPermissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserAndPermissions"
  /permission/app/v1/changeUser:
    post:
      tags:
      - "application permissions - v1"
      summary: "User and app permissions for the current session"
      description: ""
      operationId: "changeUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "changeUserRequest"
        required: false
        schema:
          $ref: "#/definitions/ChangeUserRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /permission/app/v1/fetchAllPermissions:
    get:
      tags:
      - "application permissions - v1"
      summary: "Get all possible permissions"
      description: ""
      operationId: "fetchAllPermissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /permission/app/v1/fetchUserAppPermissions:
    post:
      tags:
      - "application permissions - v1"
      summary: "User and app permissions for the specified user"
      description: ""
      operationId: "fetchUserAppPermissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "user"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserAndPermissions"
  /permission/changeEvent/v1/fireChange/{nodeName}:
    post:
      tags:
      - "application permissions - v1"
      summary: "Fires a permission change event"
      description: ""
      operationId: "fireChange"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/PermissionChangeRequest"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /permission/doc/v1/changeDocumentPermissions:
    post:
      tags:
      - "application permissions - v1"
      summary: "Change document permissions"
      description: ""
      operationId: "changeDocumentPermissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ChangeDocumentPermissionsRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /permission/doc/v1/checkDocumentPermission:
    post:
      tags:
      - "application permissions - v1"
      summary: "Check document permission"
      description: ""
      operationId: "checkDocumentPermission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/CheckDocumentPermissionRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /permission/doc/v1/copyPermissionsFromParent:
    post:
      tags:
      - "application permissions - v1"
      summary: "Copy permissions from parent"
      description: ""
      operationId: "copyPermissionFromParent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/CopyPermissionsFromParentRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocumentPermissions"
  /permission/doc/v1/fetchAllDocumentPermissions:
    post:
      tags:
      - "application permissions - v1"
      summary: "Fetch document permissions"
      description: ""
      operationId: "fetchAllDocumentPermissions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/FetchAllDocumentPermissionsRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocumentPermissions"
  /permission/doc/v1/filterUsers:
    post:
      tags:
      - "application permissions - v1"
      summary: "Get all permissions for a given document type"
      description: ""
      operationId: "filterUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /permission/doc/v1/getPermissionForDocType/${docType}:
    get:
      tags:
      - "application permissions - v1"
      summary: "Get all permissions for a given document type"
      description: ""
      operationId: "getPermissionForDocType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "docType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /pipeline/v1/fetchPipelineData:
    post:
      tags:
      - "pipeline - v1"
      summary: "Fetch data for a pipeline"
      description: ""
      operationId: "fetchPipelineData"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "pipeline"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /pipeline/v1/fetchPipelineXml:
    post:
      tags:
      - "pipeline - v1"
      summary: "Fetch the XML for a pipeline"
      description: ""
      operationId: "fetchPipelineXml"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "pipeline"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FetchPipelineXmlResponse"
  /pipeline/v1/propertyTypes:
    get:
      tags:
      - "pipeline - v1"
      summary: "Get pipeline property types"
      description: ""
      operationId: "getPropertyTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /pipeline/v1/read:
    post:
      tags:
      - "pipeline - v1"
      summary: "Get a pipeline doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PipelineDoc"
  /pipeline/v1/savePipelineXml:
    put:
      tags:
      - "pipeline - v1"
      summary: "Update a pipeline doc with XML directly"
      description: ""
      operationId: "savePipelineXml"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/SavePipelineXmlRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /pipeline/v1/update:
    put:
      tags:
      - "pipeline - v1"
      summary: "Update a pipeline doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "PipelineDoc"
        required: false
        schema:
          $ref: "#/definitions/PipelineDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PipelineDoc"
  /pipelines/v1:
    get:
      tags:
      - "pipeline - v1"
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /pipelines/v1/{parentPipelineId}/inherit:
    post:
      tags:
      - "pipeline - v1"
      operationId: "createInherited"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "parentPipeline"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      - name: "parentPipelineId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /pipelines/v1/{pipelineId}:
    get:
      tags:
      - "pipeline - v1"
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pipelineId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "pipeline - v1"
      operationId: "save"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "pipelineDocUpdates"
        required: false
        schema:
          $ref: "#/definitions/PipelineDTO"
      - name: "pipelineId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /processor/v1/{id}:
    delete:
      tags:
      - "processor - v1"
      summary: "Deletes a processor"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Processor"
  /processor/v1/{id}/enabled:
    put:
      tags:
      - "processor - v1"
      summary: "Sets the enabled/disabled state for a processor"
      description: ""
      operationId: "setEnabled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "enabled"
        required: false
        schema:
          type: "boolean"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /processorFilter/v1:
    post:
      tags:
      - "processorFilter - v1"
      summary: "Creates a filter"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/CreateProcessFilterRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProcessorFilter"
  /processorFilter/v1/find:
    post:
      tags:
      - "processorFilter - v1"
      summary: "Finds processors and filters matching request"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/FetchProcessorRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /processorFilter/v1/reprocess:
    post:
      tags:
      - "processorFilter - v1"
      summary: "Create filters to reprocess data"
      description: ""
      operationId: "reprocess"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/CreateReprocessFilterRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReprocessDataInfo"
  /processorFilter/v1/{id}:
    get:
      tags:
      - "processorFilter - v1"
      summary: "Gets a filter"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProcessorFilter"
    put:
      tags:
      - "processorFilter - v1"
      summary: "Updates a filter"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProcessorFilter"
    delete:
      tags:
      - "processorFilter - v1"
      summary: "Deletes a filter"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProcessorFilter"
  /processorFilter/v1/{id}/enabled:
    put:
      tags:
      - "processorFilter - v1"
      summary: "Sets the enabled/disabled state for a filter"
      description: ""
      operationId: "setEnabled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /processorFilter/v1/{id}/priority:
    put:
      tags:
      - "processorFilter - v1"
      summary: "Sets the priority for a filter"
      description: ""
      operationId: "setPriority"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /processorTask/v1/abandon/{nodeName}:
    post:
      tags:
      - "processorTask - v1"
      summary: "Abandon some tasks"
      description: ""
      operationId: "abandonTasks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/ProcessorTaskList"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /processorTask/v1/assign/{nodeName}:
    post:
      tags:
      - "processorTask - v1"
      summary: "Assign some tasks"
      description: ""
      operationId: "assignTasks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/AssignTasksRequest"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProcessorTaskList"
  /processorTask/v1/find:
    post:
      tags:
      - "processorTask - v1"
      summary: "Finds processors tasks"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "expressionCriteria"
        required: false
        schema:
          $ref: "#/definitions/ExpressionCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /processorTask/v1/summary:
    post:
      tags:
      - "processorTask - v1"
      summary: "Finds processor task summaries"
      description: ""
      operationId: "findSummary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "expressionCriteria"
        required: false
        schema:
          $ref: "#/definitions/ExpressionCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /refData/v1/entries:
    get:
      tags:
      - "reference data - v1"
      operationId: "entries"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RefStoreEntry"
  /refData/v1/lookup:
    post:
      tags:
      - "reference data - v1"
      operationId: "lookup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /refData/v1/purge/{purgeAge}:
    delete:
      tags:
      - "reference data - v1"
      operationId: "purge"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "purgeAge"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /remoteSearch/v1/destroy:
    get:
      tags:
      - "remoteSearch - v1"
      summary: "Destroy search results"
      description: ""
      operationId: "destroy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queryKey"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /remoteSearch/v1/poll:
    get:
      tags:
      - "remoteSearch - v1"
      operationId: "poll"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "queryKey"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StreamingOutput"
  /remoteSearch/v1/start:
    post:
      tags:
      - "remoteSearch - v1"
      summary: "Start a search"
      description: ""
      operationId: "start"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /ruleset/v2/export:
    post:
      tags:
      - "ruleset - v2"
      summary: "Submit an export request"
      description: ""
      operationId: "exportDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Base64EncodedDocumentData"
  /ruleset/v2/import:
    post:
      tags:
      - "ruleset - v2"
      summary: "Submit an import request"
      description: ""
      operationId: "importDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocumentData"
        required: false
        schema:
          $ref: "#/definitions/Base64EncodedDocumentData"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /ruleset/v2/list:
    get:
      tags:
      - "ruleset - v2"
      summary: "Submit a request for a list of doc refs held by this service"
      description: ""
      operationId: "listDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            uniqueItems: true
  /ruleset/v2/read:
    post:
      tags:
      - "ruleset - v2"
      summary: "Get a rules doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ReceiveDataRules"
  /ruleset/v2/update:
    put:
      tags:
      - "ruleset - v2"
      summary: "Update a rules doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "receiveDataRules"
        required: false
        schema:
          $ref: "#/definitions/ReceiveDataRules"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ReceiveDataRules"
  /scheduledTime/v1:
    post:
      tags:
      - "scheduledTime - v1"
      summary: "Gets scheduled time info"
      description: ""
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/GetScheduledTimesRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScheduledTimes"
  /script/v1/fetchLinkedScripts:
    post:
      tags:
      - "script - v1"
      summary: "Fetch related scripts"
      description: ""
      operationId: "fetchLinkedScripts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/FetchLinkedScriptRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScriptDoc"
  /script/v1/read:
    post:
      tags:
      - "script - v1"
      summary: "Get a script doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScriptDoc"
  /script/v1/update:
    put:
      tags:
      - "script - v1"
      summary: "Update a script doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "xslt"
        required: false
        schema:
          $ref: "#/definitions/ScriptDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScriptDoc"
  /searchable/v2/dataSource:
    post:
      tags:
      - "searchable - v2"
      summary: "Submit a request for a data source definition, supplying the DocRef\
        \ for the data source"
      description: ""
      operationId: "getDataSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataSource"
  /searchable/v2/destroy:
    post:
      tags:
      - "searchable - v2"
      summary: "Destroy a running query"
      description: ""
      operationId: "destroy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "QueryKey"
        required: false
        schema:
          $ref: "#/definitions/QueryKey"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /searchable/v2/search:
    post:
      tags:
      - "searchable - v2"
      summary: "Submit a search request"
      description: ""
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SearchRequest"
        required: false
        schema:
          $ref: "#/definitions/SearchRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponse"
  /session/v1/list:
    get:
      tags:
      - "session - v1"
      summary: "Lists user sessions for a node, or all nodes in the cluster if nodeName\
        \ is null"
      description: ""
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeName"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SessionDetails"
  /session/v1/logout/{sessionId}:
    get:
      tags:
      - "session - v1"
      summary: "Logs the specified session out of Stroom"
      description: ""
      operationId: "logout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "sessionId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /session/v1/noauth/login:
    get:
      tags:
      - "session - v1"
      summary: "Checks if the current session is authenticated and redirects to an\
        \ auth flow if it is not"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "redirect_uri"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /sessionInfo/v1:
    get:
      tags:
      - "sessionInfo - v1"
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SessionInfo"
  /solr/index/v1/export:
    post:
      tags:
      - "solr index - v1"
      summary: "Submit an export request"
      description: "Solr Index API"
      operationId: "exportDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Base64EncodedDocumentData"
  /solr/index/v1/import:
    post:
      tags:
      - "solr index - v1"
      summary: "Submit an import request"
      description: "Solr Index API"
      operationId: "importDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocumentData"
        required: false
        schema:
          $ref: "#/definitions/Base64EncodedDocumentData"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /solr/index/v1/list:
    get:
      tags:
      - "solr index - v1"
      summary: "Submit a request for a list of doc refs held by this service"
      description: "Solr Index API"
      operationId: "listDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            uniqueItems: true
  /solrIndex/v1/fetchSolrTypes:
    post:
      tags:
      - "solrIndex - v1"
      summary: "Fetch Solr types"
      description: ""
      operationId: "fetchSolrTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "solrIndexDoc"
        required: false
        schema:
          $ref: "#/definitions/SolrIndexDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /solrIndex/v1/read:
    post:
      tags:
      - "solrIndex - v1"
      summary: "Get a solr index doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SolrIndexDoc"
  /solrIndex/v1/solrConnectionTest:
    post:
      tags:
      - "solrIndex - v1"
      summary: "Test connection to Solr"
      description: ""
      operationId: "solrConnectionTest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "solrIndexDoc"
        required: false
        schema:
          $ref: "#/definitions/SolrIndexDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /solrIndex/v1/update:
    put:
      tags:
      - "solrIndex - v1"
      summary: "Update a solr index doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "solrIndexDoc"
        required: false
        schema:
          $ref: "#/definitions/SolrIndexDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SolrIndexDoc"
  /sqlstatistics/v2/dataSource:
    post:
      tags:
      - "sqlstatistics query - v2"
      summary: "Submit a request for a data source definition, supplying the DocRef\
        \ for the data source"
      description: ""
      operationId: "getDataSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataSource"
  /sqlstatistics/v2/destroy:
    post:
      tags:
      - "sqlstatistics query - v2"
      summary: "Destroy a running query"
      description: ""
      operationId: "destroy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "QueryKey"
        required: false
        schema:
          $ref: "#/definitions/QueryKey"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /sqlstatistics/v2/search:
    post:
      tags:
      - "sqlstatistics query - v2"
      summary: "Submit a search request"
      description: ""
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SearchRequest"
        required: false
        schema:
          $ref: "#/definitions/SearchRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponse"
  /statistic/rollUp/v1/bitMaskConversion:
    post:
      tags:
      - "statisticrollUp - v1"
      summary: "Get rollup bit mask"
      description: ""
      operationId: "bitMaskConversion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "maskValues"
        required: false
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /statistic/rollUp/v1/bitMaskPermGeneration:
    post:
      tags:
      - "statisticrollUp - v1"
      summary: "Create rollup bit mask"
      description: ""
      operationId: "bitMaskPermGeneration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "fieldCount"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /statistic/rollUp/v1/dataSourceFieldChange:
    post:
      tags:
      - "statisticrollUp - v1"
      summary: "Change fields"
      description: ""
      operationId: "fieldChange"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/StatisticsDataSourceFieldChangeRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StatisticsDataSourceData"
  /statistic/v1/read:
    post:
      tags:
      - "statistic - v1"
      summary: "Get a statistic doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/XsltDoc"
  /statistic/v1/update:
    put:
      tags:
      - "statistic - v1"
      summary: "Update a statistic doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "statisticStoreDoc"
        required: false
        schema:
          $ref: "#/definitions/StatisticStoreDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StatisticStoreDoc"
  /statsStore/rollUp/v1/bitMaskConversion:
    post:
      tags:
      - "statsStorerollUp - v1"
      summary: "Get rollup bit mask"
      description: ""
      operationId: "bitMaskConversion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "maskValues"
        required: false
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /statsStore/rollUp/v1/bitMaskPermGeneration:
    post:
      tags:
      - "statsStorerollUp - v1"
      summary: "Create rollup bit mask"
      description: ""
      operationId: "bitMaskPermGeneration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "fieldCount"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /statsStore/rollUp/v1/dataSourceFieldChange:
    post:
      tags:
      - "statsStorerollUp - v1"
      summary: "Change fields"
      description: ""
      operationId: "fieldChange"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/StroomStatsStoreFieldChangeRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StroomStatsStoreEntityData"
  /statsStore/v1/read:
    post:
      tags:
      - "statsStore - v1"
      summary: "Get a stats store doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DictionaryDoc"
  /statsStore/v1/update:
    put:
      tags:
      - "statsStore - v1"
      summary: "Update a stats store doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "stroomStatsStoreDoc"
        required: false
        schema:
          $ref: "#/definitions/StroomStatsStoreDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StroomStatsStoreDoc"
  /stepping/v1/findElementDoc:
    post:
      tags:
      - "stepping - v1"
      summary: "Load the document for an element"
      description: ""
      operationId: "findElementDoc"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Doc"
  /stepping/v1/getPipelineForStepping:
    post:
      tags:
      - "stepping - v1"
      summary: "Get a pipeline for stepping"
      description: ""
      operationId: "getPipelineForStepping"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/GetPipelineForMetaRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DocRef"
  /stepping/v1/step:
    post:
      tags:
      - "stepping - v1"
      summary: "Step a pipeline"
      description: ""
      operationId: "step"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/PipelineStepRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SteppingResult"
  /storedQuery/v1/create:
    post:
      tags:
      - "storedQuery - v1"
      summary: "Create a stored query"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "storedQuery"
        required: false
        schema:
          $ref: "#/definitions/StoredQuery"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StoredQuery"
  /storedQuery/v1/delete:
    delete:
      tags:
      - "storedQuery - v1"
      summary: "Delete a stored query"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StoredQuery"
  /storedQuery/v1/find:
    post:
      tags:
      - "storedQuery - v1"
      summary: "Find stored queries"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindStoredQueryCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /storedQuery/v1/read:
    post:
      tags:
      - "storedQuery - v1"
      summary: "Get a stored query"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "storedQuery"
        required: false
        schema:
          $ref: "#/definitions/StoredQuery"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StoredQuery"
  /storedQuery/v1/update:
    put:
      tags:
      - "storedQuery - v1"
      summary: "Update a stored query"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StoredQuery"
  /streamattributemap/v1:
    get:
      tags:
      - "stream attribute map - v1"
      operationId: "page"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pageOffset"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "stream attribute map - v1"
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "expression"
        required: false
        schema:
          $ref: "#/definitions/ExpressionOperator"
      - name: "pageOffset"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /streamattributemap/v1/dataSource:
    get:
      tags:
      - "stream attribute map - v1"
      operationId: "dataSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /streamattributemap/v1/{id}:
    get:
      tags:
      - "stream attribute map - v1"
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
  /streamattributemap/v1/{id}/{anyStatus}/relations:
    get:
      tags:
      - "stream attribute map - v1"
      operationId: "getRelations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "anyStatus"
        in: "path"
        required: true
        type: "boolean"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
  /streamtasks/v1:
    get:
      tags:
      - "stream task - v1"
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "desc"
        in: "query"
        required: false
        type: "boolean"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sortBy"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /streamtasks/v1/{filterId}:
    patch:
      tags:
      - "stream task - v1"
      operationId: "enable"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filterId"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /stroom-index/v2/dataSource:
    post:
      tags:
      - "stroom-index query - v2"
      summary: "Submit a request for a data source definition, supplying the DocRef\
        \ for the data source"
      description: ""
      operationId: "getDataSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataSource"
  /stroom-index/v2/destroy:
    post:
      tags:
      - "stroom-index query - v2"
      summary: "Destroy a running query"
      description: ""
      operationId: "destroy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "QueryKey"
        required: false
        schema:
          $ref: "#/definitions/QueryKey"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /stroom-index/v2/search:
    post:
      tags:
      - "stroom-index query - v2"
      summary: "Submit a search request"
      description: ""
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SearchRequest"
        required: false
        schema:
          $ref: "#/definitions/SearchRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponse"
  /stroom-index/volume/v1:
    get:
      tags:
      - "stroom-index volumes - v1"
      operationId: "getAll"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "stroom-index volumes - v1"
      operationId: "create"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "indexVolume"
        required: false
        schema:
          $ref: "#/definitions/IndexVolume"
      responses:
        default:
          description: "successful operation"
    put:
      tags:
      - "stroom-index volumes - v1"
      operationId: "update"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "indexVolume"
        required: false
        schema:
          $ref: "#/definitions/IndexVolume"
      responses:
        default:
          description: "successful operation"
  /stroom-index/volume/v1/{id}:
    get:
      tags:
      - "stroom-index volumes - v1"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "stroom-index volumes - v1"
      operationId: "delete"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        default:
          description: "successful operation"
  /stroom-index/volumeGroup/v1:
    get:
      tags:
      - "stroom-index volumeGroup - v1"
      operationId: "getAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "stroom-index volumeGroup - v1"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    put:
      tags:
      - "stroom-index volumeGroup - v1"
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "indexVolumeGroup"
        required: false
        schema:
          $ref: "#/definitions/IndexVolumeGroup"
      responses:
        default:
          description: "successful operation"
  /stroom-index/volumeGroup/v1/names:
    get:
      tags:
      - "stroom-index volumeGroup - v1"
      operationId: "getNames"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /stroom-index/volumeGroup/v1/{id}:
    get:
      tags:
      - "stroom-index volumeGroup - v1"
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "stroom-index volumeGroup - v1"
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /stroom-solr-index/v2/dataSource:
    post:
      tags:
      - "stroom-solr-index query - v2"
      summary: "Submit a request for a data source definition, supplying the DocRef\
        \ for the data source"
      description: "Stroom Solr Index Query API"
      operationId: "getDataSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DocRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataSource"
  /stroom-solr-index/v2/destroy:
    post:
      tags:
      - "stroom-solr-index query - v2"
      summary: "Destroy a running query"
      description: "Stroom Solr Index Query API"
      operationId: "destroy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "QueryKey"
        required: false
        schema:
          $ref: "#/definitions/QueryKey"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /stroom-solr-index/v2/search:
    post:
      tags:
      - "stroom-solr-index query - v2"
      summary: "Submit a search request"
      description: "Stroom Solr Index Query API"
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SearchRequest"
        required: false
        schema:
          $ref: "#/definitions/SearchRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponse"
  /stroomSession/v1/invalidate:
    get:
      tags:
      - "stroomSession - v1"
      summary: "Invalidate the current session"
      description: ""
      operationId: "invalidate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /stroomSession/v1/noauth/validateSession:
    get:
      tags:
      - "stroomSession - v1"
      summary: "Validate the current session, return a redirect Uri if invalid."
      description: ""
      operationId: "validateSession"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "redirect_uri"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /suggest/v1:
    post:
      tags:
      - "suggest - v1"
      summary: "Fetch some suggestions"
      description: ""
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/FetchSuggestionsRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /systemInfo/v1:
    get:
      tags:
      - "system info - v1"
      summary: "Get all system info results"
      description: ""
      operationId: "getAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SystemInfoResult"
  /systemInfo/v1/names:
    get:
      tags:
      - "system info - v1"
      summary: "Get all system info result names"
      description: ""
      operationId: "getNames"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /systemInfo/v1/{name}:
    get:
      tags:
      - "system info - v1"
      summary: "Get a system info result by name"
      description: ""
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
  /task/v1/find/{nodeName}:
    post:
      tags:
      - "task - v1"
      summary: "Finds tasks for a node"
      description: ""
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/FindTaskProgressRequest"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TaskProgressResponse"
  /task/v1/list/{nodeName}:
    get:
      tags:
      - "task - v1"
      summary: "Lists tasks for a node"
      description: ""
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TaskProgressResponse"
  /task/v1/terminate/{nodeName}:
    post:
      tags:
      - "task - v1"
      summary: "Terminates tasks for a node"
      description: ""
      operationId: "terminate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/TerminateTaskProgressRequest"
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /task/v1/user/{nodeName}:
    get:
      tags:
      - "task - v1"
      summary: "Lists tasks for a node"
      description: ""
      operationId: "userTasks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TaskProgressResponse"
  /textConverter/v1/read:
    post:
      tags:
      - "textConverter - v1"
      summary: "Get a text converter doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TextConverterDoc"
  /textConverter/v1/update:
    put:
      tags:
      - "textConverter - v1"
      summary: "Update a text converter doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "xslt"
        required: false
        schema:
          $ref: "#/definitions/TextConverterDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TextConverterDoc"
  /token/v1:
    get:
      tags:
      - "Token"
      summary: "Get all tokens."
      description: "Stroom API Key API"
      operationId: "list"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
    post:
      tags:
      - "ApiKey"
      summary: "Create a new token."
      description: "Stroom API Key API"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "CreateTokenRequest"
        required: false
        schema:
          $ref: "#/definitions/CreateTokenRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
    delete:
      tags:
      - "ApiKey"
      summary: "Delete all tokens."
      description: "Stroom API Key API"
      operationId: "deleteAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /token/v1/byToken/{token}:
    get:
      tags:
      - "ApiKey"
      summary: "Read a token by the token string itself."
      description: "Stroom API Key API"
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
    delete:
      tags:
      - "ApiKey"
      summary: "Delete a token by the token string itself."
      description: "Stroom API Key API"
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /token/v1/noauth/fetchTokenConfig:
    get:
      tags:
      - "Authentication"
      summary: "Get the token configuration"
      description: "Stroom API Key API"
      operationId: "fetchTokenConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TokenConfig"
  /token/v1/publickey:
    get:
      tags:
      - "ApiKey"
      summary: "Provides access to this service's current public key. A client may\
        \ use these keys to verify JWTs issued by this service."
      description: "Stroom API Key API"
      operationId: "getPublicKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /token/v1/search:
    post:
      tags:
      - "ApiKey"
      summary: "Submit a search request for tokens"
      description: "Stroom API Key API"
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SearchRequest"
        required: false
        schema:
          $ref: "#/definitions/SearchTokenRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPage"
  /token/v1/{id}:
    get:
      tags:
      - "ApiKey"
      summary: "Read a token by ID."
      description: "Stroom API Key API"
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
    delete:
      tags:
      - "ApiKey"
      summary: "Delete a token by ID."
      description: "Stroom API Key API"
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /token/v1/{id}/enabled:
    get:
      tags:
      - "ApiKey"
      summary: "Enable or disable the state of a token."
      description: "Stroom API Key API"
      operationId: "toggleEnabled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "enabled"
        in: "query"
        required: true
        type: "boolean"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /users/v1:
    get:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "isGroup"
        in: "query"
        required: false
        type: "boolean"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "uuid"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /users/v1/associates:
    get:
      tags:
      - "authorisation - v1"
      summary: "Gets a list of associated users"
      description: "Stroom Authorisation API"
      operationId: "getAssociates"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /users/v1/create/{name}/{isGroup}:
    post:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "isGroup"
        in: "path"
        required: true
        type: "boolean"
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /users/v1/find:
    post:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "find"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "criteria"
        required: false
        schema:
          $ref: "#/definitions/FindUserCriteria"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResultPageUser"
  /users/v1/{userName}/status:
    put:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "setStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "enabled"
        in: "query"
        required: false
        type: "boolean"
      - name: "userName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /users/v1/{userUuid}:
    get:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /users/v1/{userUuid}/{groupUuid}:
    put:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "addUserToGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "groupUuid"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
    delete:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "removeUserFromGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "groupUuid"
        in: "path"
        required: true
        type: "string"
      - name: "userUuid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /users/v1/{uuid}:
    delete:
      tags:
      - "authorisation - v1"
      description: "Stroom Authorisation API"
      operationId: "deleteUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /viewData/v1/fetch:
    post:
      tags:
      - "viewData - v1"
      summary: "Fetch matching data"
      description: ""
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: false
        schema:
          $ref: "#/definitions/FetchDataRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AbstractFetchDataResult"
  /viewData/v1/listChildTypes:
    get:
      tags:
      - "viewData - v1"
      summary: "List child types for a stream"
      description: ""
      operationId: "getChildStreamTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "partNo"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AbstractFetchDataResult"
  /visualisation/v1/read:
    post:
      tags:
      - "visualisation - v1"
      summary: "Get a visualisation doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VisualisationDoc"
  /visualisation/v1/update:
    put:
      tags:
      - "visualisation - v1"
      summary: "Update a visualisation doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "visualisationDoc"
        required: false
        schema:
          $ref: "#/definitions/VisualisationDoc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VisualisationDoc"
  /welcome/v1:
    get:
      tags:
      - "welcome - v1"
      operationId: "welcome"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /xmlSchema/v1/read:
    post:
      tags:
      - "xmlSchema - v1"
      summary: "Get an xml schema doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/XmlSchemaDoc"
  /xmlSchema/v1/update:
    put:
      tags:
      - "xmlSchema - v1"
      summary: "Update an xml schema doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/XmlSchemaDoc"
  /xslt/v1/read:
    post:
      tags:
      - "xslt - v1"
      summary: "Get an xslt doc"
      description: ""
      operationId: "read"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "docRef"
        required: false
        schema:
          $ref: "#/definitions/DocRef"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/XsltDoc"
  /xslt/v1/update:
    put:
      tags:
      - "xslt - v1"
      summary: "Update an xslt doc"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/XsltDoc"
  /xslt/v1/{xsltId}:
    get:
      tags:
      - "xslt - v1"
      operationId: "fetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "xsltId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/XsltDoc"
    post:
      tags:
      - "xslt - v1"
      operationId: "save"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "xsltDto"
        required: false
        schema:
          $ref: "#/definitions/XsltDTO"
      - name: "xsltId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  ApiKeyAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  AbstractFetchDataResult:
    type: "object"
    discriminator: "type"
    properties:
      feedName:
        type: "string"
        readOnly: true
      streamTypeName:
        type: "string"
        readOnly: true
      classification:
        type: "string"
        readOnly: true
      sourceLocation:
        readOnly: true
        $ref: "#/definitions/SourceLocation"
      itemRange:
        readOnly: true
        $ref: "#/definitions/OffsetRangeLong"
      totalItemCount:
        readOnly: true
        $ref: "#/definitions/CountLong"
      totalCharacterCount:
        readOnly: true
        $ref: "#/definitions/CountLong"
      availableChildStreamTypes:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
  AbstractField:
    type: "object"
    required:
    - "type"
    discriminator: "type"
    properties:
      type:
        type: "string"
      name:
        type: "string"
        readOnly: true
      queryable:
        type: "boolean"
        readOnly: true
      conditions:
        type: "array"
        readOnly: true
        items:
          type: "string"
          enum:
          - "CONTAINS"
          - "EQUALS"
          - "GREATER_THAN"
          - "GREATER_THAN_OR_EQUAL_TO"
          - "LESS_THAN"
          - "LESS_THAN_OR_EQUAL_TO"
          - "BETWEEN"
          - "IN"
          - "IN_DICTIONARY"
          - "IN_FOLDER"
          - "IS_DOC_REF"
          - "IS_NULL"
          - "IS_NOT_NULL"
  Account:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      userId:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      comments:
        type: "string"
      loginCount:
        type: "integer"
        format: "int32"
      loginFailures:
        type: "integer"
        format: "int32"
      lastLoginMs:
        type: "integer"
        format: "int64"
      reactivatedMs:
        type: "integer"
        format: "int64"
      forcePasswordChange:
        type: "boolean"
      neverExpires:
        type: "boolean"
      enabled:
        type: "boolean"
      inactive:
        type: "boolean"
      locked:
        type: "boolean"
      processingAccount:
        type: "boolean"
  AcknowledgeSplashRequest:
    type: "object"
    properties:
      message:
        type: "string"
        readOnly: true
      version:
        type: "string"
        readOnly: true
  Activity:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        readOnly: true
      version:
        type: "integer"
        format: "int32"
        readOnly: true
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      userId:
        type: "string"
      json:
        type: "string"
      details:
        $ref: "#/definitions/ActivityDetails"
  ActivityConfig:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "If you would like users to be able to record some info about\
          \ the activity they are performing set this property to true."
      chooseOnStartup:
        type: "boolean"
        description: "Set to true if users should be prompted to choose an activity\
          \ on login."
      managerTitle:
        type: "string"
        description: "The title of the activity manager popup."
      editorTitle:
        type: "string"
        description: "The title of the activity editor popup."
      editorBody:
        type: "string"
        description: "The HTML to display in the activity editor popup."
  ActivityDetails:
    type: "object"
    properties:
      properties:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Prop"
  ActivityValidationResult:
    type: "object"
    properties:
      valid:
        type: "boolean"
        readOnly: true
      messages:
        type: "string"
        readOnly: true
  AddPermissionEvent:
    allOf:
    - $ref: "#/definitions/PermissionChangeEvent"
    - type: "object"
      properties:
        userUuid:
          type: "string"
          readOnly: true
        documentUuid:
          type: "string"
          readOnly: true
        permission:
          type: "string"
          readOnly: true
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      version:
        type: "integer"
        format: "int32"
      createTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTime:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      title:
        type: "string"
      subject:
        type: "string"
      status:
        type: "string"
      assignedTo:
        type: "string"
      comment:
        type: "string"
      history:
        type: "string"
  AnnotationDetail:
    type: "object"
    properties:
      annotation:
        readOnly: true
        $ref: "#/definitions/Annotation"
      entries:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AnnotationEntry"
  AnnotationEntry:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      version:
        type: "integer"
        format: "int32"
      createTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTime:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      entryType:
        type: "string"
      data:
        type: "string"
  AssignTasksRequest:
    type: "object"
    properties:
      nodeName:
        type: "string"
        readOnly: true
      count:
        type: "integer"
        format: "int32"
        readOnly: true
  AuthenticationState:
    type: "object"
    properties:
      userId:
        type: "string"
        readOnly: true
      allowPasswordResets:
        type: "boolean"
        readOnly: true
  Automate:
    type: "object"
    properties:
      open:
        type: "boolean"
        readOnly: true
      refresh:
        type: "boolean"
        readOnly: true
      refreshInterval:
        type: "string"
        readOnly: true
  Base64EncodedDocumentData:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      dataMap:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "string"
  BooleanField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  BuildInfo:
    type: "object"
    properties:
      upDate:
        type: "string"
        readOnly: true
      buildDate:
        type: "string"
        readOnly: true
      buildVersion:
        type: "string"
        readOnly: true
  BulkActionResult:
    type: "object"
    properties:
      docRefs:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocRef"
      message:
        type: "string"
        readOnly: true
  CacheInfo:
    type: "object"
    properties:
      name:
        type: "string"
        readOnly: true
      map:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "string"
      nodeName:
        type: "string"
  ChangeDocumentPermissionsRequest:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      cascade:
        type: "string"
        readOnly: true
        enum:
        - "NO"
        - "CHANGES_ONLY"
        - "ALL"
      changes:
        readOnly: true
        $ref: "#/definitions/Changes"
  ChangePasswordRequest:
    type: "object"
    properties:
      userId:
        type: "string"
        readOnly: true
      currentPassword:
        type: "string"
        readOnly: true
      newPassword:
        type: "string"
        readOnly: true
      confirmNewPassword:
        type: "string"
        readOnly: true
  ChangeSet:
    type: "object"
    properties:
      addSet:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "object"
      removeSet:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "object"
  ChangeSetString:
    type: "object"
    properties:
      addSet:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
      removeSet:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
  ChangeSetUser:
    type: "object"
    properties:
      addSet:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
      removeSet:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
  ChangeUserRequest:
    type: "object"
    properties:
      user:
        readOnly: true
        $ref: "#/definitions/User"
      changedLinkedUsers:
        readOnly: true
        $ref: "#/definitions/ChangeSetUser"
      changedAppPermissions:
        readOnly: true
        $ref: "#/definitions/ChangeSetString"
  Changes:
    type: "object"
    properties:
      add:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            type: "string"
      remove:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            type: "string"
  CheckDocumentPermissionRequest:
    type: "object"
    properties:
      documentUuid:
        type: "string"
        readOnly: true
      permission:
        type: "string"
        readOnly: true
  ClearDocumentPermissionsEvent:
    allOf:
    - $ref: "#/definitions/PermissionChangeEvent"
    - type: "object"
      properties:
        documentUuid:
          type: "string"
          readOnly: true
  ClusterLockKey:
    type: "object"
    properties:
      name:
        type: "string"
        readOnly: true
      nodeName:
        type: "string"
        readOnly: true
      creationTime:
        type: "integer"
        format: "int64"
        readOnly: true
  ComponentConfig:
    type: "object"
    properties:
      type:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
        readOnly: true
      settings:
        readOnly: true
        $ref: "#/definitions/ComponentSettings"
  ComponentResultRequest:
    type: "object"
    required:
    - "componentId"
    discriminator: "type"
    properties:
      componentId:
        type: "string"
        description: "The ID of the component that will receive the results corresponding\
          \ to this ResultRequest"
        readOnly: true
      fetch:
        type: "string"
        readOnly: true
        enum:
        - "NONE"
        - "CHANGES"
        - "ALL"
  ComponentSettings:
    type: "object"
    discriminator: "type"
  ConditionalFormattingRule:
    type: "object"
    properties:
      id:
        type: "string"
        readOnly: true
      expression:
        readOnly: true
        $ref: "#/definitions/ExpressionOperator"
      hide:
        type: "boolean"
        readOnly: true
      backgroundColor:
        type: "string"
        readOnly: true
      textColor:
        type: "string"
        readOnly: true
      enabled:
        type: "boolean"
        readOnly: true
  ConfigProperty:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      name:
        $ref: "#/definitions/PropertyPath"
      defaultValue:
        type: "string"
      databaseOverrideValue:
        $ref: "#/definitions/OverrideValueString"
      yamlOverrideValue:
        $ref: "#/definitions/OverrideValueString"
      description:
        type: "string"
      editable:
        type: "boolean"
      password:
        type: "boolean"
      requireRestart:
        type: "boolean"
      requireUiRestart:
        type: "boolean"
      dataTypeName:
        type: "string"
  ConfirmPasswordRequest:
    type: "object"
    properties:
      password:
        type: "string"
        readOnly: true
  CopyOp:
    type: "object"
    properties:
      docRefs:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocRef"
      destinationFolderRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      permissionInheritance:
        type: "string"
        readOnly: true
        enum:
        - "NONE"
        - "SOURCE"
        - "DESTINATION"
        - "COMBINED"
  CopyPermissionsFromParentRequest:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
  Count:
    type: "object"
    properties:
      count:
        readOnly: true
        $ref: "#/definitions/Number"
      exact:
        type: "boolean"
        readOnly: true
  CountLong:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
        readOnly: true
      exact:
        type: "boolean"
        readOnly: true
  CreateAccountRequest:
    type: "object"
    properties:
      firstName:
        type: "string"
        readOnly: true
      lastName:
        type: "string"
        readOnly: true
      userId:
        type: "string"
        readOnly: true
      email:
        type: "string"
        readOnly: true
      comments:
        type: "string"
        readOnly: true
      password:
        type: "string"
        readOnly: true
      confirmPassword:
        type: "string"
        readOnly: true
      forcePasswordChange:
        type: "boolean"
        readOnly: true
      neverExpires:
        type: "boolean"
        readOnly: true
  CreateEntryRequest:
    type: "object"
    properties:
      annotation:
        $ref: "#/definitions/Annotation"
      type:
        type: "string"
      data:
        type: "string"
      linkedEvents:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/EventId"
  CreateOp:
    type: "object"
    properties:
      docRefType:
        type: "string"
        readOnly: true
      docRefName:
        type: "string"
        readOnly: true
      destinationFolderRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      permissionInheritance:
        type: "string"
        readOnly: true
        enum:
        - "NONE"
        - "SOURCE"
        - "DESTINATION"
        - "COMBINED"
  CreateProcessFilterRequest:
    type: "object"
    properties:
      pipeline:
        readOnly: true
        $ref: "#/definitions/DocRef"
      queryData:
        readOnly: true
        $ref: "#/definitions/QueryData"
      priority:
        type: "integer"
        format: "int32"
        readOnly: true
      autoPriority:
        type: "boolean"
        readOnly: true
      enabled:
        type: "boolean"
        readOnly: true
  CreateReprocessFilterRequest:
    type: "object"
    properties:
      queryData:
        readOnly: true
        $ref: "#/definitions/QueryData"
      priority:
        type: "integer"
        format: "int32"
        readOnly: true
      autoPriority:
        type: "boolean"
        readOnly: true
      enabled:
        type: "boolean"
        readOnly: true
  CreateTokenRequest:
    type: "object"
    required:
    - "tokenType"
    - "userId"
    properties:
      userId:
        type: "string"
      tokenType:
        type: "string"
        pattern: "^user$|^api$|^email_reset$"
      expiresOnMs:
        type: "integer"
        format: "int64"
      comments:
        type: "string"
      enabled:
        type: "boolean"
  CustomRollUpMask:
    type: "object"
    properties:
      rolledUpTagPosition:
        type: "array"
        readOnly: true
        items:
          type: "integer"
          format: "int32"
  DBTableStatus:
    type: "object"
    properties:
      db:
        type: "string"
      table:
        type: "string"
      count:
        type: "integer"
        format: "int64"
      dataSize:
        type: "integer"
        format: "int64"
      indexSize:
        type: "integer"
        format: "int64"
  DashboardConfig:
    type: "object"
    properties:
      parameters:
        type: "string"
      components:
        type: "array"
        xml:
          wrapped: true
        items:
          $ref: "#/definitions/ComponentConfig"
      layout:
        $ref: "#/definitions/LayoutConfig"
      tabVisibility:
        type: "string"
        enum:
        - "SHOW_ALL"
        - "HIDE_SINGLE"
        - "HIDE_ALL"
    xml:
      name: "dashboard"
  DashboardDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      dashboardConfig:
        $ref: "#/definitions/DashboardConfig"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  DashboardQueryKey:
    type: "object"
    properties:
      uuid:
        type: "string"
        readOnly: true
      dashboardUuid:
        type: "string"
        readOnly: true
      componentId:
        type: "string"
        readOnly: true
  DataInfoSection:
    type: "object"
    properties:
      title:
        type: "string"
        readOnly: true
      entries:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Entry"
  DataRange:
    type: "object"
    properties:
      locationFrom:
        readOnly: true
        $ref: "#/definitions/Location"
      charOffsetFrom:
        type: "integer"
        format: "int64"
        readOnly: true
      byteOffsetFrom:
        type: "integer"
        format: "int64"
        readOnly: true
      locationTo:
        readOnly: true
        $ref: "#/definitions/Location"
      charOffsetTo:
        type: "integer"
        format: "int64"
        readOnly: true
      byteOffsetTo:
        type: "integer"
        format: "int64"
        readOnly: true
      length:
        type: "integer"
        format: "int64"
        readOnly: true
  DataRetentionDeleteSummary:
    type: "object"
    properties:
      feedName:
        type: "string"
        readOnly: true
      metaType:
        type: "string"
        readOnly: true
      ruleNumber:
        type: "integer"
        format: "int32"
        readOnly: true
      ruleName:
        type: "string"
        readOnly: true
      count:
        type: "integer"
        format: "int32"
        readOnly: true
  DataRetentionDeleteSummaryRequest:
    type: "object"
    properties:
      queryId:
        type: "string"
        readOnly: true
      dataRetentionRules:
        readOnly: true
        $ref: "#/definitions/DataRetentionRules"
      criteria:
        readOnly: true
        $ref: "#/definitions/FindDataRetentionImpactCriteria"
  DataRetentionRule:
    type: "object"
    properties:
      ruleNumber:
        type: "integer"
        format: "int32"
        readOnly: true
      creationTime:
        type: "integer"
        format: "int64"
        readOnly: true
      name:
        type: "string"
        readOnly: true
      enabled:
        type: "boolean"
        readOnly: true
      expression:
        readOnly: true
        $ref: "#/definitions/ExpressionOperator"
      age:
        type: "integer"
        format: "int32"
        readOnly: true
      timeUnit:
        type: "string"
        readOnly: true
        enum:
        - "MINUTES"
        - "HOURS"
        - "DAYS"
        - "WEEKS"
        - "MONTHS"
        - "YEARS"
      forever:
        type: "boolean"
        readOnly: true
    xml:
      name: "dataRetentionRule"
  DataRetentionRules:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/DataRetentionRule"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
    xml:
      name: "dataRetentionPolicy"
  DataSource:
    type: "object"
    properties:
      fields:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AbstractField"
  DateField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  DateTimeFormatSettings:
    allOf:
    - $ref: "#/definitions/FormatSettings"
    - type: "object"
      required:
      - "pattern"
      - "timeZone"
      properties:
        pattern:
          type: "string"
          description: "A date time formatting pattern string conforming to the specification\
            \ of java.time.format.DateTimeFormatter"
          readOnly: true
        timeZone:
          readOnly: true
          $ref: "#/definitions/TimeZone"
      description: "The string formatting to apply to a date value"
  DefaultLocation:
    allOf:
    - $ref: "#/definitions/Location"
    - type: "object"
      properties:
        lineNo:
          type: "integer"
          format: "int32"
          readOnly: true
        colNo:
          type: "integer"
          format: "int32"
          readOnly: true
  DependencyCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      partialName:
        type: "string"
  DictionaryDTO:
    type: "object"
    required:
    - "name"
    - "type"
    - "uuid"
    properties:
      type:
        type: "string"
        example: "StroomStatsStore"
        description: "The type of the 'document' that this DocRef refers to"
      uuid:
        type: "string"
        example: "9f6184b4-bd78-48bc-b0cd-6e51a357f6a6"
        description: "The unique identifier for this 'document'"
      name:
        type: "string"
        example: "MyStatistic"
        description: "The name for the data source"
      description:
        type: "string"
        readOnly: true
      data:
        type: "string"
        readOnly: true
      imports:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocRef"
    xml:
      name: "doc"
    description: "A class for describing a unique reference to a 'document' in stroom.\
      \  A 'document' is an entity in stroom such as a data source dictionary or pipeline."
  DictionaryDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      data:
        type: "string"
      imports:
        type: "array"
        items:
          $ref: "#/definitions/DocRef"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  Doc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  DocRef:
    type: "object"
    required:
    - "name"
    - "type"
    - "uuid"
    properties:
      type:
        type: "string"
        example: "StroomStatsStore"
        description: "The type of the 'document' that this DocRef refers to"
      uuid:
        type: "string"
        example: "9f6184b4-bd78-48bc-b0cd-6e51a357f6a6"
        description: "The unique identifier for this 'document'"
      name:
        type: "string"
        example: "MyStatistic"
        description: "The name for the data source"
    xml:
      name: "doc"
    description: "A class for describing a unique reference to a 'document' in stroom.\
      \  A 'document' is an entity in stroom such as a data source dictionary or pipeline."
  DocRefField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties:
        docRefType:
          type: "string"
          readOnly: true
  DocRefInfo:
    type: "object"
    properties:
      docRef:
        $ref: "#/definitions/DocRef"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      otherInfo:
        type: "string"
  DocRefs:
    type: "object"
    properties:
      docRefs:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/DocRef"
  DocumentPermissions:
    type: "object"
    properties:
      docUuid:
        type: "string"
        readOnly: true
      users:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/User"
      groups:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/User"
      permissions:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            type: "string"
  DocumentType:
    type: "object"
    properties:
      priority:
        type: "integer"
        format: "int32"
        readOnly: true
      type:
        type: "string"
        readOnly: true
      displayType:
        type: "string"
        readOnly: true
      iconUrl:
        type: "string"
        readOnly: true
  DocumentTypes:
    type: "object"
    properties:
      nonSystemTypes:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocumentType"
      visibleTypes:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocumentType"
  DoubleField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  DownloadQueryRequest:
    type: "object"
    properties:
      dashboardQueryKey:
        readOnly: true
        $ref: "#/definitions/DashboardQueryKey"
      searchRequest:
        readOnly: true
        $ref: "#/definitions/SearchRequest"
  DownloadSearchResultsRequest:
    type: "object"
    properties:
      applicationInstanceId:
        type: "string"
        readOnly: true
      searchRequest:
        readOnly: true
        $ref: "#/definitions/SearchRequest"
      componentId:
        type: "string"
        readOnly: true
      fileType:
        type: "string"
        readOnly: true
        enum:
        - "EXCEL"
        - "CSV"
        - "TSV"
      sample:
        type: "boolean"
        readOnly: true
      percent:
        type: "integer"
        format: "int32"
        readOnly: true
      dateTimeLocale:
        type: "string"
        readOnly: true
  EntityEvent:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      action:
        type: "string"
        readOnly: true
        enum:
        - "CREATE"
        - "UPDATE"
        - "DELETE"
        - "CLEAR_CACHE"
  Entry:
    type: "object"
    properties:
      key:
        type: "string"
        readOnly: true
      value:
        type: "string"
        readOnly: true
  EventId:
    type: "object"
    properties:
      streamId:
        type: "integer"
        format: "int64"
        readOnly: true
      eventId:
        type: "integer"
        format: "int64"
        readOnly: true
  EventLink:
    type: "object"
    properties:
      annotationId:
        type: "integer"
        format: "int64"
        readOnly: true
      eventId:
        readOnly: true
        $ref: "#/definitions/EventId"
  Expander:
    type: "object"
    properties:
      depth:
        type: "integer"
        format: "int32"
      expanded:
        type: "boolean"
      leaf:
        type: "boolean"
  ExplorerNode:
    type: "object"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      tags:
        type: "string"
      depth:
        type: "integer"
        format: "int32"
      iconUrl:
        type: "string"
      nodeState:
        type: "string"
        enum:
        - "OPEN"
        - "CLOSED"
        - "LEAF"
      children:
        type: "array"
        items:
          $ref: "#/definitions/ExplorerNode"
  ExplorerServiceCopyRequest:
    type: "object"
    properties:
      docRefs:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocRef"
      destinationFolderRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      permissionInheritance:
        type: "string"
        readOnly: true
        enum:
        - "NONE"
        - "SOURCE"
        - "DESTINATION"
        - "COMBINED"
  ExplorerServiceCreateRequest:
    type: "object"
    properties:
      docType:
        type: "string"
      docName:
        type: "string"
      destinationFolderRef:
        $ref: "#/definitions/DocRef"
      permissionInheritance:
        type: "string"
        enum:
        - "NONE"
        - "SOURCE"
        - "DESTINATION"
        - "COMBINED"
  ExplorerServiceDeleteRequest:
    type: "object"
    properties:
      docRefs:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocRef"
  ExplorerServiceMoveRequest:
    type: "object"
    properties:
      docRefs:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DocRef"
      destinationFolderRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      permissionInheritance:
        type: "string"
        readOnly: true
        enum:
        - "NONE"
        - "SOURCE"
        - "DESTINATION"
        - "COMBINED"
  ExplorerServiceRenameRequest:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      docName:
        type: "string"
        readOnly: true
  ExplorerTreeFilter:
    type: "object"
    properties:
      includedTypes:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
      tags:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
      requiredPermissions:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
      nameFilter:
        type: "string"
        readOnly: true
      nameFilterChange:
        type: "boolean"
        readOnly: true
  ExpressionCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      expression:
        $ref: "#/definitions/ExpressionOperator"
  ExpressionItem:
    type: "object"
    discriminator: "type"
    properties:
      enabled:
        type: "boolean"
        example: true
        description: "Whether this item in the expression tree is enabled or not"
        readOnly: true
    description: "Base type for an item in an expression tree"
  ExpressionOperator:
    type: "object"
    required:
    - "op"
    properties:
      op:
        type: "string"
        description: "The logical addOperator type"
        readOnly: true
        enum:
        - "AND"
        - "OR"
        - "NOT"
      children:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          $ref: "#/definitions/ExpressionItem"
      enabled:
        type: "boolean"
        example: true
        description: "Whether this item in the expression tree is enabled or not"
        readOnly: true
    description: "A logical addOperator term in a query expression tree"
  ExpressionTerm:
    allOf:
    - $ref: "#/definitions/ExpressionItem"
    - type: "object"
      required:
      - "condition"
      - "field"
      properties:
        field:
          type: "string"
          description: "The name of the field that is being evaluated in this predicate\
            \ term"
          readOnly: true
        condition:
          type: "string"
          description: "The condition of the predicate term"
          readOnly: true
          enum:
          - "CONTAINS"
          - "EQUALS"
          - "GREATER_THAN"
          - "GREATER_THAN_OR_EQUAL_TO"
          - "LESS_THAN"
          - "LESS_THAN_OR_EQUAL_TO"
          - "BETWEEN"
          - "IN"
          - "IN_DICTIONARY"
          - "IN_FOLDER"
          - "IS_DOC_REF"
          - "IS_NULL"
          - "IS_NOT_NULL"
        value:
          type: "string"
          description: "The value that the field value is being evaluated against.\
            \ Not required if a dictionary is supplied"
          readOnly: true
        docRef:
          description: "The DocRef that the field value is being evaluated against\
            \ if the condition is IN_DICTIONARY, IN_FOLDER or IS_DOC_REF"
          readOnly: true
          $ref: "#/definitions/DocRef"
      description: "A predicate term in a query expression tree"
  FeedDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      classification:
        type: "string"
      encoding:
        type: "string"
      contextEncoding:
        type: "string"
      retentionDayAge:
        type: "integer"
        format: "int32"
      reference:
        type: "boolean"
      streamType:
        type: "string"
      status:
        type: "string"
        enum:
        - "RECEIVE"
        - "REJECT"
        - "DROP"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  FetchAllDocumentPermissionsRequest:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
  FetchDataRequest:
    type: "object"
    properties:
      sourceLocation:
        $ref: "#/definitions/SourceLocation"
      segmentCount:
        type: "integer"
        format: "int64"
      pipeline:
        $ref: "#/definitions/DocRef"
      showAsHtml:
        type: "boolean"
      markerMode:
        type: "boolean"
      expandedSeverities:
        type: "array"
        items:
          type: "string"
          enum:
          - "INFO"
          - "WARNING"
          - "ERROR"
          - "FATAL_ERROR"
  FetchDataResult:
    allOf:
    - $ref: "#/definitions/AbstractFetchDataResult"
    - type: "object"
      properties:
        data:
          type: "string"
          readOnly: true
        html:
          type: "boolean"
          readOnly: true
        dataType:
          type: "string"
          readOnly: true
          enum:
          - "SEGMENTED"
          - "NON_SEGMENTED"
          - "MARKER"
        totalBytes:
          type: "integer"
          format: "int64"
          readOnly: true
  FetchExplorerNodeResult:
    type: "object"
    properties:
      rootNodes:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ExplorerNode"
      openedItems:
        type: "array"
        readOnly: true
        items:
          type: "string"
      temporaryOpenedItems:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
  FetchLinkedScriptRequest:
    type: "object"
    properties:
      script:
        $ref: "#/definitions/DocRef"
      loadedScripts:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/DocRef"
  FetchMarkerResult:
    allOf:
    - $ref: "#/definitions/AbstractFetchDataResult"
    - type: "object"
      properties:
        markers:
          type: "array"
          readOnly: true
          items:
            $ref: "#/definitions/Marker"
  FetchNodeStatusResponse:
    type: "object"
    properties:
      values:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/NodeStatusResult"
      pageResponse:
        readOnly: true
        $ref: "#/definitions/PageResponse"
  FetchPipelineXmlResponse:
    type: "object"
    properties:
      pipeline:
        readOnly: true
        $ref: "#/definitions/DocRef"
      xml:
        type: "string"
        readOnly: true
  FetchProcessorRequest:
    type: "object"
    properties:
      expression:
        $ref: "#/definitions/ExpressionOperator"
      expandedRows:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/ProcessorListRow"
  FetchSuggestionsRequest:
    type: "object"
    required:
    - "dataSource"
    - "field"
    properties:
      dataSource:
        readOnly: true
        $ref: "#/definitions/DocRef"
      field:
        readOnly: true
        $ref: "#/definitions/AbstractField"
      text:
        type: "string"
        readOnly: true
  Field:
    type: "object"
    required:
    - "expression"
    - "special"
    - "visible"
    - "width"
    properties:
      id:
        type: "string"
        description: "The internal id of the field for equality purposes"
        readOnly: true
      name:
        type: "string"
        description: "The name of the field for display purposes"
        readOnly: true
      expression:
        type: "string"
        example: "SUM(${count})"
        description: "The expression to use to generate the value for this field"
        readOnly: true
      sort:
        readOnly: true
        $ref: "#/definitions/Sort"
      filter:
        readOnly: true
        $ref: "#/definitions/Filter"
      format:
        readOnly: true
        $ref: "#/definitions/Format"
      group:
        type: "integer"
        format: "int32"
        description: "If this field is to be grouped then this defines the level of\
          \ grouping, with 0 being the top level of grouping, 1 being the next level\
          \ down, etc."
        readOnly: true
      width:
        type: "integer"
        format: "int32"
      visible:
        type: "boolean"
      special:
        type: "boolean"
    description: "Describes a field in a result set. The field can have various expressions\
      \ applied to it, e.g. SUM(), along with sorting, filtering, formatting and grouping"
  Filter:
    type: "object"
    properties:
      includes:
        type: "string"
        example: "^[0-9]{3}$"
        description: "Only results matching this filter will be included"
        readOnly: true
      excludes:
        type: "string"
        example: "^[0-9]{3}$"
        description: "Only results NOT matching this filter will be included"
        readOnly: true
    description: "A pair of regular expression filters (inclusion and exclusion) to\
      \ apply to the field.  Either or both can be supplied"
  FindDBTableCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
  FindDataRetentionImpactCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      expression:
        $ref: "#/definitions/ExpressionOperator"
  FindExplorerNodeCriteria:
    type: "object"
    properties:
      openItems:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
      temporaryOpenedItems:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
      filter:
        readOnly: true
        $ref: "#/definitions/ExplorerTreeFilter"
      minDepth:
        type: "integer"
        format: "int32"
        readOnly: true
      ensureVisible:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
  FindFsVolumeCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      selection:
        readOnly: true
        $ref: "#/definitions/SelectionVolumeUseStatus"
  FindIndexShardCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      documentCountRange:
        $ref: "#/definitions/RangeInteger"
      nodeNameSet:
        readOnly: true
        $ref: "#/definitions/SelectionString"
      volumeIdSet:
        readOnly: true
        $ref: "#/definitions/SelectionInteger"
      indexUuidSet:
        readOnly: true
        $ref: "#/definitions/SelectionString"
      indexShardIdSet:
        readOnly: true
        $ref: "#/definitions/SelectionLong"
      indexShardStatusSet:
        readOnly: true
        $ref: "#/definitions/SelectionIndexShardStatus"
      partition:
        readOnly: true
        $ref: "#/definitions/StringCriteria"
  FindMetaCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      expression:
        $ref: "#/definitions/ExpressionOperator"
      fetchRelationships:
        type: "boolean"
  FindStoredQueryCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      name:
        $ref: "#/definitions/StringCriteria"
      requiredPermission:
        type: "string"
      userId:
        type: "string"
      dashboardUuid:
        type: "string"
      componentId:
        type: "string"
      favourite:
        type: "boolean"
  FindTaskCriteria:
    type: "object"
    properties:
      sessionId:
        type: "string"
      ancestorIdSet:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/TaskId"
      idSet:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/TaskId"
  FindTaskProgressCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      expandedTasks:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/TaskProgress"
      nameFilter:
        type: "string"
      sessionId:
        type: "string"
  FindTaskProgressRequest:
    type: "object"
    properties:
      criteria:
        readOnly: true
        $ref: "#/definitions/FindTaskProgressCriteria"
  FindUserCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      group:
        type: "boolean"
      relatedUser:
        $ref: "#/definitions/User"
      quickFilterInput:
        type: "string"
  FlatResult:
    allOf:
    - $ref: "#/definitions/Result"
    - type: "object"
      properties:
        structure:
          type: "array"
          readOnly: true
          items:
            $ref: "#/definitions/Field"
        values:
          type: "array"
          description: "The 2 dimensional array containing the result set. The positions\
            \ in the inner array correspond to the positions in the 'structure' property"
          readOnly: true
          items:
            type: "array"
            items:
              type: "object"
        size:
          type: "integer"
          format: "int64"
          description: "The size of the result set being returned"
          readOnly: true
      description: "A result structure used primarily for visualisation data"
  FloatField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  Format:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        example: "NUMBER"
        description: "The formatting type to apply"
        readOnly: true
        enum:
        - "GENERAL"
        - "NUMBER"
        - "DATE_TIME"
        - "TEXT"
      settings:
        readOnly: true
        $ref: "#/definitions/FormatSettings"
      wrap:
        type: "boolean"
        readOnly: true
    description: "Describes the formatting that will be applied to values in a field"
  FormatSettings:
    type: "object"
    required:
    - "default"
    discriminator: "type"
    properties:
      default:
        type: "boolean"
  FsVolume:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      path:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "INACTIVE"
        - "CLOSED"
      byteLimit:
        type: "integer"
        format: "int64"
      volumeState:
        $ref: "#/definitions/FsVolumeState"
  FsVolumeState:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      bytesUsed:
        type: "integer"
        format: "int64"
      bytesFree:
        type: "integer"
        format: "int64"
      bytesTotal:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  GetFeedStatusRequest:
    type: "object"
    properties:
      feedName:
        type: "string"
        readOnly: true
      senderDn:
        type: "string"
        readOnly: true
  GetFeedStatusResponse:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
        - "Receive"
        - "Reject"
        - "Drop"
      message:
        type: "string"
      stroomStatusCode:
        type: "string"
        readOnly: true
        enum:
        - "OK"
        - "FEED_MUST_BE_SPECIFIED"
        - "FEED_IS_NOT_DEFINED"
        - "FEED_IS_NOT_SET_TO_RECEIVED_DATA"
        - "UNEXPECTED_DATA_TYPE"
        - "UNKNOWN_COMPRESSION"
        - "CLIENT_CERTIFICATE_REQUIRED"
        - "CLIENT_CERTIFICATE_NOT_AUTHORISED"
        - "COMPRESSED_STREAM_INVALID"
        - "UNKNOWN_ERROR"
  GetPipelineForMetaRequest:
    type: "object"
    properties:
      metaId:
        type: "integer"
        format: "int64"
        readOnly: true
      childMetaId:
        type: "integer"
        format: "int64"
        readOnly: true
  GetScheduledTimesRequest:
    type: "object"
    properties:
      jobType:
        type: "string"
        readOnly: true
        enum:
        - "UNKNOWN"
        - "CRON"
        - "FREQUENCY"
        - "DISTRIBUTED"
      scheduleReferenceTime:
        type: "integer"
        format: "int64"
        readOnly: true
      lastExecutedTime:
        type: "integer"
        format: "int64"
        readOnly: true
      schedule:
        type: "string"
        readOnly: true
  GlobalConfigCriteria:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      quickFilterInput:
        type: "string"
  IdField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  ImportConfigRequest:
    type: "object"
    properties:
      resourceKey:
        readOnly: true
        $ref: "#/definitions/ResourceKey"
      confirmList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ImportState"
  ImportState:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      sourcePath:
        type: "string"
        readOnly: true
      destPath:
        type: "string"
      action:
        type: "boolean"
      messageList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Message"
      updatedFieldList:
        type: "array"
        readOnly: true
        items:
          type: "string"
      state:
        type: "string"
        enum:
        - "NEW"
        - "UPDATE"
        - "EQUAL"
      enableTime:
        type: "integer"
        format: "int64"
      enable:
        type: "boolean"
  IndexDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      maxDocsPerShard:
        type: "integer"
        format: "int32"
      partitionBy:
        type: "string"
        enum:
        - "DAY"
        - "WEEK"
        - "MONTH"
        - "YEAR"
      partitionSize:
        type: "integer"
        format: "int32"
      shardsPerPartition:
        type: "integer"
        format: "int32"
      retentionDayAge:
        type: "integer"
        format: "int32"
      fields:
        type: "array"
        items:
          $ref: "#/definitions/IndexField"
      volumeGroupName:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  IndexField:
    type: "object"
    properties:
      fieldType:
        type: "string"
        readOnly: true
        enum:
        - "ID"
        - "BOOLEAN_FIELD"
        - "INTEGER_FIELD"
        - "LONG_FIELD"
        - "FLOAT_FIELD"
        - "DOUBLE_FIELD"
        - "DATE_FIELD"
        - "FIELD"
        - "NUMERIC_FIELD"
      fieldName:
        type: "string"
        readOnly: true
      analyzerType:
        type: "string"
        readOnly: true
        enum:
        - "KEYWORD"
        - "ALPHA"
        - "NUMERIC"
        - "ALPHA_NUMERIC"
        - "WHITESPACE"
        - "STOP"
        - "STANDARD"
      indexed:
        type: "boolean"
        readOnly: true
      stored:
        type: "boolean"
        readOnly: true
      termPositions:
        type: "boolean"
        readOnly: true
      caseSensitive:
        type: "boolean"
        readOnly: true
  IndexVolume:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      path:
        type: "string"
      nodeName:
        type: "string"
      state:
        type: "string"
        enum:
        - "ACTIVE"
        - "INACTIVE"
        - "CLOSED"
      bytesLimit:
        type: "integer"
        format: "int64"
      bytesUsed:
        type: "integer"
        format: "int64"
      bytesFree:
        type: "integer"
        format: "int64"
      bytesTotal:
        type: "integer"
        format: "int64"
      statusMs:
        type: "integer"
        format: "int64"
      indexVolumeGroupId:
        type: "integer"
        format: "int32"
  IndexVolumeGroup:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      name:
        type: "string"
  Indicators:
    type: "object"
    properties:
      errorCount:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "integer"
          format: "int32"
      uniqueErrorSet:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/StoredError"
      errorList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/StoredError"
  InfoPopupConfig:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "If you would like users to provide some query info when performing\
          \ a query set this property to true."
      title:
        type: "string"
        description: "The title of the query info popup."
      validationRegex:
        type: "string"
        description: "A regex used to validate query info."
  IntegerField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  JobNodeInfo:
    type: "object"
    properties:
      currentTaskCount:
        type: "integer"
        format: "int32"
      scheduleReferenceTime:
        type: "integer"
        format: "int64"
      lastExecutedTime:
        type: "integer"
        format: "int64"
  KafkaConfigDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      data:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  LayoutConfig:
    type: "object"
    required:
    - "preferredSize"
    discriminator: "type"
    properties:
      preferredSize:
        $ref: "#/definitions/Size"
  Limits:
    type: "object"
    properties:
      streamCount:
        type: "integer"
        format: "int64"
      eventCount:
        type: "integer"
        format: "int64"
      durationMs:
        type: "integer"
        format: "int64"
    xml:
      name: "limits"
  ListConfigResponse:
    type: "object"
    properties:
      values:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ConfigProperty"
      pageResponse:
        readOnly: true
        $ref: "#/definitions/PageResponse"
  Location:
    type: "object"
    required:
    - "colNo"
    - "lineNo"
    discriminator: "type"
    properties:
      lineNo:
        type: "integer"
        format: "int32"
      colNo:
        type: "integer"
        format: "int32"
  LoginRequest:
    type: "object"
    properties:
      userId:
        type: "string"
        readOnly: true
      password:
        type: "string"
        readOnly: true
  LongField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  MapDefinition:
    type: "object"
    properties:
      refStreamDefinition:
        readOnly: true
        $ref: "#/definitions/RefStreamDefinition"
      mapName:
        type: "string"
        readOnly: true
  Marker:
    type: "object"
    required:
    - "severity"
    discriminator: "type"
    properties:
      severity:
        type: "string"
        enum:
        - "INFO"
        - "WARNING"
        - "ERROR"
        - "FATAL_ERROR"
  Message:
    type: "object"
    properties:
      severity:
        type: "string"
        readOnly: true
        enum:
        - "INFO"
        - "WARNING"
        - "ERROR"
        - "FATAL_ERROR"
      message:
        type: "string"
        readOnly: true
  Node:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      name:
        type: "string"
      url:
        type: "string"
      priority:
        type: "integer"
        format: "int32"
      enabled:
        type: "boolean"
  NodeStatusResult:
    type: "object"
    properties:
      node:
        readOnly: true
        $ref: "#/definitions/Node"
      master:
        type: "boolean"
        readOnly: true
  Number:
    type: "object"
  NumberFormatSettings:
    allOf:
    - $ref: "#/definitions/FormatSettings"
    - type: "object"
      required:
      - "decimalPlaces"
      properties:
        decimalPlaces:
          type: "integer"
          format: "int32"
          example: 2
          description: "The number of decimal places"
          readOnly: true
        useSeparator:
          type: "boolean"
          example: true
          description: "Whether to use a thousands separator or not. Defaults to false"
          readOnly: true
      description: "The definition of a format to apply to numeric data"
  OffsetRange:
    type: "object"
    required:
    - "length"
    - "offset"
    properties:
      offset:
        type: "integer"
        format: "int64"
        example: 0
        description: "The start offset for this sub-set of data, where zero is the\
          \ offset of the first record in the full result set"
        readOnly: true
      length:
        type: "integer"
        format: "int64"
        example: 100
        description: "The length in records of the sub-set of results"
        readOnly: true
    description: "The offset and length of a range of data in a sub-set of a query\
      \ result set"
  OffsetRangeLong:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int64"
        readOnly: true
      length:
        type: "integer"
        format: "int64"
        readOnly: true
  OverrideValue:
    type: "object"
    properties:
      hasOverride:
        type: "boolean"
        readOnly: true
      value:
        type: "object"
  OverrideValueString:
    type: "object"
    properties:
      hasOverride:
        type: "boolean"
        readOnly: true
      value:
        type: "string"
  PageRequest:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int64"
      length:
        type: "integer"
        format: "int32"
  PageResponse:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int64"
        readOnly: true
      length:
        type: "integer"
        format: "int32"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
      exact:
        type: "boolean"
        readOnly: true
  Param:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        description: "The property key"
        readOnly: true
      value:
        type: "string"
        description: "The property value"
        readOnly: true
    description: "A key value pair that describes a property of a query"
  PasswordPolicyConfig:
    type: "object"
    required:
    - "mandatoryPasswordChangeDuration"
    - "minimumPasswordLength"
    - "minimumPasswordStrength"
    - "neverUsedAccountDeactivationThreshold"
    - "unusedAccountDeactivationThreshold"
    properties:
      allowPasswordResets:
        type: "boolean"
        description: "Will the UI allow password resets"
      forcePasswordChangeOnFirstLogin:
        type: "boolean"
        description: "If true, on first login the user will be forced to change their\
          \ password."
      mandatoryPasswordChangeDuration:
        description: "The age after which a password will have to be changed. The\
          \ frequency of checks is controlled by the job 'Account Maintenance'."
        $ref: "#/definitions/StroomDuration"
      minimumPasswordLength:
        type: "integer"
        format: "int32"
        description: "The minimum number of characters that new passwords need to\
          \ contain."
        minimum: 0
      minimumPasswordStrength:
        type: "integer"
        format: "int32"
        description: "The minimum strength password that is allowed."
        minimum: 0
        maximum: 5
      neverUsedAccountDeactivationThreshold:
        description: "Unused user accounts with a duration since account creation\
          \ greater than this value will be locked. The frequency of checks is controlled\
          \ by the job 'Account Maintenance'."
        $ref: "#/definitions/StroomDuration"
      passwordComplexityRegex:
        type: "string"
        description: "A regex pattern that new passwords must match"
      unusedAccountDeactivationThreshold:
        description: "User accounts with a duration since last login greater than\
          \ this value will be locked. The frequency of checks is controlled by the\
          \ job 'Account Maintenance'."
        $ref: "#/definitions/StroomDuration"
  PermissionChangeEvent:
    type: "object"
    discriminator: "type"
  PermissionChangeRequest:
    type: "object"
    properties:
      event:
        readOnly: true
        $ref: "#/definitions/PermissionChangeEvent"
  PipelineDTO:
    type: "object"
    properties:
      docRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      parentPipeline:
        readOnly: true
        $ref: "#/definitions/DocRef"
      description:
        type: "string"
        readOnly: true
      configStack:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/PipelineData"
      merged:
        readOnly: true
        $ref: "#/definitions/PipelineData"
  PipelineData:
    type: "object"
    properties:
      elements:
        $ref: "#/definitions/PipelineElements"
      properties:
        $ref: "#/definitions/PipelineProperties"
      pipelineReferences:
        $ref: "#/definitions/PipelineReferences"
      links:
        $ref: "#/definitions/PipelineLinks"
      processors:
        type: "array"
        items:
          xml:
            name: "processors"
          $ref: "#/definitions/Processor"
    xml:
      name: "pipeline"
  PipelineDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      parentPipeline:
        $ref: "#/definitions/DocRef"
      pipelineData:
        $ref: "#/definitions/PipelineData"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  PipelineElement:
    type: "object"
    required:
    - "id"
    - "type"
    properties:
      elementType:
        $ref: "#/definitions/PipelineElementType"
      id:
        type: "string"
      type:
        type: "string"
  PipelineElementType:
    type: "object"
    properties:
      type:
        type: "string"
        readOnly: true
      category:
        type: "string"
        readOnly: true
        enum:
        - "INTERNAL"
        - "READER"
        - "PARSER"
        - "FILTER"
        - "WRITER"
        - "DESTINATION"
      roles:
        type: "array"
        readOnly: true
        items:
          type: "string"
      icon:
        type: "string"
        readOnly: true
  PipelineElements:
    type: "object"
    properties:
      add:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "element"
          $ref: "#/definitions/PipelineElement"
      remove:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "element"
          $ref: "#/definitions/PipelineElement"
  PipelineLink:
    type: "object"
    required:
    - "from"
    - "to"
    properties:
      from:
        type: "string"
        readOnly: true
      to:
        type: "string"
        readOnly: true
      sourcePipeline:
        $ref: "#/definitions/DocRef"
  PipelineLinks:
    type: "object"
    properties:
      add:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "link"
          $ref: "#/definitions/PipelineLink"
      remove:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "link"
          $ref: "#/definitions/PipelineLink"
  PipelineProperties:
    type: "object"
    properties:
      add:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "property"
          $ref: "#/definitions/PipelineProperty"
      remove:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "property"
          $ref: "#/definitions/PipelineProperty"
  PipelineProperty:
    type: "object"
    required:
    - "element"
    - "name"
    properties:
      propertyType:
        $ref: "#/definitions/PipelinePropertyType"
      element:
        type: "string"
      name:
        type: "string"
      value:
        $ref: "#/definitions/PipelinePropertyValue"
      sourcePipeline:
        $ref: "#/definitions/DocRef"
  PipelinePropertyType:
    type: "object"
    properties:
      elementType:
        readOnly: true
        $ref: "#/definitions/PipelineElementType"
      name:
        type: "string"
        readOnly: true
      type:
        type: "string"
        readOnly: true
      description:
        type: "string"
        readOnly: true
      defaultValue:
        type: "string"
        readOnly: true
      pipelineReference:
        type: "boolean"
        readOnly: true
      docRefTypes:
        type: "array"
        readOnly: true
        items:
          type: "string"
      displayPriority:
        type: "integer"
        format: "int32"
        readOnly: true
  PipelinePropertyValue:
    type: "object"
    properties:
      string:
        type: "string"
      integer:
        type: "integer"
        format: "int32"
      long:
        type: "integer"
        format: "int64"
      boolean:
        type: "boolean"
      entity:
        $ref: "#/definitions/DocRef"
  PipelineReference:
    type: "object"
    required:
    - "element"
    - "feed"
    - "name"
    - "pipeline"
    - "streamType"
    properties:
      element:
        type: "string"
      name:
        type: "string"
      pipeline:
        $ref: "#/definitions/DocRef"
      feed:
        $ref: "#/definitions/DocRef"
      streamType:
        type: "string"
      sourcePipeline:
        $ref: "#/definitions/DocRef"
  PipelineReferences:
    type: "object"
    properties:
      add:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "reference"
          $ref: "#/definitions/PipelineReference"
      remove:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          xml:
            name: "reference"
          $ref: "#/definitions/PipelineReference"
  PipelineStepRequest:
    type: "object"
    properties:
      criteria:
        $ref: "#/definitions/FindMetaCriteria"
      childStreamType:
        type: "string"
      stepLocation:
        $ref: "#/definitions/StepLocation"
      stepType:
        type: "string"
        enum:
        - "FIRST"
        - "FORWARD"
        - "BACKWARD"
        - "LAST"
        - "REFRESH"
      stepFilterMap:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/SteppingFilterSettings"
      pipeline:
        $ref: "#/definitions/DocRef"
      code:
        type: "object"
        additionalProperties:
          type: "string"
      stepSize:
        type: "integer"
        format: "int32"
  ProcessConfig:
    type: "object"
    properties:
      defaultRecordLimit:
        type: "integer"
        format: "int64"
        description: "The default number of records that batch search processing will\
          \ be limited by."
      defaultTimeLimit:
        type: "integer"
        format: "int64"
        description: "The default number of minutes that batch search processing will\
          \ be limited by."
  Processor:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      uuid:
        type: "string"
      taskType:
        type: "string"
      pipelineUuid:
        type: "string"
      pipelineName:
        type: "string"
      enabled:
        type: "boolean"
      deleted:
        type: "boolean"
    xml:
      name: "parameters"
  ProcessorFilter:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      uuid:
        type: "string"
      data:
        type: "string"
      queryData:
        $ref: "#/definitions/QueryData"
      processorUuid:
        type: "string"
        readOnly: true
      pipelineUuid:
        type: "string"
      pipelineName:
        type: "string"
      processor:
        $ref: "#/definitions/Processor"
      processorFilterTracker:
        $ref: "#/definitions/ProcessorFilterTracker"
      priority:
        type: "integer"
        format: "int32"
      reprocess:
        type: "boolean"
      enabled:
        type: "boolean"
      deleted:
        type: "boolean"
  ProcessorFilterRow:
    allOf:
    - $ref: "#/definitions/ProcessorListRow"
    - type: "object"
      properties:
        processorFilter:
          readOnly: true
          $ref: "#/definitions/ProcessorFilter"
  ProcessorFilterTracker:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      minMetaId:
        type: "integer"
        format: "int64"
      minEventId:
        type: "integer"
        format: "int64"
      minMetaCreateMs:
        type: "integer"
        format: "int64"
      maxMetaCreateMs:
        type: "integer"
        format: "int64"
      metaCreateMs:
        type: "integer"
        format: "int64"
      lastPollMs:
        type: "integer"
        format: "int64"
      lastPollTaskCount:
        type: "integer"
        format: "int32"
      status:
        type: "string"
      metaCount:
        type: "integer"
        format: "int64"
      eventCount:
        type: "integer"
        format: "int64"
  ProcessorListRow:
    type: "object"
    required:
    - "expander"
    discriminator: "type"
    properties:
      expander:
        $ref: "#/definitions/Expander"
  ProcessorRow:
    allOf:
    - $ref: "#/definitions/ProcessorListRow"
    - type: "object"
      properties:
        processor:
          readOnly: true
          $ref: "#/definitions/Processor"
        expander:
          readOnly: true
          $ref: "#/definitions/Expander"
  ProcessorTask:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      version:
        type: "integer"
        format: "int32"
      metaId:
        type: "integer"
        format: "int64"
      data:
        type: "string"
      nodeName:
        type: "string"
      feedName:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      statusTimeMs:
        type: "integer"
        format: "int64"
      startTimeMs:
        type: "integer"
        format: "int64"
      endTimeMs:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum:
        - "UNPROCESSED"
        - "ASSIGNED"
        - "PROCESSING"
        - "COMPLETE"
        - "FAILED"
        - "DELETED"
      processorFilter:
        $ref: "#/definitions/ProcessorFilter"
  ProcessorTaskList:
    type: "object"
    properties:
      nodeName:
        type: "string"
        readOnly: true
      list:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ProcessorTask"
  Prop:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      validation:
        type: "string"
      validationMessage:
        type: "string"
      value:
        type: "string"
      showInSelection:
        type: "boolean"
      showInList:
        type: "boolean"
  PropertyPath:
    type: "object"
    properties:
      parts:
        type: "array"
        items:
          type: "string"
  Query:
    type: "object"
    required:
    - "dataSource"
    - "expression"
    properties:
      dataSource:
        readOnly: true
        $ref: "#/definitions/DocRef"
      expression:
        description: "The root logical operator in the query expression tree"
        readOnly: true
        $ref: "#/definitions/ExpressionOperator"
      params:
        type: "array"
        description: "A list of key/value pairs that provide additional information\
          \ about the query"
        readOnly: true
        items:
          $ref: "#/definitions/Param"
    description: "The query terms for the search"
  QueryComponentSettings:
    allOf:
    - $ref: "#/definitions/ComponentSettings"
    - type: "object"
      properties:
        dataSource:
          readOnly: true
          $ref: "#/definitions/DocRef"
        expression:
          readOnly: true
          $ref: "#/definitions/ExpressionOperator"
        automate:
          readOnly: true
          $ref: "#/definitions/Automate"
  QueryConfig:
    type: "object"
    properties:
      infoPopup:
        $ref: "#/definitions/InfoPopupConfig"
  QueryData:
    type: "object"
    properties:
      dataSource:
        $ref: "#/definitions/DocRef"
      expression:
        $ref: "#/definitions/ExpressionOperator"
      limits:
        $ref: "#/definitions/Limits"
    xml:
      name: "query"
  QueryKey:
    type: "object"
    required:
    - "uuid"
    properties:
      uuid:
        type: "string"
        example: "7740bcd0-a49e-4c22-8540-044f85770716"
        description: "The UUID that makes up the query key"
    description: "A unique key to identify the instance of the search by. This key\
      \ is used to identify multiple requests for the same search when running in\
      \ incremental mode."
  Range:
    type: "object"
    properties:
      from:
        $ref: "#/definitions/Number"
      to:
        $ref: "#/definitions/Number"
      matchNull:
        type: "boolean"
  RangeInteger:
    type: "object"
    properties:
      from:
        type: "integer"
        format: "int32"
      to:
        type: "integer"
        format: "int32"
      matchNull:
        type: "boolean"
  Rec:
    type: "object"
    properties:
      streamId:
        type: "integer"
        format: "int64"
        readOnly: true
      recordNo:
        type: "integer"
        format: "int64"
        readOnly: true
  ReceiveDataRule:
    type: "object"
    properties:
      ruleNumber:
        type: "integer"
        format: "int32"
        readOnly: true
      creationTime:
        type: "integer"
        format: "int64"
        readOnly: true
      name:
        type: "string"
        readOnly: true
      enabled:
        type: "boolean"
        readOnly: true
      expression:
        readOnly: true
        $ref: "#/definitions/ExpressionOperator"
      action:
        type: "string"
        readOnly: true
        enum:
        - "RECEIVE"
        - "REJECT"
        - "DROP"
    xml:
      name: "dataReceiptRule"
  ReceiveDataRules:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      fields:
        type: "array"
        items:
          $ref: "#/definitions/AbstractField"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/ReceiveDataRule"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  RefDataProcessingInfo:
    type: "object"
    properties:
      createTimeEpochMs:
        type: "integer"
        format: "int64"
        readOnly: true
      lastAccessedTimeEpochMs:
        type: "integer"
        format: "int64"
        readOnly: true
      effectiveTimeEpochMs:
        type: "integer"
        format: "int64"
        readOnly: true
      processingState:
        type: "string"
        readOnly: true
        enum:
        - "LOAD_IN_PROGRESS"
        - "PURGE_IN_PROGRESS"
        - "COMPLETE"
  RefStoreEntry:
    type: "object"
    properties:
      mapDefinition:
        readOnly: true
        $ref: "#/definitions/MapDefinition"
      key:
        type: "string"
        readOnly: true
      value:
        type: "string"
        readOnly: true
      valueReferenceCount:
        type: "integer"
        format: "int32"
        readOnly: true
      refDataProcessingInfo:
        readOnly: true
        $ref: "#/definitions/RefDataProcessingInfo"
  RefStreamDefinition:
    type: "object"
    properties:
      pipelineDocRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      pipelineVersion:
        type: "string"
        readOnly: true
      streamId:
        type: "integer"
        format: "int64"
        readOnly: true
      streamNo:
        type: "integer"
        format: "int64"
        readOnly: true
  RemovePermissionEvent:
    allOf:
    - $ref: "#/definitions/PermissionChangeEvent"
    - type: "object"
      properties:
        userUuid:
          type: "string"
          readOnly: true
        documentUuid:
          type: "string"
          readOnly: true
        permission:
          type: "string"
          readOnly: true
  ReprocessDataInfo:
    type: "object"
    properties:
      severity:
        type: "string"
        readOnly: true
        enum:
        - "INFO"
        - "WARNING"
        - "ERROR"
        - "FATAL_ERROR"
      message:
        type: "string"
        readOnly: true
      details:
        type: "string"
        readOnly: true
  ResetPasswordRequest:
    type: "object"
    properties:
      newPassword:
        type: "string"
        readOnly: true
      confirmNewPassword:
        type: "string"
        readOnly: true
  ResourceGeneration:
    type: "object"
    properties:
      resourceKey:
        readOnly: true
        $ref: "#/definitions/ResourceKey"
      messageList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Message"
  ResourceKey:
    type: "object"
    properties:
      name:
        type: "string"
        readOnly: true
      key:
        type: "string"
        readOnly: true
  Result:
    type: "object"
    required:
    - "componentId"
    discriminator: "type"
    properties:
      componentId:
        type: "string"
        description: "The ID of the component that this result set was requested for.\
          \ See ResultRequest in SearchRequest"
        readOnly: true
      error:
        type: "string"
        description: "If an error has occurred producing this result set then this\
          \ will have details of the error"
        readOnly: true
    description: "Base object for describing a set of result data"
  ResultPage:
    type: "object"
    properties:
      values:
        type: "array"
        readOnly: true
        items:
          type: "object"
      pageResponse:
        readOnly: true
        $ref: "#/definitions/PageResponse"
  ResultPageDBTableStatus:
    type: "object"
    properties:
      values:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DBTableStatus"
      pageResponse:
        readOnly: true
        $ref: "#/definitions/PageResponse"
  ResultPageUser:
    type: "object"
    properties:
      values:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/User"
      pageResponse:
        readOnly: true
        $ref: "#/definitions/PageResponse"
  ResultRequest:
    type: "object"
    required:
    - "componentId"
    - "mappings"
    - "openGroups"
    - "requestedRange"
    - "resultStyle"
    properties:
      componentId:
        type: "string"
        description: "The ID of the component that will receive the results corresponding\
          \ to this ResultRequest"
        readOnly: true
      mappings:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/TableSettings"
      requestedRange:
        readOnly: true
        $ref: "#/definitions/OffsetRange"
      openGroups:
        type: "array"
        description: "TODO"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
      resultStyle:
        type: "string"
        description: "The style of results required. FLAT will provide a FlatResult\
          \ object, while TABLE will provide a TableResult object"
        readOnly: true
        enum:
        - "FLAT"
        - "TABLE"
      fetch:
        type: "string"
        description: "The fetch mode for the query. NONE means fetch no data, ALL\
          \ means fetch all known results, CHANGES means fetch only those records\
          \ not see in previous requests"
        readOnly: true
        enum:
        - "NONE"
        - "CHANGES"
        - "ALL"
    description: "A definition for how to return the raw results of the query in the\
      \ SearchResponse, e.g. sorted, grouped, limited, etc."
  Row:
    type: "object"
    required:
    - "depth"
    - "groupKey"
    - "values"
    properties:
      groupKey:
        type: "string"
        description: "TODO"
        readOnly: true
      values:
        type: "array"
        description: "The value for this row of data. The values in the list are in\
          \ the same order as the fields in the ResultRequest"
        readOnly: true
        items:
          type: "string"
      depth:
        type: "integer"
        format: "int32"
        example: 0
        description: "The grouping depth, where 0 is the top level of grouping, or\
          \ where there is no grouping"
        readOnly: true
      backgroundColor:
        type: "string"
        readOnly: true
      textColor:
        type: "string"
        readOnly: true
    description: "A row of data in a result set"
  SavePipelineXmlRequest:
    type: "object"
    properties:
      pipeline:
        readOnly: true
        $ref: "#/definitions/DocRef"
      xml:
        type: "string"
        readOnly: true
  ScheduledTimes:
    type: "object"
    properties:
      lastExecutedTime:
        type: "string"
        readOnly: true
      nextScheduledTime:
        type: "string"
        readOnly: true
  ScriptDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      dependencies:
        type: "array"
        items:
          $ref: "#/definitions/DocRef"
      data:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  Search:
    type: "object"
    properties:
      dataSourceRef:
        readOnly: true
        $ref: "#/definitions/DocRef"
      expression:
        readOnly: true
        $ref: "#/definitions/ExpressionOperator"
      componentSettingsMap:
        type: "object"
        readOnly: true
        additionalProperties:
          $ref: "#/definitions/ComponentSettings"
      params:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Param"
      incremental:
        type: "boolean"
        readOnly: true
      storeHistory:
        type: "boolean"
        readOnly: true
      queryInfo:
        type: "string"
        readOnly: true
  SearchBusPollRequest:
    type: "object"
    properties:
      applicationInstanceId:
        type: "string"
        readOnly: true
      searchRequests:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/SearchRequest"
  SearchRequest:
    type: "object"
    required:
    - "dateTimeLocale"
    - "incremental"
    - "key"
    - "query"
    - "resultRequests"
    properties:
      key:
        $ref: "#/definitions/QueryKey"
      query:
        $ref: "#/definitions/Query"
      resultRequests:
        type: "array"
        xml:
          wrapped: true
        items:
          xml:
            name: "resultRequest"
          $ref: "#/definitions/ResultRequest"
      dateTimeLocale:
        type: "string"
        description: "The locale to use when formatting date values in the search\
          \ results. The value is the string form of a java.time.ZoneId"
      incremental:
        type: "boolean"
        description: "If true the response will contain all results found so far,\
          \ typically no results on the first request. Future requests for the same\
          \ query key may return more results. Intended for use on longer running\
          \ searches to allow partial result sets to be returned as soon as they are\
          \ available rather than waiting for the full result set."
      timeout:
        type: "integer"
        format: "int64"
        description: "Set the maximum time (in ms) for the server to wait for a complete\
          \ result set. The timeout applies to both incremental and non incremental\
          \ queries, though the behaviour is slightly different. The timeout will\
          \ make the server wait for which ever comes first out of the query completing\
          \ or the timeout period being reached. If no value is supplied then for\
          \ an incremental query a default value of 0 will be used (i.e. returning\
          \ immediately) and for a non-incremental query the server's default timeout\
          \ period will be used. For an incremental query, if the query has not completed\
          \ by the end of the timeout period, it will return the currently know results\
          \ with complete=false, however for a non-incremental query it will return\
          \ no results, complete=false and details of the timeout in the error field"
    xml:
      name: "searchRequest"
    description: "A request for new search or a follow up request for more data for\
      \ an existing iterative search"
  SearchResponse:
    type: "object"
    required:
    - "highlights"
    properties:
      highlights:
        type: "array"
        xml:
          wrapped: true
        description: "A list of strings to highlight in the UI that should correlate\
          \ with the search query."
        readOnly: true
        items:
          type: "string"
          xml:
            name: "highlight"
      results:
        type: "array"
        xml:
          wrapped: true
        readOnly: true
        items:
          $ref: "#/definitions/Result"
      errors:
        type: "array"
        xml:
          wrapped: true
        description: "A list of errors that occurred in running the query"
        readOnly: true
        items:
          type: "string"
          xml:
            name: "error"
      complete:
        type: "boolean"
        description: "True if the query has returned all known results"
        readOnly: true
    xml:
      name: "searchResponse"
    description: "The response to a search request, that may or may not contain results.\
      \ The results may only be a partial set if an iterative screech was requested"
  SearchTokenRequest:
    type: "object"
    properties:
      pageRequest:
        $ref: "#/definitions/PageRequest"
      sortList:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Sort"
      quickFilter:
        type: "string"
        readOnly: true
  Selection:
    type: "object"
    properties:
      matchAll:
        type: "boolean"
      set:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
  SelectionIndexShardStatus:
    type: "object"
    properties:
      matchAll:
        type: "boolean"
      set:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "CLOSED"
          - "OPEN"
          - "CLOSING"
          - "OPENING"
          - "NEW"
          - "DELETED"
          - "CORRUPT"
  SelectionInteger:
    type: "object"
    properties:
      matchAll:
        type: "boolean"
      set:
        type: "array"
        uniqueItems: true
        items:
          type: "integer"
          format: "int32"
  SelectionLong:
    type: "object"
    properties:
      matchAll:
        type: "boolean"
      set:
        type: "array"
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
  SelectionString:
    type: "object"
    properties:
      matchAll:
        type: "boolean"
      set:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
  SelectionVolumeUseStatus:
    type: "object"
    properties:
      matchAll:
        type: "boolean"
      set:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "ACTIVE"
          - "INACTIVE"
          - "CLOSED"
  SessionDetails:
    type: "object"
    properties:
      userName:
        type: "string"
        readOnly: true
      createMs:
        type: "integer"
        format: "int64"
        readOnly: true
      lastAccessedMs:
        type: "integer"
        format: "int64"
        readOnly: true
      lastAccessedAgent:
        type: "string"
        readOnly: true
      nodeName:
        type: "string"
        readOnly: true
  SessionInfo:
    type: "object"
    properties:
      userName:
        type: "string"
        readOnly: true
      nodeName:
        type: "string"
        readOnly: true
      buildInfo:
        readOnly: true
        $ref: "#/definitions/BuildInfo"
  SetAssignedToRequest:
    type: "object"
    properties:
      annotationIdList:
        type: "array"
        readOnly: true
        items:
          type: "integer"
          format: "int64"
      assignedTo:
        type: "string"
        readOnly: true
  SetStatusRequest:
    type: "object"
    properties:
      annotationIdList:
        type: "array"
        readOnly: true
        items:
          type: "integer"
          format: "int64"
      status:
        type: "string"
        readOnly: true
  SharedElementData:
    type: "object"
    properties:
      input:
        type: "string"
        readOnly: true
      output:
        type: "string"
        readOnly: true
      codeIndicators:
        readOnly: true
        $ref: "#/definitions/Indicators"
      outputIndicators:
        readOnly: true
        $ref: "#/definitions/Indicators"
      formatInput:
        type: "boolean"
        readOnly: true
      formatOutput:
        type: "boolean"
        readOnly: true
  SharedStepData:
    type: "object"
    properties:
      sourceLocation:
        readOnly: true
        $ref: "#/definitions/SourceLocation"
      elementMap:
        type: "object"
        readOnly: true
        additionalProperties:
          $ref: "#/definitions/SharedElementData"
  Size:
    type: "object"
    properties:
      width:
        type: "integer"
        format: "int32"
      height:
        type: "integer"
        format: "int32"
    xml:
      name: "size"
  SolrConnectionConfig:
    type: "object"
    properties:
      useZk:
        type: "boolean"
      instanceType:
        type: "string"
        enum:
        - "SINGLE_NOOE"
        - "SOLR_CLOUD"
      solrUrls:
        type: "array"
        items:
          type: "string"
      zkHosts:
        type: "array"
        items:
          type: "string"
      zkPath:
        type: "string"
    xml:
      name: "connection"
  SolrIndexDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      collection:
        type: "string"
      fields:
        type: "array"
        items:
          $ref: "#/definitions/SolrIndexField"
      retentionExpression:
        $ref: "#/definitions/ExpressionOperator"
      solrConnectionConfig:
        $ref: "#/definitions/SolrConnectionConfig"
      deletedFields:
        type: "array"
        items:
          $ref: "#/definitions/SolrIndexField"
      solrSynchState:
        $ref: "#/definitions/SolrSynchState"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  SolrIndexField:
    type: "object"
    properties:
      fieldUse:
        type: "string"
        enum:
        - "ID"
        - "BOOLEAN_FIELD"
        - "INTEGER_FIELD"
        - "LONG_FIELD"
        - "FLOAT_FIELD"
        - "DOUBLE_FIELD"
        - "DATE_FIELD"
        - "FIELD"
        - "NUMERIC_FIELD"
      fieldName:
        type: "string"
      fieldType:
        type: "string"
      defaultValue:
        type: "string"
      stored:
        type: "boolean"
      indexed:
        type: "boolean"
      uninvertible:
        type: "boolean"
      docValues:
        type: "boolean"
      multiValued:
        type: "boolean"
      required:
        type: "boolean"
      omitNorms:
        type: "boolean"
      omitTermFreqAndPositions:
        type: "boolean"
      omitPositions:
        type: "boolean"
      termVectors:
        type: "boolean"
      termPositions:
        type: "boolean"
      termOffsets:
        type: "boolean"
      termPayloads:
        type: "boolean"
      sortMissingFirst:
        type: "boolean"
      sortMissingLast:
        type: "boolean"
      supportedConditions:
        type: "array"
        items:
          type: "string"
          enum:
          - "CONTAINS"
          - "EQUALS"
          - "GREATER_THAN"
          - "GREATER_THAN_OR_EQUAL_TO"
          - "LESS_THAN"
          - "LESS_THAN_OR_EQUAL_TO"
          - "BETWEEN"
          - "IN"
          - "IN_DICTIONARY"
          - "IN_FOLDER"
          - "IS_DOC_REF"
          - "IS_NULL"
          - "IS_NOT_NULL"
  SolrSynchState:
    type: "object"
    properties:
      lastSynchronized:
        type: "integer"
        format: "int64"
        readOnly: true
      messages:
        type: "array"
        readOnly: true
        items:
          type: "string"
  Sort:
    type: "object"
    required:
    - "direction"
    - "order"
    properties:
      order:
        type: "integer"
        format: "int32"
        example: 0
        description: "Where multiple fields are sorted this value describes the sort\
          \ order, with 0 being the first field to sort on"
        readOnly: true
      direction:
        type: "string"
        example: "ASCENDING"
        description: "The direction to sort in, ASCENDING or DESCENDING"
        readOnly: true
        enum:
        - "ASCENDING"
        - "DESCENDING"
    description: "Describes the sorting applied to a field"
  SourceConfig:
    type: "object"
    properties:
      maxCharactersInPreviewFetch:
        type: "integer"
        format: "int64"
        description: "The maximum number of characters of data to display in the Data\
          \ Preview pane."
        minimum: 1
      maxCharactersPerFetch:
        type: "integer"
        format: "int64"
        description: "The maximum number of characters of data to display in the Source\
          \ View editor at at time."
        minimum: 1
      maxCharactersToCompleteLine:
        type: "integer"
        format: "int64"
        description: "When displaying multi-line data in the Data Preview or Source\
          \ views, the viewer will attempt to always show complete lines. It will\
          \ go past the requested range by up to this many characters in order to\
          \ complete the line."
        minimum: 0
  SourceLocation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      childType:
        type: "string"
        readOnly: true
      partNo:
        type: "integer"
        format: "int64"
        readOnly: true
      segmentNo:
        type: "integer"
        format: "int64"
        readOnly: true
      dataRange:
        readOnly: true
        $ref: "#/definitions/DataRange"
      highlight:
        readOnly: true
        $ref: "#/definitions/TextRange"
      truncateToWholeLines:
        type: "boolean"
        readOnly: true
  SplashConfig:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "If you would like users to see a splash screen on login."
      title:
        type: "string"
        description: "The title of the splash screen popup."
      body:
        type: "string"
        description: "The HTML to display in the splash screen."
      version:
        type: "string"
        description: "The version of the splash screen message."
  SplitLayoutConfig:
    allOf:
    - $ref: "#/definitions/LayoutConfig"
    - type: "object"
      properties:
        preferredSize:
          readOnly: true
          $ref: "#/definitions/Size"
        dimension:
          type: "integer"
          format: "int32"
          readOnly: true
        children:
          type: "array"
          xml:
            wrapped: true
          readOnly: true
          items:
            $ref: "#/definitions/LayoutConfig"
      xml:
        name: "splitLayout"
  StatisticField:
    type: "object"
    properties:
      fieldName:
        type: "string"
  StatisticStoreDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      statisticType:
        type: "string"
        enum:
        - "COUNT"
        - "VALUE"
      rollUpType:
        type: "string"
        enum:
        - "NONE"
        - "ALL"
        - "CUSTOM"
      precision:
        type: "integer"
        format: "int64"
      enabled:
        type: "boolean"
      config:
        $ref: "#/definitions/StatisticsDataSourceData"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  StatisticsDataSourceData:
    type: "object"
    properties:
      fields:
        type: "array"
        items:
          $ref: "#/definitions/StatisticField"
      customRollUpMasks:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/CustomRollUpMask"
  StatisticsDataSourceFieldChangeRequest:
    type: "object"
    properties:
      oldStatisticsDataSourceData:
        readOnly: true
        $ref: "#/definitions/StatisticsDataSourceData"
      newStatisticsDataSourceData:
        readOnly: true
        $ref: "#/definitions/StatisticsDataSourceData"
  StepLocation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      partNo:
        type: "integer"
        format: "int64"
        readOnly: true
      recordNo:
        type: "integer"
        format: "int64"
        readOnly: true
  SteppingFilterSettings:
    type: "object"
    properties:
      skipToSeverity:
        type: "string"
        enum:
        - "INFO"
        - "WARNING"
        - "ERROR"
        - "FATAL_ERROR"
      skipToOutput:
        type: "string"
        enum:
        - "NOT_EMPTY"
        - "EMPTY"
      filters:
        type: "array"
        items:
          $ref: "#/definitions/XPathFilter"
  SteppingResult:
    type: "object"
    properties:
      stepFilterMap:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/SteppingFilterSettings"
      stepLocation:
        $ref: "#/definitions/StepLocation"
      stepData:
        $ref: "#/definitions/SharedStepData"
      currentStreamOffset:
        type: "integer"
        format: "int32"
      foundRecord:
        type: "boolean"
      generalErrors:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
  StoredError:
    type: "object"
    properties:
      severity:
        type: "string"
        readOnly: true
        enum:
        - "INFO"
        - "WARNING"
        - "ERROR"
        - "FATAL_ERROR"
      location:
        readOnly: true
        $ref: "#/definitions/Location"
      elementId:
        type: "string"
        readOnly: true
      message:
        type: "string"
        readOnly: true
  StoredQuery:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      dashboardUuid:
        type: "string"
      componentId:
        type: "string"
      name:
        type: "string"
      data:
        type: "string"
      favourite:
        type: "boolean"
      query:
        $ref: "#/definitions/Query"
  StreamLocation:
    allOf:
    - $ref: "#/definitions/Location"
    - type: "object"
      properties:
        streamNo:
          type: "integer"
          format: "int64"
          readOnly: true
        lineNo:
          type: "integer"
          format: "int32"
          readOnly: true
        colNo:
          type: "integer"
          format: "int32"
          readOnly: true
  StreamingOutput:
    type: "object"
  StringCriteria:
    type: "object"
    properties:
      string:
        type: "string"
      stringUpper:
        type: "string"
      matchStyle:
        type: "string"
        enum:
        - "Wild"
        - "WildStart"
        - "WildEnd"
        - "WildStartAndEnd"
      caseInsensitive:
        type: "boolean"
      matchNull:
        type: "boolean"
  StroomDuration:
    type: "object"
  StroomStatsStoreDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      statisticType:
        type: "string"
        enum:
        - "COUNT"
        - "VALUE"
      rollUpType:
        type: "string"
        enum:
        - "NONE"
        - "ALL"
        - "CUSTOM"
      precision:
        type: "string"
        enum:
        - "SECOND"
        - "MINUTE"
        - "HOUR"
        - "DAY"
        - "FOREVER"
      enabled:
        type: "boolean"
      config:
        $ref: "#/definitions/StroomStatsStoreEntityData"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  StroomStatsStoreEntityData:
    type: "object"
    properties:
      fields:
        type: "array"
        items:
          $ref: "#/definitions/StatisticField"
      customRollUpMasks:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/CustomRollUpMask"
  StroomStatsStoreFieldChangeRequest:
    type: "object"
    properties:
      oldEntityData:
        readOnly: true
        $ref: "#/definitions/StroomStatsStoreEntityData"
      newEntityData:
        readOnly: true
        $ref: "#/definitions/StroomStatsStoreEntityData"
  Summary:
    allOf:
    - $ref: "#/definitions/Marker"
    - type: "object"
      properties:
        severity:
          type: "string"
          readOnly: true
          enum:
          - "INFO"
          - "WARNING"
          - "ERROR"
          - "FATAL_ERROR"
        count:
          type: "integer"
          format: "int32"
          readOnly: true
        total:
          type: "integer"
          format: "int32"
          readOnly: true
        expander:
          readOnly: true
          $ref: "#/definitions/Expander"
  SystemInfoResult:
    type: "object"
    required:
    - "name"
    properties:
      description:
        type: "string"
        readOnly: true
      details:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "object"
      name:
        type: "string"
        readOnly: true
  TabConfig:
    type: "object"
    properties:
      id:
        type: "string"
        readOnly: true
      visible:
        type: "boolean"
    xml:
      name: "tab"
  TabLayoutConfig:
    allOf:
    - $ref: "#/definitions/LayoutConfig"
    - type: "object"
      properties:
        preferredSize:
          readOnly: true
          $ref: "#/definitions/Size"
        tabs:
          type: "array"
          xml:
            wrapped: true
          items:
            $ref: "#/definitions/TabConfig"
        selected:
          type: "integer"
          format: "int32"
      xml:
        name: "tabLayout"
  TableComponentSettings:
    allOf:
    - $ref: "#/definitions/ComponentSettings"
    - type: "object"
      required:
      - "conditionalFormattingRules"
      - "fields"
      - "modelVersion"
      - "queryId"
      properties:
        queryId:
          type: "string"
          description: "TODO"
          readOnly: true
        fields:
          type: "array"
          readOnly: true
          items:
            $ref: "#/definitions/Field"
        extractValues:
          type: "boolean"
          description: "TODO"
          readOnly: true
        extractionPipeline:
          readOnly: true
          $ref: "#/definitions/DocRef"
        maxResults:
          type: "array"
          example: "1000,10,1"
          description: "Defines the maximum number of results to return at each grouping\
            \ level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level\
            \ 1 and 1 at level 2. In the absence of this field system defaults will\
            \ apply"
          readOnly: true
          items:
            type: "integer"
            format: "int32"
        showDetail:
          type: "boolean"
          description: "When grouping is used a value of true indicates that the results\
            \ will include the full detail of any results aggregated into a group\
            \ as well as their aggregates. A value of false will only include the\
            \ aggregated values for each group. Defaults to false."
          readOnly: true
        conditionalFormattingRules:
          type: "array"
          items:
            $ref: "#/definitions/ConditionalFormattingRule"
        modelVersion:
          type: "string"
  TableResult:
    allOf:
    - $ref: "#/definitions/Result"
    - type: "object"
      required:
      - "fields"
      - "resultRange"
      - "rows"
      properties:
        fields:
          type: "array"
          readOnly: true
          items:
            $ref: "#/definitions/Field"
        rows:
          type: "array"
          readOnly: true
          items:
            $ref: "#/definitions/Row"
        resultRange:
          readOnly: true
          $ref: "#/definitions/OffsetRange"
        totalResults:
          type: "integer"
          format: "int32"
          description: "The total number of results in this result set"
          readOnly: true
      description: "Object for describing a set of results in a table form that supports\
        \ grouped data"
  TableResultRequest:
    allOf:
    - $ref: "#/definitions/ComponentResultRequest"
    - type: "object"
      properties:
        tableSettings:
          readOnly: true
          $ref: "#/definitions/TableSettings"
        requestedRange:
          readOnly: true
          $ref: "#/definitions/OffsetRange"
        openGroups:
          type: "array"
          readOnly: true
          uniqueItems: true
          items:
            type: "string"
  TableSettings:
    type: "object"
    required:
    - "conditionalFormattingRules"
    - "fields"
    - "modelVersion"
    - "queryId"
    properties:
      queryId:
        type: "string"
        description: "TODO"
        readOnly: true
      fields:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Field"
      extractValues:
        type: "boolean"
        description: "TODO"
        readOnly: true
      extractionPipeline:
        readOnly: true
        $ref: "#/definitions/DocRef"
      maxResults:
        type: "array"
        example: "1000,10,1"
        description: "Defines the maximum number of results to return at each grouping\
          \ level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level\
          \ 1 and 1 at level 2. In the absence of this field system defaults will\
          \ apply"
        readOnly: true
        items:
          type: "integer"
          format: "int32"
      showDetail:
        type: "boolean"
        description: "When grouping is used a value of true indicates that the results\
          \ will include the full detail of any results aggregated into a group as\
          \ well as their aggregates. A value of false will only include the aggregated\
          \ values for each group. Defaults to false."
        readOnly: true
      conditionalFormattingRules:
        type: "array"
        items:
          $ref: "#/definitions/ConditionalFormattingRule"
      modelVersion:
        type: "string"
    description: "An object to describe how the query results should be returned,\
      \ including which fields should be included and what sorting, grouping, filtering,\
      \ limiting, etc. should be applied"
  TaskId:
    type: "object"
    properties:
      id:
        type: "string"
      parentId:
        $ref: "#/definitions/TaskId"
  TaskProgress:
    type: "object"
    properties:
      id:
        $ref: "#/definitions/TaskId"
      taskName:
        type: "string"
      taskInfo:
        type: "string"
      userName:
        type: "string"
      threadName:
        type: "string"
      nodeName:
        type: "string"
      submitTimeMs:
        type: "integer"
        format: "int64"
      timeNowMs:
        type: "integer"
        format: "int64"
      expander:
        $ref: "#/definitions/Expander"
      filterMatchState:
        type: "string"
        enum:
        - "MATCHED"
        - "NOT_MATCHED"
  TaskProgressResponse:
    type: "object"
    properties:
      values:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/TaskProgress"
      pageResponse:
        readOnly: true
        $ref: "#/definitions/PageResponse"
  TerminateTaskProgressRequest:
    type: "object"
    properties:
      criteria:
        readOnly: true
        $ref: "#/definitions/FindTaskCriteria"
      kill:
        type: "boolean"
        readOnly: true
  TextComponentSettings:
    allOf:
    - $ref: "#/definitions/ComponentSettings"
    - type: "object"
      properties:
        tableId:
          type: "string"
          readOnly: true
        streamIdField:
          readOnly: true
          $ref: "#/definitions/Field"
        partNoField:
          readOnly: true
          $ref: "#/definitions/Field"
        recordNoField:
          readOnly: true
          $ref: "#/definitions/Field"
        lineFromField:
          readOnly: true
          $ref: "#/definitions/Field"
        colFromField:
          readOnly: true
          $ref: "#/definitions/Field"
        lineToField:
          readOnly: true
          $ref: "#/definitions/Field"
        colToField:
          readOnly: true
          $ref: "#/definitions/Field"
        pipeline:
          readOnly: true
          $ref: "#/definitions/DocRef"
        showAsHtml:
          type: "boolean"
          readOnly: true
        showStepping:
          type: "boolean"
          readOnly: true
        modelVersion:
          type: "string"
          readOnly: true
  TextConverterDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      data:
        type: "string"
      converterType:
        type: "string"
        enum:
        - "NONE"
        - "DATA_SPLITTER"
        - "XML_FRAGMENT"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  TextField:
    allOf:
    - $ref: "#/definitions/AbstractField"
    - type: "object"
      properties: {}
  TextRange:
    type: "object"
    properties:
      from:
        readOnly: true
        $ref: "#/definitions/Location"
      to:
        readOnly: true
        $ref: "#/definitions/Location"
  ThemeConfig:
    type: "object"
    properties:
      backgroundAttachment:
        type: "string"
        description: "GUI"
        readOnly: true
      backgroundColor:
        type: "string"
        description: "GUI"
        readOnly: true
      backgroundImage:
        type: "string"
        description: "GUI"
        readOnly: true
      backgroundPosition:
        type: "string"
        description: "GUI"
        readOnly: true
      backgroundRepeat:
        type: "string"
        description: "GUI"
        readOnly: true
      backgroundOpacity:
        type: "string"
        description: "GUI"
        readOnly: true
      tubeVisible:
        type: "string"
        description: "GUI"
        readOnly: true
      tubeOpacity:
        type: "string"
        description: "GUI"
        readOnly: true
      labelColours:
        type: "string"
        description: "A comma separated list of KV pairs to provide colours for labels."
        readOnly: true
  TimeZone:
    type: "object"
    required:
    - "use"
    properties:
      use:
        type: "string"
        description: "How the time zone will be specified, e.g. from provided client\
          \ 'Local' time, 'UTC', a recognised timezone 'Id' or an 'Offset' from UTC\
          \ in hours and minutes."
        readOnly: true
        enum:
        - "LOCAL"
        - "UTC"
        - "ID"
        - "OFFSET"
      id:
        type: "string"
        example: "GMT"
        description: "The id of the time zone, conforming to java.time.ZoneId"
        readOnly: true
      offsetHours:
        type: "integer"
        format: "int32"
        example: -1
        description: "The number of hours this timezone is offset from UTC"
        readOnly: true
      offsetMinutes:
        type: "integer"
        format: "int32"
        example: -30
        description: "The number of minutes this timezone is offset from UTC"
        readOnly: true
    description: "The timezone to apply to a date time value"
  Token:
    type: "object"
    properties:
      comments:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      data:
        type: "string"
      enabled:
        type: "boolean"
      expiresOnMs:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int32"
      tokenType:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      userEmail:
        type: "string"
      userId:
        type: "string"
      version:
        type: "integer"
        format: "int32"
  TokenConfig:
    type: "object"
    required:
    - "algorithm"
    - "jwsIssuer"
    - "timeUntilExpirationForEmailResetToken"
    - "timeUntilExpirationForUserToken"
    properties:
      algorithm:
        type: "string"
        description: "The cryptographic algorithm used in the Json Web Signatures.\
          \ Valid values can be found at https://openid.net/specs/draft-jones-json-web-signature-04.html#Signing"
      defaultApiKeyExpiryInMinutes:
        type: "integer"
        format: "int64"
        description: "The default API key expiry time"
      jwsIssuer:
        type: "string"
        description: "The Issuer value used in Json Web Tokens."
      timeUntilExpirationForEmailResetToken:
        description: "The time before an email reset token will expire."
        $ref: "#/definitions/StroomDuration"
      timeUntilExpirationForUserToken:
        description: "The time before a user token will expire."
        $ref: "#/definitions/StroomDuration"
  TokenRequest:
    type: "object"
    properties:
      grant_type:
        type: "string"
        readOnly: true
      client_id:
        type: "string"
        readOnly: true
      client_secret:
        type: "string"
        readOnly: true
      redirect_uri:
        type: "string"
        readOnly: true
      code:
        type: "string"
        readOnly: true
  UiConfig:
    type: "object"
    properties:
      aboutHtml:
        type: "string"
        description: "The about message that is displayed when selecting Help -> About.\
          \ The about message is in HTML format."
      activity:
        $ref: "#/definitions/ActivityConfig"
      defaultMaxResults:
        type: "string"
        description: "The default maximum number of search results to return to the\
          \ dashboard, unless the user requests lower values."
      helpUrl:
        type: "string"
        description: "The URL of hosted help files."
      htmlTitle:
        type: "string"
        description: "The title to use for the application in the browser."
      maintenanceMessage:
        type: "string"
        description: "Provide a warning message to users about an outage or other\
          \ significant event."
      namePattern:
        type: "string"
        description: "The regex pattern for entity names."
      oncontextmenu:
        type: "string"
        description: "Determines the behaviour of the browser built-in context menu.\
          \ This property is for developer use only. Set to 'return false;' to see\
          \ Stroom's context menu. Set to 'return true;' to see the standard browser\
          \ menu."
        pattern: "^return (true|false);$"
      process:
        $ref: "#/definitions/ProcessConfig"
      query:
        $ref: "#/definitions/QueryConfig"
      source:
        $ref: "#/definitions/SourceConfig"
      splash:
        $ref: "#/definitions/SplashConfig"
      theme:
        $ref: "#/definitions/ThemeConfig"
      uiPreferences:
        $ref: "#/definitions/UiPreferences"
      url:
        $ref: "#/definitions/UrlConfig"
      welcomeHtml:
        type: "string"
        description: "The welcome message that is displayed in the welcome tab when\
          \ logging in to Stroom. The welcome message is in HTML format."
  UiPreferences:
    type: "object"
    properties:
      dateFormat:
        type: "string"
        description: "The date format to use in the UI"
  UpdateAccountRequest:
    type: "object"
    properties:
      account:
        readOnly: true
        $ref: "#/definitions/Account"
      password:
        type: "string"
        readOnly: true
      confirmPassword:
        type: "string"
        readOnly: true
  UploadDataRequest:
    type: "object"
    properties:
      key:
        readOnly: true
        $ref: "#/definitions/ResourceKey"
      feedName:
        type: "string"
        readOnly: true
      streamTypeName:
        type: "string"
        readOnly: true
      effectiveMs:
        type: "integer"
        format: "int64"
        readOnly: true
      metaData:
        type: "string"
        readOnly: true
      fileName:
        type: "string"
        readOnly: true
  UrlConfig:
    type: "object"
    properties:
      apiKeys:
        type: "string"
        description: "The path to the API Keys screen."
      changepassword:
        type: "string"
        description: "The path to the Change Password screen."
      users:
        type: "string"
        description: "The path to the Users screen."
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      version:
        type: "integer"
        format: "int32"
      createTimeMs:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateTimeMs:
        type: "integer"
        format: "int64"
      updateUser:
        type: "string"
      name:
        type: "string"
      uuid:
        type: "string"
      group:
        type: "boolean"
      enabled:
        type: "boolean"
  UserAndPermissions:
    type: "object"
    properties:
      userId:
        type: "string"
        readOnly: true
      permissions:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          type: "string"
  ValidateExpressionResult:
    type: "object"
    properties:
      ok:
        type: "boolean"
        readOnly: true
      string:
        type: "string"
        readOnly: true
  VisComponentSettings:
    allOf:
    - $ref: "#/definitions/ComponentSettings"
    - type: "object"
      properties:
        tableId:
          type: "string"
          readOnly: true
        visualisation:
          readOnly: true
          $ref: "#/definitions/DocRef"
        json:
          type: "string"
          readOnly: true
        tableSettings:
          readOnly: true
          $ref: "#/definitions/TableComponentSettings"
  VisResult:
    allOf:
    - $ref: "#/definitions/Result"
    - type: "object"
      properties:
        jsonData:
          type: "string"
          readOnly: true
        dataPoints:
          type: "integer"
          format: "int64"
      description: "Base object for describing a set of result data"
  VisResultRequest:
    allOf:
    - $ref: "#/definitions/ComponentResultRequest"
    - type: "object"
      properties:
        visDashboardSettings:
          readOnly: true
          $ref: "#/definitions/VisComponentSettings"
        requestedRange:
          readOnly: true
          $ref: "#/definitions/OffsetRange"
  VisualisationDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      functionName:
        type: "string"
      scriptRef:
        $ref: "#/definitions/DocRef"
      settings:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  XPathFilter:
    type: "object"
    properties:
      path:
        type: "string"
      matchType:
        type: "string"
        enum:
        - "EXISTS"
        - "CONTAINS"
        - "EQUALS"
        - "UNIQUE"
      value:
        type: "string"
      ignoreCase:
        type: "boolean"
      uniqueValues:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Rec"
  XmlSchemaDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      namespaceURI:
        type: "string"
      data:
        type: "string"
      systemId:
        type: "string"
      deprecated:
        type: "boolean"
      schemaGroup:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
  XsltDTO:
    type: "object"
    required:
    - "name"
    - "type"
    - "uuid"
    properties:
      type:
        type: "string"
        example: "StroomStatsStore"
        description: "The type of the 'document' that this DocRef refers to"
      uuid:
        type: "string"
        example: "9f6184b4-bd78-48bc-b0cd-6e51a357f6a6"
        description: "The unique identifier for this 'document'"
      name:
        type: "string"
        example: "MyStatistic"
        description: "The name for the data source"
      description:
        type: "string"
        readOnly: true
      data:
        type: "string"
        readOnly: true
    xml:
      name: "doc"
    description: "A class for describing a unique reference to a 'document' in stroom.\
      \  A 'document' is an entity in stroom such as a data source dictionary or pipeline."
  XsltDoc:
    type: "object"
    required:
    - "createTimeMs"
    - "updateTimeMs"
    properties:
      type:
        type: "string"
      uuid:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createUser:
        type: "string"
      updateUser:
        type: "string"
      description:
        type: "string"
      data:
        type: "string"
      createTimeMs:
        type: "integer"
        format: "int64"
      updateTimeMs:
        type: "integer"
        format: "int64"
