openapi: 3.0.1
info:
  contact:
    name: stroom
    url: https://github.com/gchq/stroom
  description: Various APIs for interacting with Stroom and its data
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Stroom API
  version: v1/v2
paths:
  /account/v1:
    get:
      operationId: list_5
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResultPage'
          description: default response
    post:
      operationId: create_10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
  /account/v1/search:
    post:
      operationId: search_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchAccountRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResultPage'
          description: default response
  /account/v1/{id}:
    delete:
      operationId: delete_10
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
    get:
      operationId: read_6
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: default response
    put:
      operationId: update_21
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /activity/v1:
    get:
      operationId: list
      parameters:
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageActivity'
          description: default response
    post:
      operationId: create
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: default response
  /activity/v1/acknowledge:
    post:
      operationId: acknowledgeSplash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcknowledgeSplashRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /activity/v1/current:
    get:
      operationId: getCurrentActivity
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: default response
    put:
      operationId: setCurrentActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: default response
  /activity/v1/fields:
    get:
      operationId: listFieldDefinitions
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilterFieldDefinition'
          description: default response
  /activity/v1/validate:
    post:
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityValidationResult'
          description: default response
  /activity/v1/{id}:
    delete:
      operationId: delete
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
    get:
      operationId: read
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: default response
    put:
      operationId: update
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: default response
  /annotation/v1:
    get:
      operationId: get
      parameters:
      - in: query
        name: annotationId
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationDetail'
          description: default response
    post:
      operationId: createEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEntryRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationDetail'
          description: default response
  /annotation/v1/comment:
    get:
      operationId: getComment
      parameters:
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /annotation/v1/link:
    post:
      operationId: link
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventLink'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventId'
          description: default response
  /annotation/v1/linkedEvents:
    get:
      operationId: getLinkedEvents
      parameters:
      - in: query
        name: annotationId
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventId'
          description: default response
  /annotation/v1/setAssignedTo:
    post:
      operationId: setAssignedTo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAssignedToRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
  /annotation/v1/setStatus:
    post:
      operationId: setStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetStatusRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
  /annotation/v1/status:
    get:
      operationId: getStatus
      parameters:
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /annotation/v1/unlink:
    post:
      operationId: unlink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventLink'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventId'
          description: default response
  /appPermissions/v1:
    get:
      operationId: getAllPermissionNames
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /appPermissions/v1/byName/{userName}:
    get:
      operationId: getPermissionNamesForUserName
      parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /appPermissions/v1/{userUuid}:
    get:
      operationId: getPermissionNamesForUser
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /appPermissions/v1/{userUuid}/{permission}:
    delete:
      operationId: removePermission_1
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: permission
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
    post:
      operationId: addPermission_1
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: permission
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /authentication/v1/logout:
    get:
      operationId: logout
      parameters:
      - in: query
        name: redirect_uri
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /authentication/v1/needsPasswordChange:
    get:
      operationId: needsPasswordChange
      parameters:
      - in: query
        name: email
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /authentication/v1/noauth/changePassword:
    post:
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
          description: default response
  /authentication/v1/noauth/confirmPassword:
    post:
      operationId: confirmPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmPasswordRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmPasswordResponse'
          description: default response
  /authentication/v1/noauth/fetchPasswordPolicy:
    get:
      operationId: fetchPasswordPolicy
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordPolicyConfig'
          description: default response
  /authentication/v1/noauth/getAuthenticationState:
    get:
      operationId: getAuthenticationState
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationState'
          description: default response
  /authentication/v1/noauth/login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: default response
  /authentication/v1/noauth/reset/{email}:
    get:
      operationId: resetEmail
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /authentication/v1/resetPassword:
    post:
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
          description: default response
  /authorisation/v1/createUser:
    post:
      operationId: createUser
      parameters:
      - in: query
        name: id
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /authorisation/v1/hasPermission:
    post:
      operationId: hasPermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPermissionRequest'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /authorisation/v1/isAuthorised:
    post:
      operationId: isAuthorised
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /authorisation/v1/setUserStatus:
    get:
      operationId: setUserStatus
      parameters:
      - in: query
        name: userId
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /cache/v1:
    delete:
      operationId: clear
      parameters:
      - in: query
        name: cacheName
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
    get:
      operationId: list_1
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /cache/v1/info:
    get:
      operationId: info
      parameters:
      - in: query
        name: cacheName
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheInfoResponse'
          description: default response
  /cluster/lock/v1/keepALive/{nodeName}:
    put:
      operationId: keepLockAlive
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterLockKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /cluster/lock/v1/release/{nodeName}:
    put:
      operationId: releaseLock
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterLockKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /cluster/lock/v1/try/{nodeName}:
    put:
      operationId: tryLock
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterLockKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /config/v1:
    post:
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigProperty'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigProperty'
          description: default response
  /config/v1/clusterProperties/{propertyName}:
    put:
      operationId: update_1
      parameters:
      - in: path
        name: propertyName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigProperty'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigProperty'
          description: default response
  /config/v1/clusterProperties/{propertyName}/yamlOverrideValue/{nodeName}:
    get:
      operationId: getYamlValueByNodeAndName
      parameters:
      - in: path
        name: propertyName
        required: true
        schema:
          type: string
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverrideValueString'
          description: default response
  /config/v1/noauth/fetchUiConfig:
    get:
      operationId: fetchUiConfig
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiConfig'
          description: default response
  /config/v1/nodeProperties/{nodeName}:
    post:
      operationId: listByNode
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfigCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigResponse'
          description: default response
  /config/v1/properties:
    post:
      operationId: list_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfigCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigResponse'
          description: default response
  /config/v1/properties/{propertyName}:
    get:
      operationId: getPropertyByName
      parameters:
      - in: path
        name: propertyName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigProperty'
          description: default response
  /content/v1/confirmImport:
    post:
      operationId: confirmImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImportState'
          description: default response
  /content/v1/export:
    post:
      operationId: exportContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRefs'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGeneration'
          description: default response
  /content/v1/fetchDependencies:
    post:
      operationId: fetchDependencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageDependency'
          description: default response
  /content/v1/import:
    post:
      operationId: importContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportConfigRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceKey'
          description: default response
  /dashboard/v1/downloadQuery:
    post:
      operationId: downloadQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadQueryRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGeneration'
          description: default response
  /dashboard/v1/downloadSearchResults:
    post:
      operationId: downloadSearchResults
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadSearchResultsRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGeneration'
          description: default response
  /dashboard/v1/fetchTimeZones:
    get:
      operationId: fetchTimeZones
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /dashboard/v1/functions:
    get:
      operationId: fetchFunctions
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FunctionSignature'
          description: default response
  /dashboard/v1/poll:
    post:
      operationId: poll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchBusPollRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardSearchResponse'
                uniqueItems: true
          description: default response
  /dashboard/v1/validateExpression:
    post:
      operationId: validateExpression
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateExpressionResult'
          description: default response
  /dashboard/v1/{uuid}:
    get:
      operationId: fetch_1
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDoc'
          description: default response
    put:
      operationId: update_2
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDoc'
          description: default response
  /data/v1/download:
    post:
      operationId: download
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindMetaCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGeneration'
          description: default response
  /data/v1/fetch:
    post:
      operationId: fetch_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchDataRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractFetchDataResult'
          description: default response
  /data/v1/upload:
    post:
      operationId: upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadDataRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceKey'
          description: default response
  /data/v1/{id}/info:
    get:
      operationId: viewInfo
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataInfoSection'
          description: default response
  /data/v1/{id}/parts/{partNo}/child-types:
    get:
      operationId: getChildStreamTypes
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: partNo
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                uniqueItems: true
          description: default response
  /dataRetentionRules/v1:
    get:
      operationId: fetch_2
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataRetentionRules'
          description: default response
    put:
      operationId: update_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRetentionRules'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataRetentionRules'
          description: default response
  /dataRetentionRules/v1/impactSummary:
    post:
      operationId: getRetentionDeletionSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRetentionDeleteSummaryRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataRetentionDeleteSummaryResponse'
          description: default response
  /dataRetentionRules/v1/impactSummary/{queryId}:
    delete:
      operationId: cancelQuery
      parameters:
      - in: path
        name: queryId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /dataSource/v1/fetchFields:
    post:
      operationId: fetchFields
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AbstractField'
          description: default response
  /dbStatus/v1:
    get:
      operationId: getSystemTableStatus
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageDBTableStatus'
          description: default response
    post:
      operationId: findSystemTableStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindDBTableCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageDBTableStatus'
          description: default response
  /dictionary/v1/download:
    post:
      operationId: download_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGeneration'
          description: default response
  /dictionary/v1/{uuid}:
    get:
      operationId: fetch_4
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictionaryDoc'
          description: default response
    put:
      operationId: update_6
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DictionaryDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictionaryDoc'
          description: default response
  /dictionary/v2/export:
    post:
      operationId: exportDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Base64EncodedDocumentData'
          description: default response
  /dictionary/v2/import:
    post:
      operationId: importDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Base64EncodedDocumentData'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /dictionary/v2/list:
    get:
      operationId: listDocuments
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocRef'
                uniqueItems: true
          description: default response
  /docPermissions/v1/forDoc/{docUuid}:
    delete:
      operationId: clearDocumentPermissions
      parameters:
      - in: path
        name: docUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
    get:
      operationId: getPermissionsForDocument
      parameters:
      - in: path
        name: docUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /docPermissions/v1/forDocForUser/{docUuid}/{userUuid}:
    delete:
      operationId: removePermissionForDocumentForUser
      parameters:
      - in: path
        name: docUuid
        required: true
        schema:
          type: string
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
    get:
      operationId: getPermissionsForDocumentForUser
      parameters:
      - in: path
        name: docUuid
        required: true
        schema:
          type: string
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /docPermissions/v1/forDocForUser/{docUuid}/{userUuid}/{permissionName}:
    delete:
      operationId: removePermission
      parameters:
      - in: path
        name: docUuid
        required: true
        schema:
          type: string
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: permissionName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
    post:
      operationId: addPermission
      parameters:
      - in: path
        name: docUuid
        required: true
        schema:
          type: string
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: permissionName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /docPermissions/v1/forDocType/{docType}:
    get:
      operationId: getPermissionForDocType
      parameters:
      - in: path
        name: docType
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /elements/v1/elementProperties:
    get:
      operationId: getElementProperties
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /elements/v1/elements:
    get:
      operationId: getElements
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /entityEvent/v1/{nodeName}:
    put:
      operationId: fireEvent
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityEvent'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /explorer/v1/all:
    get:
      operationId: getExplorerTree
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v1/copy:
    post:
      operationId: copyDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyOp'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v1/create:
    post:
      operationId: createDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOp'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v1/delete:
    delete:
      operationId: deleteDocument
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v1/docRefTypes:
    get:
      operationId: getDocRefTypes
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v1/info/{type}/{uuid}:
    get:
      operationId: getDocInfo
      parameters:
      - in: path
        name: type
        required: true
        schema:
          type: string
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRefInfo'
          description: default response
  /explorer/v1/move:
    put:
      operationId: moveDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveOp'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v1/rename:
    put:
      operationId: renameDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameOp'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v1/search:
    get:
      operationId: search
      parameters:
      - in: query
        name: searchTerm
        schema:
          type: string
      - in: query
        name: pageOffset
        schema:
          type: integer
          format: int64
      - in: query
        name: pageSize
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /explorer/v2/copy:
    post:
      operationId: copy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplorerServiceCopyRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResult'
          description: default response
  /explorer/v2/create:
    post:
      operationId: create_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplorerServiceCreateRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /explorer/v2/delete:
    delete:
      operationId: delete_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplorerServiceDeleteRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResult'
          description: default response
  /explorer/v2/fetchDocRefs:
    post:
      operationId: fetchDocRefs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DocRef'
              uniqueItems: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocRef'
                uniqueItems: true
          description: default response
  /explorer/v2/fetchDocumentTypes:
    get:
      operationId: fetchDocumentTypes
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypes'
          description: default response
  /explorer/v2/fetchExplorerNodes:
    post:
      operationId: fetch_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindExplorerNodeCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchExplorerNodeResult'
          description: default response
  /explorer/v2/fetchExplorerPermissions:
    post:
      operationId: fetchExplorerPermissions
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ExplorerNode'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExplorerNodePermissions'
                uniqueItems: true
          description: default response
  /explorer/v2/info:
    post:
      operationId: info_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRefInfo'
          description: default response
  /explorer/v2/move:
    put:
      operationId: move
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplorerServiceMoveRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResult'
          description: default response
  /explorer/v2/rename:
    put:
      operationId: rename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplorerServiceRenameRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /export/v1:
    get:
      operationId: export
      responses:
        default:
          content:
            application/octet-stream: {}
          description: default response
  /feed/v1/fetchSupportedEncodings:
    get:
      operationId: fetchSupportedEncodings
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /feed/v1/{uuid}:
    get:
      operationId: fetch_6
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedDoc'
          description: default response
    put:
      operationId: update_7
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedDoc'
          description: default response
  /feedStatus/v1/getFeedStatus:
    post:
      operationId: getFeedStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFeedStatusRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeedStatusResponse'
          description: default response
  /fsVolume/v1:
    post:
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FsVolume'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FsVolume'
          description: default response
  /fsVolume/v1/find:
    post:
      operationId: find_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindFsVolumeCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageFsVolume'
          description: default response
  /fsVolume/v1/rescan:
    get:
      operationId: rescan
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /fsVolume/v1/{id}:
    delete:
      operationId: delete_2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
    get:
      operationId: read_2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FsVolume'
          description: default response
    put:
      operationId: update_5
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FsVolume'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FsVolume'
          description: default response
  /index/v1/export:
    post:
      operationId: exportDocument_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Base64EncodedDocumentData'
          description: default response
  /index/v1/import:
    post:
      operationId: importDocument_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Base64EncodedDocumentData'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /index/v1/list:
    get:
      operationId: listDocuments_1
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocRef'
                uniqueItems: true
          description: default response
  /index/v1/{uuid}:
    get:
      operationId: fetch_7
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
    post:
      operationId: save
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexDoc'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /index/v2/shard/delete:
    post:
      operationId: deleteIndexShards
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindIndexShardCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
  /index/v2/shard/find:
    post:
      operationId: findIndexShards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindIndexShardCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageIndexShard'
          description: default response
  /index/v2/shard/flush:
    post:
      operationId: flushIndexShards
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindIndexShardCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
  /index/v2/{uuid}:
    get:
      operationId: fetch_8
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDoc'
          description: default response
    put:
      operationId: update_10
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDoc'
          description: default response
  /index/volume/v2:
    post:
      operationId: create_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexVolume'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexVolume'
          description: default response
  /index/volume/v2/find:
    post:
      operationId: find_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageIndexVolume'
          description: default response
  /index/volume/v2/rescan:
    delete:
      operationId: rescan_1
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /index/volume/v2/{id}:
    delete:
      operationId: delete_7
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
    get:
      operationId: read_4
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexVolume'
          description: default response
    put:
      operationId: update_12
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexVolume'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexVolume'
          description: default response
  /index/volumeGroup/v2:
    post:
      operationId: create_7
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexVolumeGroup'
          description: default response
  /index/volumeGroup/v2/find:
    post:
      operationId: find_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageIndexVolumeGroup'
          description: default response
  /index/volumeGroup/v2/{id}:
    delete:
      operationId: delete_6
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
    get:
      operationId: read_3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexVolumeGroup'
          description: default response
    put:
      operationId: update_11
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexVolumeGroup'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexVolumeGroup'
          description: default response
  /job/v1:
    get:
      operationId: list_4
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageJob'
          description: default response
  /job/v1/{id}/enabled:
    put:
      operationId: setEnabled_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /jobNode/v1:
    get:
      operationId: list_3
      parameters:
      - in: query
        name: jobName
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageJobNode'
          description: default response
  /jobNode/v1/info:
    get:
      operationId: info_2
      parameters:
      - in: query
        name: jobName
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobNodeInfo'
          description: default response
  /jobNode/v1/{id}/enabled:
    put:
      operationId: setEnabled
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /jobNode/v1/{id}/schedule:
    put:
      operationId: setSchedule
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /jobNode/v1/{id}/taskLimit:
    put:
      operationId: setTaskLimit
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /kafkaConfig/v1/download:
    post:
      operationId: download_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGeneration'
          description: default response
  /kafkaConfig/v1/{uuid}:
    get:
      operationId: fetch_9
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaConfigDoc'
          description: default response
    put:
      operationId: update_13
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaConfigDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaConfigDoc'
          description: default response
  /meta/v1/find:
    post:
      operationId: findMetaRow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindMetaCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageMetaRow'
          description: default response
  /meta/v1/getReprocessSelectionSummary:
    post:
      operationId: getReprocessSelectionSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindMetaCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionSummary'
          description: default response
  /meta/v1/getSelectionSummary:
    post:
      operationId: getSelectionSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindMetaCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionSummary'
          description: default response
  /meta/v1/getTypes:
    get:
      operationId: getTypes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /meta/v1/update/status:
    put:
      operationId: updateStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
  /node/v1:
    get:
      operationId: find_4
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchNodeStatusResponse'
          description: default response
  /node/v1/all:
    get:
      operationId: listAllNodes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /node/v1/enabled:
    get:
      operationId: listEnabledNodes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /node/v1/enabled/{nodeName}:
    put:
      operationId: setEnabled_2
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /node/v1/info/{nodeName}:
    get:
      operationId: info_3
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNodeInfo'
          description: default response
  /node/v1/ping/{nodeName}:
    get:
      operationId: ping
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
  /node/v1/priority/{nodeName}:
    put:
      operationId: setPriority
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /oauth2/v1/noauth/.well-known/openid-configuration:
    get:
      operationId: openIdConfiguration
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
  /oauth2/v1/noauth/auth:
    get:
      operationId: auth
      parameters:
      - in: query
        name: scope
        required: true
        schema:
          type: string
      - in: query
        name: response_type
        required: true
        schema:
          type: string
      - in: query
        name: client_id
        required: true
        schema:
          type: string
      - in: query
        name: redirect_uri
        required: true
        schema:
          type: string
      - in: query
        name: nonce
        schema:
          type: string
      - in: query
        name: state
        schema:
          type: string
      - in: query
        name: prompt
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /oauth2/v1/noauth/certs:
    get:
      operationId: certs
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: object
          description: default response
  /oauth2/v1/noauth/token:
    post:
      operationId: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: default response
  /permission/app/v1:
    get:
      operationId: getUserAndPermissions
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAndPermissions'
          description: default response
  /permission/app/v1/changeUser:
    post:
      operationId: changeUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /permission/app/v1/fetchAllPermissions:
    get:
      operationId: fetchAllPermissions
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /permission/app/v1/fetchUserAppPermissions:
    post:
      operationId: fetchUserAppPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAndPermissions'
          description: default response
  /permission/changeEvent/v1/fireChange/{nodeName}:
    post:
      operationId: fireChange
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionChangeRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /permission/doc/v1/changeDocumentPermissions:
    post:
      operationId: changeDocumentPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeDocumentPermissionsRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /permission/doc/v1/checkDocumentPermission:
    post:
      operationId: checkDocumentPermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckDocumentPermissionRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /permission/doc/v1/copyPermissionsFromParent:
    post:
      operationId: copyPermissionFromParent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyPermissionsFromParentRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPermissions'
          description: default response
  /permission/doc/v1/fetchAllDocumentPermissions:
    post:
      operationId: fetchAllDocumentPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchAllDocumentPermissionsRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPermissions'
          description: default response
  /permission/doc/v1/filterUsers:
    post:
      operationId: filterUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterUsersRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: default response
  /permission/doc/v1/getPermissionForDocType/${docType}:
    get:
      operationId: getPermissionForDocType_1
      parameters:
      - in: path
        name: docType
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /pipeline/v1/fetchPipelineData:
    post:
      operationId: fetchPipelineData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PipelineData'
          description: default response
  /pipeline/v1/fetchPipelineXml:
    post:
      operationId: fetchPipelineXml
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchPipelineXmlResponse'
          description: default response
  /pipeline/v1/propertyTypes:
    get:
      operationId: getPropertyTypes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FetchPropertyTypesResult'
          description: default response
  /pipeline/v1/savePipelineXml:
    put:
      operationId: savePipelineXml
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePipelineXmlRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /pipeline/v1/{uuid}:
    get:
      operationId: fetch_11
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineDoc'
          description: default response
    put:
      operationId: update_14
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineDoc'
          description: default response
  /pipelines/v1:
    get:
      operationId: search_4
      parameters:
      - in: query
        name: offset
        schema:
          type: integer
          format: int32
      - in: query
        name: pageSize
        schema:
          type: integer
          format: int32
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /pipelines/v1/{parentPipelineId}/inherit:
    post:
      operationId: createInherited
      parameters:
      - in: path
        name: parentPipelineId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /pipelines/v1/{uuid}:
    get:
      operationId: fetch_10
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
    post:
      operationId: save_1
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineDTO'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /processor/v1/{id}:
    delete:
      operationId: delete_9
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /processor/v1/{id}/enabled:
    put:
      operationId: setEnabled_4
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /processorFilter/v1:
    post:
      operationId: create_9
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProcessFilterRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorFilter'
          description: default response
  /processorFilter/v1/find:
    post:
      operationId: find_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchProcessorRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorListRowResultPage'
          description: default response
  /processorFilter/v1/reprocess:
    post:
      operationId: reprocess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReprocessFilterRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReprocessDataInfo'
          description: default response
  /processorFilter/v1/{id}:
    delete:
      operationId: delete_8
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
    get:
      operationId: read_5
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorFilter'
          description: default response
    put:
      operationId: update_17
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessorFilter'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorFilter'
          description: default response
  /processorFilter/v1/{id}/enabled:
    put:
      operationId: setEnabled_3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /processorFilter/v1/{id}/priority:
    put:
      operationId: setPriority_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /processorTask/v1/abandon/{nodeName}:
    post:
      operationId: abandonTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessorTaskList'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /processorTask/v1/assign/{nodeName}:
    post:
      operationId: assignTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTasksRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorTaskList'
          description: default response
  /processorTask/v1/find:
    post:
      operationId: find_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageProcessorTask'
          description: default response
  /processorTask/v1/summary:
    post:
      operationId: findSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageProcessorTaskSummary'
          description: default response
  /refData/v1/entries:
    get:
      operationId: entries
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RefStoreEntry'
          description: default response
  /refData/v1/lookup:
    post:
      operationId: lookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefDataLookupRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
  /refData/v1/purge/{purgeAge}:
    delete:
      operationId: purge
      parameters:
      - in: path
        name: purgeAge
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /remoteSearch/v1/destroy:
    get:
      operationId: destroy_1
      parameters:
      - in: query
        name: queryKey
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /remoteSearch/v1/poll:
    get:
      operationId: poll_1
      parameters:
      - in: query
        name: queryKey
        schema:
          type: string
      responses:
        default:
          content:
            application/octet-stream: {}
          description: default response
  /remoteSearch/v1/start:
    post:
      operationId: start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterSearchTask'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /ruleset/v2/export:
    post:
      operationId: exportDocument_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Base64EncodedDocumentData'
          description: default response
  /ruleset/v2/import:
    post:
      operationId: importDocument_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Base64EncodedDocumentData'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /ruleset/v2/list:
    get:
      operationId: listDocuments_2
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocRef'
                uniqueItems: true
          description: default response
  /ruleset/v2/{uuid}:
    get:
      operationId: fetch_15
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveDataRules'
          description: default response
    put:
      operationId: update_18
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiveDataRules'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveDataRules'
          description: default response
  /scheduledTime/v1:
    post:
      operationId: get_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetScheduledTimesRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledTimes'
          description: default response
  /script/v1/fetchLinkedScripts:
    post:
      operationId: fetchLinkedScripts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchLinkedScriptRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScriptDoc'
          description: default response
  /script/v1/{uuid}:
    get:
      operationId: fetch_16
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDoc'
          description: default response
    put:
      operationId: update_19
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDoc'
          description: default response
  /searchable/v2/dataSource:
    post:
      operationId: getDataSource_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
          description: default response
  /searchable/v2/destroy:
    post:
      operationId: destroy_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /searchable/v2/search:
    post:
      operationId: search_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: default response
  /session/v1/list:
    get:
      operationId: list_7
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
          description: default response
  /session/v1/logout/{sessionId}:
    get:
      operationId: logout_1
      parameters:
      - in: path
        name: sessionId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /session/v1/noauth/login:
    get:
      operationId: login_1
      parameters:
      - in: query
        name: redirect_uri
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: default response
  /sessionInfo/v1:
    get:
      operationId: get_3
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
          description: default response
  /solr/index/v1/export:
    post:
      operationId: exportDocument_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Base64EncodedDocumentData'
          description: default response
  /solr/index/v1/import:
    post:
      operationId: importDocument_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Base64EncodedDocumentData'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /solr/index/v1/list:
    get:
      operationId: listDocuments_3
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocRef'
                uniqueItems: true
          description: default response
  /solrIndex/v1/fetchSolrTypes:
    post:
      operationId: fetchSolrTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolrIndexDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /solrIndex/v1/solrConnectionTest:
    post:
      operationId: solrConnectionTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolrIndexDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolrConnectionTestResponse'
          description: default response
  /solrIndex/v1/{uuid}:
    get:
      operationId: fetch_17
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolrIndexDoc'
          description: default response
    put:
      operationId: update_20
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolrIndexDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolrIndexDoc'
          description: default response
  /sqlstatistics/v2/dataSource:
    post:
      operationId: getDataSource_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
          description: default response
  /sqlstatistics/v2/destroy:
    post:
      operationId: destroy_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /sqlstatistics/v2/search:
    post:
      operationId: search_9
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: default response
  /statistic/rollUp/v1/bitMaskConversion:
    post:
      operationId: bitMaskConversion_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomRollUpMaskFields'
          description: default response
  /statistic/rollUp/v1/bitMaskPermGeneration:
    post:
      operationId: bitMaskPermGeneration_1
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomRollUpMask'
          description: default response
  /statistic/rollUp/v1/dataSourceFieldChange:
    post:
      operationId: fieldChange_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticsDataSourceFieldChangeRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsDataSourceData'
          description: default response
  /statistic/v1/{uuid}:
    get:
      operationId: fetch_20
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticStoreDoc'
          description: default response
    put:
      operationId: update_23
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticStoreDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticStoreDoc'
          description: default response
  /statsStore/rollUp/v1/bitMaskConversion:
    post:
      operationId: bitMaskConversion
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageCustomRollUpMaskFields'
          description: default response
  /statsStore/rollUp/v1/bitMaskPermGeneration:
    post:
      operationId: bitMaskPermGeneration
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageCustomRollUpMask'
          description: default response
  /statsStore/rollUp/v1/dataSourceFieldChange:
    post:
      operationId: fieldChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StroomStatsStoreFieldChangeRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StroomStatsStoreEntityData'
          description: default response
  /statsStore/v1/{uuid}:
    get:
      operationId: fetch_19
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StroomStatsStoreDoc'
          description: default response
    put:
      operationId: update_22
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StroomStatsStoreDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StroomStatsStoreDoc'
          description: default response
  /stepping/v1/findElementDoc:
    post:
      operationId: findElementDoc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindElementDocRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /stepping/v1/getPipelineForStepping:
    post:
      operationId: getPipelineForStepping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPipelineForMetaRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocRef'
          description: default response
  /stepping/v1/step:
    post:
      operationId: step
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineStepRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SteppingResult'
          description: default response
  /storedQuery/v1/create:
    post:
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoredQuery'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredQuery'
          description: default response
  /storedQuery/v1/delete:
    delete:
      operationId: delete_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoredQuery'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /storedQuery/v1/find:
    post:
      operationId: find
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindStoredQueryCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageStoredQuery'
          description: default response
  /storedQuery/v1/read:
    post:
      operationId: read_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoredQuery'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredQuery'
          description: default response
  /storedQuery/v1/update:
    put:
      operationId: update_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoredQuery'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredQuery'
          description: default response
  /streamattributemap/v1:
    get:
      operationId: page
      parameters:
      - in: query
        name: pageOffset
        schema:
          type: integer
          format: int64
      - in: query
        name: pageSize
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
    post:
      operationId: search_3
      parameters:
      - in: query
        name: pageOffset
        schema:
          type: integer
          format: int64
      - in: query
        name: pageSize
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionOperator'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /streamattributemap/v1/dataSource:
    get:
      operationId: dataSource
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /streamattributemap/v1/{id}:
    get:
      operationId: search_2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /streamattributemap/v1/{id}/{anyStatus}/relations:
    get:
      operationId: getRelations
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: anyStatus
        required: true
        schema:
          type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /streamtasks/v1:
    get:
      operationId: find_5
      parameters:
      - in: query
        name: offset
        schema:
          type: integer
          format: int32
      - in: query
        name: pageSize
        schema:
          type: integer
          format: int32
      - in: query
        name: sortBy
        schema:
          type: string
      - in: query
        name: desc
        schema:
          type: boolean
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /streamtasks/v1/{filterId}:
    patch:
      operationId: enable
      parameters:
      - in: path
        name: filterId
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamTaskPatch'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /stroom-index/v2/dataSource:
    post:
      operationId: getDataSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
          description: default response
  /stroom-index/v2/destroy:
    post:
      operationId: destroy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /stroom-index/v2/search:
    post:
      operationId: search_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: default response
  /stroom-index/volume/v1:
    get:
      operationId: getAll_2
      responses:
        default:
          content:
            application/json: {}
          description: default response
    post:
      operationId: create_6
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/IndexVolume'
      responses:
        default:
          content:
            application/json: {}
          description: default response
    put:
      operationId: update_9
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/IndexVolume'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /stroom-index/volume/v1/{id}:
    delete:
      operationId: delete_5
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
    get:
      operationId: getById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /stroom-index/volumeGroup/v1:
    get:
      operationId: getAll_1
      responses:
        default:
          content:
            application/json: {}
          description: default response
    post:
      operationId: create_5
      responses:
        default:
          content:
            application/json: {}
          description: default response
    put:
      operationId: update_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexVolumeGroup'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /stroom-index/volumeGroup/v1/names:
    get:
      operationId: getNames_1
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /stroom-index/volumeGroup/v1/{id}:
    delete:
      operationId: delete_4
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
    get:
      operationId: get_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /stroom-solr-index/v2/dataSource:
    post:
      operationId: getDataSource_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocRef'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
          description: default response
  /stroom-solr-index/v2/destroy:
    post:
      operationId: destroy_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryKey'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /stroom-solr-index/v2/search:
    post:
      operationId: search_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: default response
  /stroomSession/v1/invalidate:
    get:
      operationId: invalidate_1
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /stroomSession/v1/noauth/validateSession:
    get:
      operationId: validateSession
      parameters:
      - in: query
        name: redirect_uri
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateSessionResponse'
          description: default response
  /suggest/v1:
    post:
      operationId: fetch_14
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchSuggestionsRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /systemInfo/v1:
    get:
      operationId: getAll
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfoResultList'
          description: default response
  /systemInfo/v1/names:
    get:
      operationId: getNames
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /systemInfo/v1/{name}:
    get:
      operationId: get_2
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfoResult'
          description: default response
  /task/v1/find/{nodeName}:
    post:
      operationId: find_10
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindTaskProgressRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProgressResponse'
          description: default response
  /task/v1/list/{nodeName}:
    get:
      operationId: list_8
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProgressResponse'
          description: default response
  /task/v1/terminate/{nodeName}:
    post:
      operationId: terminate
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminateTaskProgressRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /task/v1/user/{nodeName}:
    get:
      operationId: userTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProgressResponse'
          description: default response
  /textConverter/v1/{uuid}:
    get:
      operationId: fetch_12
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextConverterDoc'
          description: default response
    put:
      operationId: update_15
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextConverterDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextConverterDoc'
          description: default response
  /token/v1:
    delete:
      operationId: deleteAll
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
    get:
      operationId: list_6
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResultPage'
          description: default response
    post:
      operationId: create_11
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
  /token/v1/byToken/{token}:
    delete:
      operationId: deleteByToken
      parameters:
      - in: path
        name: token
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
    get:
      operationId: read_8
      parameters:
      - in: path
        name: token
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
  /token/v1/noauth/fetchTokenConfig:
    get:
      operationId: fetchTokenConfig
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenConfig'
          description: default response
  /token/v1/publickey:
    get:
      operationId: getPublicKey
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
  /token/v1/search:
    post:
      operationId: search_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTokenRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResultPage'
          description: default response
  /token/v1/{id}:
    delete:
      operationId: delete_11
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
    get:
      operationId: read_7
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
  /token/v1/{id}/enabled:
    get:
      operationId: toggleEnabled
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      - in: query
        name: enabled
        required: true
        schema:
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
  /users/v1:
    get:
      operationId: find_9
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: isGroup
        schema:
          type: boolean
      - in: query
        name: uuid
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: default response
  /users/v1/associates:
    get:
      operationId: getAssociates
      parameters:
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
  /users/v1/create/{name}/{isGroup}:
    post:
      operationId: create_12
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      - in: path
        name: isGroup
        required: true
        schema:
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
  /users/v1/find:
    post:
      operationId: find_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindUserCriteria'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPageUser'
          description: default response
  /users/v1/{userName}/status:
    put:
      operationId: setStatus_1
      parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
      - in: query
        name: enabled
        schema:
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /users/v1/{userUuid}:
    get:
      operationId: fetch_18
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
  /users/v1/{userUuid}/{groupUuid}:
    delete:
      operationId: removeUserFromGroup
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: groupUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
    put:
      operationId: addUserToGroup
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: groupUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /users/v1/{uuid}:
    delete:
      operationId: deleteUser
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
  /visualisation/v1/{uuid}:
    get:
      operationId: fetch_21
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualisationDoc'
          description: default response
    put:
      operationId: update_24
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisualisationDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualisationDoc'
          description: default response
  /welcome/v1:
    get:
      operationId: fetch
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /xmlSchema/v1/{uuid}:
    get:
      operationId: fetch_22
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XmlSchemaDoc'
          description: default response
    put:
      operationId: update_25
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XmlSchemaDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XmlSchemaDoc'
          description: default response
  /xslt/v1/{uuid}:
    get:
      operationId: fetch_13
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XsltDoc'
          description: default response
    put:
      operationId: update_16
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XsltDoc'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XsltDoc'
          description: default response
components:
  schemas:
    AbstractFetchDataResult:
      type: object
      discriminator:
        propertyName: type
      properties:
        availableChildStreamTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        classification:
          type: string
        feedName:
          type: string
        itemRange:
          $ref: '#/components/schemas/OffsetRange'
        sourceLocation:
          $ref: '#/components/schemas/SourceLocation'
        streamTypeName:
          type: string
        totalCharacterCount:
          $ref: '#/components/schemas/CountLong'
        totalItemCount:
          $ref: '#/components/schemas/CountLong'
        type:
          type: string
      required:
      - type
    AbstractField:
      type: object
      discriminator:
        propertyName: type
      properties:
        conditions:
          type: array
          items:
            type: string
            enum:
            - CONTAINS
            - EQUALS
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL_TO
            - LESS_THAN
            - LESS_THAN_OR_EQUAL_TO
            - BETWEEN
            - IN
            - IN_DICTIONARY
            - IN_FOLDER
            - IS_DOC_REF
            - IS_NULL
            - IS_NOT_NULL
        name:
          type: string
        queryable:
          type: boolean
        type:
          type: string
    Account:
      type: object
      properties:
        comments:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        email:
          type: string
        enabled:
          type: boolean
        firstName:
          type: string
        forcePasswordChange:
          type: boolean
        id:
          type: integer
          format: int32
        inactive:
          type: boolean
        lastLoginMs:
          type: integer
          format: int64
        lastName:
          type: string
        locked:
          type: boolean
        loginCount:
          type: integer
          format: int32
        loginFailures:
          type: integer
          format: int32
        neverExpires:
          type: boolean
        processingAccount:
          type: boolean
        reactivatedMs:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        userId:
          type: string
        version:
          type: integer
          format: int32
    AccountResultPage:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    AcknowledgeSplashRequest:
      type: object
      properties:
        message:
          type: string
        version:
          type: string
    Activity:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        details:
          $ref: '#/components/schemas/ActivityDetails'
        id:
          type: integer
          format: int32
        json:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        userId:
          type: string
        version:
          type: integer
          format: int32
    ActivityConfig:
      type: object
      properties:
        chooseOnStartup:
          type: boolean
        editorBody:
          type: string
        editorTitle:
          type: string
        enabled:
          type: boolean
        managerTitle:
          type: string
    ActivityDetails:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Prop'
    ActivityValidationResult:
      type: object
      properties:
        messages:
          type: string
        valid:
          type: boolean
    AddPermissionEvent:
      type: object
      allOf:
      - $ref: '#/components/schemas/PermissionChangeEvent'
      - type: object
        properties:
          documentUuid:
            type: string
          permission:
            type: string
          userUuid:
            type: string
    Annotation:
      type: object
      properties:
        assignedTo:
          type: string
        comment:
          type: string
        createTime:
          type: integer
          format: int64
        createUser:
          type: string
        history:
          type: string
        id:
          type: integer
          format: int64
        status:
          type: string
        subject:
          type: string
        title:
          type: string
        updateTime:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    AnnotationDetail:
      type: object
      properties:
        annotation:
          $ref: '#/components/schemas/Annotation'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/AnnotationEntry'
    AnnotationEntry:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        entryType:
          type: string
        id:
          type: integer
          format: int64
        updateTime:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    Arg:
      type: object
      properties:
        allowedValues:
          type: array
          items:
            type: string
        argType:
          type: string
          enum:
          - UNKNOWN
          - BOOLEAN
          - DOUBLE
          - ERROR
          - INTEGER
          - LONG
          - NULL
          - NUMBER
          - STRING
        defaultValue:
          type: string
        description:
          type: string
        minVarargsCount:
          type: integer
          format: int32
        name:
          type: string
        optional:
          type: boolean
        varargs:
          type: boolean
    AssignTasksRequest:
      type: object
      properties:
        count:
          type: integer
          format: int32
        nodeName:
          type: string
    AuthenticationState:
      type: object
      properties:
        allowPasswordResets:
          type: boolean
        userId:
          type: string
    Automate:
      type: object
      properties:
        open:
          type: boolean
        refresh:
          type: boolean
        refreshInterval:
          type: string
    Base64EncodedDocumentData:
      type: object
      properties:
        dataMap:
          type: object
          additionalProperties:
            type: string
        docRef:
          $ref: '#/components/schemas/DocRef'
    BooleanField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    BuildInfo:
      type: object
      properties:
        buildDate:
          type: string
        buildVersion:
          type: string
        upDate:
          type: string
    BulkActionResult:
      type: object
      properties:
        docRefs:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
        message:
          type: string
    CacheInfo:
      type: object
      properties:
        map:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        nodeName:
          type: string
    CacheInfoResponse:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/CacheInfo'
    ChangeDocumentPermissionsRequest:
      type: object
      properties:
        cascade:
          type: string
          enum:
          - NO
          - CHANGES_ONLY
          - ALL
        changes:
          $ref: '#/components/schemas/Changes'
        docRef:
          $ref: '#/components/schemas/DocRef'
    ChangePasswordRequest:
      type: object
      properties:
        confirmNewPassword:
          type: string
        currentPassword:
          type: string
        newPassword:
          type: string
        userId:
          type: string
    ChangePasswordResponse:
      type: object
      properties:
        changeSucceeded:
          type: boolean
        forceSignIn:
          type: boolean
        message:
          type: string
    ChangeSetString:
      type: object
      properties:
        addSet:
          type: array
          items:
            type: string
          uniqueItems: true
        removeSet:
          type: array
          items:
            type: string
          uniqueItems: true
    ChangeSetUser:
      type: object
      properties:
        addSet:
          type: array
          items:
            $ref: '#/components/schemas/User'
          uniqueItems: true
        removeSet:
          type: array
          items:
            $ref: '#/components/schemas/User'
          uniqueItems: true
    ChangeUserRequest:
      type: object
      properties:
        changedAppPermissions:
          $ref: '#/components/schemas/ChangeSetString'
        changedLinkedUsers:
          $ref: '#/components/schemas/ChangeSetUser'
        user:
          $ref: '#/components/schemas/User'
    Changes:
      type: object
      properties:
        add:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            uniqueItems: true
        remove:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            uniqueItems: true
    CheckDocumentPermissionRequest:
      type: object
      properties:
        documentUuid:
          type: string
        permission:
          type: string
    ClearDocumentPermissionsEvent:
      type: object
      allOf:
      - $ref: '#/components/schemas/PermissionChangeEvent'
      - type: object
        properties:
          documentUuid:
            type: string
    ClusterLockKey:
      type: object
      properties:
        creationTime:
          type: integer
          format: int64
        name:
          type: string
        nodeName:
          type: string
    ClusterNodeInfo:
      type: object
      properties:
        buildInfo:
          $ref: '#/components/schemas/BuildInfo'
        discoverTime:
          type: string
        endpointUrl:
          type: string
        error:
          type: string
        itemList:
          type: array
          items:
            $ref: '#/components/schemas/ClusterNodeInfoItem'
        nodeName:
          type: string
        ping:
          type: integer
          format: int64
    ClusterNodeInfoItem:
      type: object
      properties:
        active:
          type: boolean
        master:
          type: boolean
        nodeName:
          type: string
    ClusterSearchTask:
      type: object
      properties:
        dateTimeLocale:
          type: string
        key:
          $ref: '#/components/schemas/QueryKey'
        now:
          type: integer
          format: int64
        query:
          $ref: '#/components/schemas/Query'
        settings:
          type: array
          items:
            $ref: '#/components/schemas/CoprocessorSettings'
        shards:
          type: array
          items:
            type: integer
            format: int64
        sourceTaskId:
          $ref: '#/components/schemas/TaskId'
        storedFields:
          type: array
          items:
            type: string
        taskName:
          type: string
    ComponentConfig:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        settings:
          $ref: '#/components/schemas/ComponentSettings'
        type:
          type: string
    ComponentResultRequest:
      type: object
      discriminator:
        propertyName: type
      properties:
        componentId:
          type: string
        fetch:
          type: string
          enum:
          - NONE
          - CHANGES
          - ALL
        type:
          type: string
      required:
      - type
    ComponentSettings:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    ConditionalFormattingRule:
      type: object
      properties:
        backgroundColor:
          type: string
        enabled:
          type: boolean
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        hide:
          type: boolean
        id:
          type: string
        textColor:
          type: string
    ConfigProperty:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dataTypeName:
          type: string
        databaseOverrideValue:
          $ref: '#/components/schemas/OverrideValueString'
        defaultValue:
          type: string
        description:
          type: string
        editable:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          $ref: '#/components/schemas/PropertyPath'
        password:
          type: boolean
        requireRestart:
          type: boolean
        requireUiRestart:
          type: boolean
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
        yamlOverrideValue:
          $ref: '#/components/schemas/OverrideValueString'
    ConfirmPasswordRequest:
      type: object
      properties:
        password:
          type: string
    ConfirmPasswordResponse:
      type: object
      properties:
        message:
          type: string
        valid:
          type: boolean
    CoprocessorSettings:
      type: object
      discriminator:
        propertyName: type
      properties:
        coprocessorId:
          type: integer
          format: int32
        type:
          type: string
      required:
      - type
    CopyOp:
      type: object
      properties:
        destinationFolderRef:
          $ref: '#/components/schemas/DocRef'
        docRefs:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    CopyPermissionsFromParentRequest:
      type: object
      properties:
        docRef:
          $ref: '#/components/schemas/DocRef'
    CountLong:
      type: object
      properties:
        count:
          type: integer
          format: int64
        exact:
          type: boolean
    CreateAccountRequest:
      type: object
      properties:
        comments:
          type: string
        confirmPassword:
          type: string
        email:
          type: string
        firstName:
          type: string
        forcePasswordChange:
          type: boolean
        lastName:
          type: string
        neverExpires:
          type: boolean
        password:
          type: string
        userId:
          type: string
    CreateEntryRequest:
      type: object
      properties:
        annotation:
          $ref: '#/components/schemas/Annotation'
        data:
          type: string
        linkedEvents:
          type: array
          items:
            $ref: '#/components/schemas/EventId'
        type:
          type: string
    CreateOp:
      type: object
      properties:
        destinationFolderRef:
          $ref: '#/components/schemas/DocRef'
        docRefName:
          type: string
        docRefType:
          type: string
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    CreateProcessFilterRequest:
      type: object
      properties:
        autoPriority:
          type: boolean
        enabled:
          type: boolean
        pipeline:
          $ref: '#/components/schemas/DocRef'
        priority:
          type: integer
          format: int32
        queryData:
          $ref: '#/components/schemas/QueryData'
    CreateReprocessFilterRequest:
      type: object
      properties:
        autoPriority:
          type: boolean
        enabled:
          type: boolean
        priority:
          type: integer
          format: int32
        queryData:
          $ref: '#/components/schemas/QueryData'
    CreateTokenRequest:
      type: object
      properties:
        comments:
          type: string
        enabled:
          type: boolean
        expiresOnMs:
          type: integer
          format: int64
        tokenType:
          type: string
          pattern: ^user$|^api$|^email_reset$
        userId:
          type: string
      required:
      - tokenType
      - userId
    CriteriaFieldSort:
      type: object
      properties:
        desc:
          type: boolean
        id:
          type: string
        ignoreCase:
          type: boolean
    CustomRollUpMask:
      type: object
      properties:
        rolledUpTagPosition:
          type: array
          items:
            type: integer
            format: int32
    CustomRollUpMaskFields:
      type: object
      properties:
        id:
          type: integer
          format: int32
        maskValue:
          type: integer
          format: int32
        rolledUpFieldPositions:
          type: array
          items:
            type: integer
            format: int32
          uniqueItems: true
    DBTableStatus:
      type: object
      properties:
        count:
          type: integer
          format: int64
        dataSize:
          type: integer
          format: int64
        db:
          type: string
        indexSize:
          type: integer
          format: int64
        table:
          type: string
    DashboardConfig:
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentConfig'
          xml:
            wrapped: true
        layout:
          $ref: '#/components/schemas/LayoutConfig'
        parameters:
          type: string
        tabVisibility:
          type: string
          enum:
          - SHOW_ALL
          - HIDE_SINGLE
          - HIDE_ALL
      xml:
        name: dashboard
    DashboardDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dashboardConfig:
          $ref: '#/components/schemas/DashboardConfig'
        name:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    DashboardQueryKey:
      type: object
      properties:
        componentId:
          type: string
        dashboardUuid:
          type: string
        uuid:
          type: string
    DashboardSearchRequest:
      type: object
      properties:
        componentResultRequests:
          type: array
          items:
            $ref: '#/components/schemas/ComponentResultRequest'
        dashboardQueryKey:
          $ref: '#/components/schemas/DashboardQueryKey'
        dateTimeLocale:
          type: string
        search:
          $ref: '#/components/schemas/Search'
    DashboardSearchResponse:
      type: object
      properties:
        complete:
          type: boolean
        errors:
          type: string
        highlights:
          type: array
          items:
            type: string
          uniqueItems: true
        queryKey:
          $ref: '#/components/schemas/DashboardQueryKey'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
    DataInfoSection:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        title:
          type: string
    DataRange:
      type: object
      properties:
        byteOffsetFrom:
          type: integer
          format: int64
        byteOffsetTo:
          type: integer
          format: int64
        charOffsetFrom:
          type: integer
          format: int64
        charOffsetTo:
          type: integer
          format: int64
        length:
          type: integer
          format: int64
        locationFrom:
          $ref: '#/components/schemas/Location'
        locationTo:
          $ref: '#/components/schemas/Location'
    DataRetentionDeleteSummary:
      type: object
      properties:
        count:
          type: integer
          format: int32
        feedName:
          type: string
        metaType:
          type: string
        ruleName:
          type: string
        ruleNumber:
          type: integer
          format: int32
    DataRetentionDeleteSummaryRequest:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/FindDataRetentionImpactCriteria'
        dataRetentionRules:
          $ref: '#/components/schemas/DataRetentionRules'
        queryId:
          type: string
    DataRetentionDeleteSummaryResponse:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        queryId:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/DataRetentionDeleteSummary'
    DataRetentionRule:
      type: object
      properties:
        age:
          type: integer
          format: int32
        creationTime:
          type: integer
          format: int64
        enabled:
          type: boolean
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        forever:
          type: boolean
        name:
          type: string
        ruleNumber:
          type: integer
          format: int32
        timeUnit:
          type: string
          enum:
          - MINUTES
          - HOURS
          - DAYS
          - WEEKS
          - MONTHS
          - YEARS
      xml:
        name: dataRetentionRule
    DataRetentionRules:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        name:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/DataRetentionRule'
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
      xml:
        name: dataRetentionPolicy
    DataSource:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/AbstractField'
    DateField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    DateTimeFormatSettings:
      type: object
      allOf:
      - $ref: '#/components/schemas/FormatSettings'
      - type: object
        properties:
          pattern:
            type: string
          timeZone:
            $ref: '#/components/schemas/TimeZone'
    DefaultLocation:
      type: object
      allOf:
      - $ref: '#/components/schemas/Location'
    Dependency:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/DocRef'
        ok:
          type: boolean
        to:
          $ref: '#/components/schemas/DocRef'
    DependencyCriteria:
      type: object
      properties:
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        partialName:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    DictionaryDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        imports:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
        name:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    DocRef:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        uuid:
          type: string
      xml:
        name: doc
    DocRefField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
      - type: object
        properties:
          docRefType:
            type: string
    DocRefInfo:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createUser:
          type: string
        docRef:
          $ref: '#/components/schemas/DocRef'
        otherInfo:
          type: string
        updateTime:
          type: integer
          format: int64
        updateUser:
          type: string
    DocRefs:
      type: object
      properties:
        docRefs:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
          uniqueItems: true
    DocumentPermissions:
      type: object
      properties:
        docUuid:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/User'
        permissions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            uniqueItems: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    DocumentType:
      type: object
      properties:
        displayType:
          type: string
        iconUrl:
          type: string
        priority:
          type: integer
          format: int32
        type:
          type: string
    DocumentTypes:
      type: object
      properties:
        nonSystemTypes:
          type: array
          items:
            $ref: '#/components/schemas/DocumentType'
        visibleTypes:
          type: array
          items:
            $ref: '#/components/schemas/DocumentType'
    DoubleField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    DownloadQueryRequest:
      type: object
      properties:
        dashboardQueryKey:
          $ref: '#/components/schemas/DashboardQueryKey'
        searchRequest:
          $ref: '#/components/schemas/DashboardSearchRequest'
    DownloadSearchResultsRequest:
      type: object
      properties:
        applicationInstanceId:
          type: string
        componentId:
          type: string
        dateTimeLocale:
          type: string
        fileType:
          type: string
          enum:
          - EXCEL
          - CSV
          - TSV
        percent:
          type: integer
          format: int32
        sample:
          type: boolean
        searchRequest:
          $ref: '#/components/schemas/DashboardSearchRequest'
    EntityEvent:
      type: object
      properties:
        action:
          type: string
          enum:
          - CREATE
          - UPDATE
          - DELETE
          - CLEAR_CACHE
        docRef:
          $ref: '#/components/schemas/DocRef'
    Entry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    EventCoprocessorSettings:
      type: object
      allOf:
      - $ref: '#/components/schemas/CoprocessorSettings'
      - type: object
        properties:
          maxEvent:
            $ref: '#/components/schemas/EventRef'
          maxEvents:
            type: integer
            format: int64
          maxEventsPerStream:
            type: integer
            format: int64
          maxStreams:
            type: integer
            format: int64
          minEvent:
            $ref: '#/components/schemas/EventRef'
    EventId:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
        streamId:
          type: integer
          format: int64
    EventLink:
      type: object
      properties:
        annotationId:
          type: integer
          format: int64
        eventId:
          $ref: '#/components/schemas/EventId'
    EventRef:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
        streamId:
          type: integer
          format: int64
    Expander:
      type: object
      properties:
        depth:
          type: integer
          format: int32
        expanded:
          type: boolean
        leaf:
          type: boolean
    ExplorerNode:
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/ExplorerNode'
        depth:
          type: integer
          format: int32
        iconUrl:
          type: string
        name:
          type: string
        nodeState:
          type: string
          enum:
          - OPEN
          - CLOSED
          - LEAF
        tags:
          type: string
        type:
          type: string
        uuid:
          type: string
    ExplorerNodePermissions:
      type: object
      properties:
        admin:
          type: boolean
        createPermissions:
          type: array
          items:
            type: string
          uniqueItems: true
        documentPermissions:
          type: array
          items:
            type: string
          uniqueItems: true
        explorerNode:
          $ref: '#/components/schemas/ExplorerNode'
    ExplorerServiceCopyRequest:
      type: object
      properties:
        destinationFolderRef:
          $ref: '#/components/schemas/DocRef'
        docRefs:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    ExplorerServiceCreateRequest:
      type: object
      properties:
        destinationFolderRef:
          $ref: '#/components/schemas/DocRef'
        docName:
          type: string
        docType:
          type: string
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    ExplorerServiceDeleteRequest:
      type: object
      properties:
        docRefs:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
    ExplorerServiceMoveRequest:
      type: object
      properties:
        destinationFolderRef:
          $ref: '#/components/schemas/DocRef'
        docRefs:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    ExplorerServiceRenameRequest:
      type: object
      properties:
        docName:
          type: string
        docRef:
          $ref: '#/components/schemas/DocRef'
    ExplorerTreeFilter:
      type: object
      properties:
        includedTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        nameFilter:
          type: string
        nameFilterChange:
          type: boolean
        requiredPermissions:
          type: array
          items:
            type: string
          uniqueItems: true
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
    ExpressionCriteria:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    ExpressionItem:
      type: object
      discriminator:
        propertyName: type
      properties:
        enabled:
          type: boolean
        type:
          type: string
      required:
      - type
    ExpressionOperator:
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/ExpressionItem'
          xml:
            wrapped: true
        enabled:
          type: boolean
        op:
          type: string
          enum:
          - AND
          - OR
          - NOT
    ExpressionTerm:
      type: object
      allOf:
      - $ref: '#/components/schemas/ExpressionItem'
      - type: object
        properties:
          condition:
            type: string
            enum:
            - CONTAINS
            - EQUALS
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL_TO
            - LESS_THAN
            - LESS_THAN_OR_EQUAL_TO
            - BETWEEN
            - IN
            - IN_DICTIONARY
            - IN_FOLDER
            - IS_DOC_REF
            - IS_NULL
            - IS_NOT_NULL
          docRef:
            $ref: '#/components/schemas/DocRef'
          field:
            type: string
          value:
            type: string
    FeedDoc:
      type: object
      properties:
        classification:
          type: string
        contextEncoding:
          type: string
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        encoding:
          type: string
        name:
          type: string
        reference:
          type: boolean
        retentionDayAge:
          type: integer
          format: int32
        status:
          type: string
          enum:
          - RECEIVE
          - REJECT
          - DROP
        streamType:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    FetchAllDocumentPermissionsRequest:
      type: object
      properties:
        docRef:
          $ref: '#/components/schemas/DocRef'
    FetchDataRequest:
      type: object
      properties:
        expandedSeverities:
          type: array
          items:
            type: string
            enum:
            - INFO
            - WARN
            - ERROR
            - FATAL
        markerMode:
          type: boolean
        pipeline:
          $ref: '#/components/schemas/DocRef'
        segmentCount:
          type: integer
          format: int64
        showAsHtml:
          type: boolean
        sourceLocation:
          $ref: '#/components/schemas/SourceLocation'
    FetchDataResult:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractFetchDataResult'
      - type: object
        properties:
          data:
            type: string
          dataType:
            type: string
            enum:
            - SEGMENTED
            - NON_SEGMENTED
            - MARKER
          html:
            type: boolean
          totalBytes:
            type: integer
            format: int64
    FetchExplorerNodeResult:
      type: object
      properties:
        openedItems:
          type: array
          items:
            type: string
        rootNodes:
          type: array
          items:
            $ref: '#/components/schemas/ExplorerNode'
        temporaryOpenedItems:
          type: array
          items:
            type: string
          uniqueItems: true
    FetchLinkedScriptRequest:
      type: object
      properties:
        loadedScripts:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
          uniqueItems: true
        script:
          $ref: '#/components/schemas/DocRef'
    FetchMarkerResult:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractFetchDataResult'
      - type: object
        properties:
          markers:
            type: array
            items:
              $ref: '#/components/schemas/Marker'
    FetchNodeStatusResponse:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/NodeStatusResult'
    FetchPipelineXmlResponse:
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/DocRef'
        xml:
          type: string
    FetchProcessorRequest:
      type: object
      properties:
        expandedRows:
          type: array
          items:
            $ref: '#/components/schemas/ProcessorListRow'
          uniqueItems: true
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
    FetchPropertyTypesResult:
      type: object
      properties:
        pipelineElementType:
          $ref: '#/components/schemas/PipelineElementType'
        propertyTypes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PipelinePropertyType'
    FetchSuggestionsRequest:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DocRef'
        field:
          $ref: '#/components/schemas/AbstractField'
        text:
          type: string
      required:
      - dataSource
      - field
    Field:
      type: object
      properties:
        expression:
          type: string
        filter:
          $ref: '#/components/schemas/Filter'
        format:
          $ref: '#/components/schemas/Format'
        group:
          type: integer
          format: int32
        id:
          type: string
        name:
          type: string
        sort:
          $ref: '#/components/schemas/Sort'
        special:
          type: boolean
        visible:
          type: boolean
        width:
          type: integer
          format: int32
    Filter:
      type: object
      properties:
        excludes:
          type: string
        includes:
          type: string
    FilterFieldDefinition:
      type: object
      properties:
        defaultField:
          type: boolean
        displayName:
          type: string
        filterQualifier:
          type: string
    FilterUsersRequest:
      type: object
      properties:
        quickFilterInput:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    FindDBTableCriteria:
      type: object
      properties:
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    FindDataRetentionImpactCriteria:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    FindElementDocRequest:
      type: object
      properties:
        feedName:
          type: string
        pipelineElement:
          $ref: '#/components/schemas/PipelineElement'
        pipelineName:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PipelineProperty'
    FindExplorerNodeCriteria:
      type: object
      properties:
        ensureVisible:
          type: array
          items:
            type: string
          uniqueItems: true
        filter:
          $ref: '#/components/schemas/ExplorerTreeFilter'
        minDepth:
          type: integer
          format: int32
        openItems:
          type: array
          items:
            type: string
          uniqueItems: true
        temporaryOpenedItems:
          type: array
          items:
            type: string
          uniqueItems: true
    FindFsVolumeCriteria:
      type: object
      properties:
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        selection:
          $ref: '#/components/schemas/SelectionVolumeUseStatus'
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    FindIndexShardCriteria:
      type: object
      properties:
        documentCountRange:
          $ref: '#/components/schemas/RangeInteger'
        indexShardIdSet:
          $ref: '#/components/schemas/SelectionLong'
        indexShardStatusSet:
          $ref: '#/components/schemas/SelectionIndexShardStatus'
        indexUuidSet:
          $ref: '#/components/schemas/SelectionString'
        nodeNameSet:
          $ref: '#/components/schemas/SelectionString'
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        partition:
          $ref: '#/components/schemas/StringCriteria'
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
        volumeIdSet:
          $ref: '#/components/schemas/SelectionInteger'
    FindMetaCriteria:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        fetchRelationships:
          type: boolean
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    FindStoredQueryCriteria:
      type: object
      properties:
        componentId:
          type: string
        dashboardUuid:
          type: string
        favourite:
          type: boolean
        name:
          $ref: '#/components/schemas/StringCriteria'
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        requiredPermission:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
        userId:
          type: string
    FindTaskCriteria:
      type: object
      properties:
        ancestorIdSet:
          type: array
          items:
            $ref: '#/components/schemas/TaskId'
          uniqueItems: true
        idSet:
          type: array
          items:
            $ref: '#/components/schemas/TaskId'
          uniqueItems: true
        sessionId:
          type: string
    FindTaskProgressCriteria:
      type: object
      properties:
        expandedTasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskProgress'
          uniqueItems: true
        nameFilter:
          type: string
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        sessionId:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    FindTaskProgressRequest:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/FindTaskProgressCriteria'
    FindUserCriteria:
      type: object
      properties:
        group:
          type: boolean
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        quickFilterInput:
          type: string
        relatedUser:
          $ref: '#/components/schemas/User'
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    FlatResult:
      type: object
      allOf:
      - $ref: '#/components/schemas/Result'
      - type: object
        properties:
          size:
            type: integer
            format: int64
          structure:
            type: array
            items:
              $ref: '#/components/schemas/Field'
          values:
            type: array
            items:
              type: array
              items:
                type: object
    FloatField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    Format:
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/FormatSettings'
        type:
          type: string
          enum:
          - GENERAL
          - NUMBER
          - DATE_TIME
          - TEXT
        wrap:
          type: boolean
    FormatSettings:
      type: object
      discriminator:
        propertyName: type
      properties:
        default:
          type: boolean
        type:
          type: string
      required:
      - type
    FsVolume:
      type: object
      properties:
        byteLimit:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        id:
          type: integer
          format: int32
        path:
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - CLOSED
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
        volumeState:
          $ref: '#/components/schemas/FsVolumeState'
    FsVolumeState:
      type: object
      properties:
        bytesFree:
          type: integer
          format: int64
        bytesTotal:
          type: integer
          format: int64
        bytesUsed:
          type: integer
          format: int64
        id:
          type: integer
          format: int32
        updateTimeMs:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
    FunctionSignature:
      type: object
      properties:
        aliases:
          type: array
          items:
            type: string
        args:
          type: array
          items:
            $ref: '#/components/schemas/Arg'
        categoryPath:
          type: array
          items:
            type: string
        description:
          type: string
        name:
          type: string
        returnDescription:
          type: string
        returnType:
          type: string
          enum:
          - UNKNOWN
          - BOOLEAN
          - DOUBLE
          - ERROR
          - INTEGER
          - LONG
          - NULL
          - NUMBER
          - STRING
    GetFeedStatusRequest:
      type: object
      properties:
        feedName:
          type: string
        senderDn:
          type: string
    GetFeedStatusResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          enum:
          - Receive
          - Reject
          - Drop
        stroomStatusCode:
          type: string
          enum:
          - 200 - 0 - OK
          - 406 - 100 - Feed must be specified
          - 406 - 101 - Feed is not defined
          - 406 - 110 - Feed is not set to receive data
          - 406 - 120 - Unexpected data type
          - 406 - 200 - Unknown compression
          - 401 - 300 - Client Certificate Required
          - 403 - 310 - Client Certificate not authorised
          - 500 - 400 - Compressed stream invalid
          - 500 - 999 - Unknown error
    GetPipelineForMetaRequest:
      type: object
      properties:
        childMetaId:
          type: integer
          format: int64
        metaId:
          type: integer
          format: int64
    GetScheduledTimesRequest:
      type: object
      properties:
        jobType:
          type: string
          enum:
          - UNKNOWN
          - CRON
          - FREQUENCY
          - DISTRIBUTED
        lastExecutedTime:
          type: integer
          format: int64
        schedule:
          type: string
        scheduleReferenceTime:
          type: integer
          format: int64
    GlobalConfigCriteria:
      type: object
      properties:
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        quickFilterInput:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    IdField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    ImportConfigRequest:
      type: object
      properties:
        confirmList:
          type: array
          items:
            $ref: '#/components/schemas/ImportState'
        resourceKey:
          $ref: '#/components/schemas/ResourceKey'
    ImportState:
      type: object
      properties:
        action:
          type: boolean
        destPath:
          type: string
        docRef:
          $ref: '#/components/schemas/DocRef'
        enable:
          type: boolean
        enableTime:
          type: integer
          format: int64
        messageList:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        sourcePath:
          type: string
        state:
          type: string
          enum:
          - NEW
          - UPDATE
          - EQUAL
        updatedFieldList:
          type: array
          items:
            type: string
    IndexDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/IndexField'
        maxDocsPerShard:
          type: integer
          format: int32
        name:
          type: string
        partitionBy:
          type: string
          enum:
          - DAY
          - WEEK
          - MONTH
          - YEAR
        partitionSize:
          type: integer
          format: int32
        retentionDayAge:
          type: integer
          format: int32
        shardsPerPartition:
          type: integer
          format: int32
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
        volumeGroupName:
          type: string
    IndexField:
      type: object
      properties:
        analyzerType:
          type: string
          enum:
          - KEYWORD
          - ALPHA
          - NUMERIC
          - ALPHA_NUMERIC
          - WHITESPACE
          - STOP
          - STANDARD
        caseSensitive:
          type: boolean
        fieldName:
          type: string
        fieldType:
          type: string
          enum:
          - ID
          - BOOLEAN_FIELD
          - INTEGER_FIELD
          - LONG_FIELD
          - FLOAT_FIELD
          - DOUBLE_FIELD
          - DATE_FIELD
          - FIELD
          - NUMERIC_FIELD
        indexed:
          type: boolean
        stored:
          type: boolean
        termPositions:
          type: boolean
    IndexShard:
      type: object
      properties:
        commitDocumentCount:
          type: integer
          format: int32
        commitDurationMs:
          type: integer
          format: int64
        commitMs:
          type: integer
          format: int64
        documentCount:
          type: integer
          format: int32
        fileSize:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        indexUuid:
          type: string
        indexVersion:
          type: string
        nodeName:
          type: string
        partition:
          type: string
        partitionFromTime:
          type: integer
          format: int64
        partitionToTime:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - CLOSED
          - OPEN
          - CLOSING
          - OPENING
          - NEW
          - DELETED
          - CORRUPT
        volume:
          $ref: '#/components/schemas/IndexVolume'
    IndexVolume:
      type: object
      properties:
        bytesFree:
          type: integer
          format: int64
        bytesLimit:
          type: integer
          format: int64
        bytesTotal:
          type: integer
          format: int64
        bytesUsed:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        id:
          type: integer
          format: int32
        indexVolumeGroupId:
          type: integer
          format: int32
        nodeName:
          type: string
        path:
          type: string
        state:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - CLOSED
        statusMs:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    IndexVolumeGroup:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    Indicators:
      type: object
      properties:
        errorCount:
          type: object
          additionalProperties:
            type: integer
            format: int32
        errorList:
          type: array
          items:
            $ref: '#/components/schemas/StoredError'
        uniqueErrorSet:
          type: array
          items:
            $ref: '#/components/schemas/StoredError'
          uniqueItems: true
    InfoPopupConfig:
      type: object
      properties:
        enabled:
          type: boolean
        title:
          type: string
        validationRegex:
          type: string
    IntegerField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    Job:
      type: object
      properties:
        advanced:
          type: boolean
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    JobNode:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        job:
          $ref: '#/components/schemas/Job'
        jobType:
          type: string
          enum:
          - UNKNOWN
          - CRON
          - FREQUENCY
          - DISTRIBUTED
        nodeName:
          type: string
        schedule:
          type: string
        taskLimit:
          type: integer
          format: int32
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    JobNodeInfo:
      type: object
      properties:
        currentTaskCount:
          type: integer
          format: int32
        lastExecutedTime:
          type: integer
          format: int64
        scheduleReferenceTime:
          type: integer
          format: int64
    KafkaConfigDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    LayoutConfig:
      type: object
      discriminator:
        propertyName: type
      properties:
        preferredSize:
          $ref: '#/components/schemas/Size'
        type:
          type: string
      required:
      - type
    Limits:
      type: object
      properties:
        durationMs:
          type: integer
          format: int64
        eventCount:
          type: integer
          format: int64
        streamCount:
          type: integer
          format: int64
      xml:
        name: limits
    ListConfigResponse:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/ConfigProperty'
    Location:
      type: object
      discriminator:
        propertyName: type
      properties:
        colNo:
          type: integer
          format: int32
        lineNo:
          type: integer
          format: int32
        type:
          type: string
      required:
      - type
    LoginRequest:
      type: object
      properties:
        password:
          type: string
        userId:
          type: string
    LoginResponse:
      type: object
      properties:
        authenticated:
          type: boolean
        redirectUri:
          type: string
    LongField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    MapDefinition:
      type: object
      properties:
        mapName:
          type: string
        refStreamDefinition:
          $ref: '#/components/schemas/RefStreamDefinition'
    Marker:
      type: object
      discriminator:
        propertyName: type
      properties:
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
        type:
          type: string
      required:
      - type
    Message:
      type: object
      properties:
        message:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    Meta:
      type: object
      properties:
        createMs:
          type: integer
          format: int64
        effectiveMs:
          type: integer
          format: int64
        feedName:
          type: string
        id:
          type: integer
          format: int64
        parentMetaId:
          type: integer
          format: int64
        pipelineUuid:
          type: string
        processorUuid:
          type: string
        status:
          type: string
          enum:
          - UNLOCKED
          - LOCKED
          - DELETED
        statusMs:
          type: integer
          format: int64
        typeName:
          type: string
    MetaRow:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: string
        meta:
          $ref: '#/components/schemas/Meta'
        pipelineName:
          type: string
    MoveOp:
      type: object
      properties:
        destinationFolderRef:
          $ref: '#/components/schemas/DocRef'
        docRefs:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    Node:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        priority:
          type: integer
          format: int32
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        url:
          type: string
        version:
          type: integer
          format: int32
    NodeStatusResult:
      type: object
      properties:
        master:
          type: boolean
        node:
          $ref: '#/components/schemas/Node'
    NumberFormatSettings:
      type: object
      allOf:
      - $ref: '#/components/schemas/FormatSettings'
      - type: object
        properties:
          decimalPlaces:
            type: integer
            format: int32
          useSeparator:
            type: boolean
    OffsetRange:
      type: object
      properties:
        length:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
    OverrideValueString:
      type: object
      properties:
        hasOverride:
          type: boolean
        value:
          type: string
    PageRequest:
      type: object
      properties:
        length:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
    PageResponse:
      type: object
      properties:
        exact:
          type: boolean
        length:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
    Param:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PasswordPolicyConfig:
      type: object
      properties:
        allowPasswordResets:
          type: boolean
        forcePasswordChangeOnFirstLogin:
          type: boolean
        mandatoryPasswordChangeDuration:
          type: string
        minimumPasswordLength:
          type: integer
          format: int32
          minimum: 0
        minimumPasswordStrength:
          type: integer
          format: int32
          maximum: 5
          minimum: 0
        neverUsedAccountDeactivationThreshold:
          type: string
        passwordComplexityRegex:
          type: string
        passwordPolicyMessage:
          type: string
        unusedAccountDeactivationThreshold:
          type: string
      required:
      - mandatoryPasswordChangeDuration
      - minimumPasswordLength
      - minimumPasswordStrength
      - neverUsedAccountDeactivationThreshold
      - unusedAccountDeactivationThreshold
    PermissionChangeEvent:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    PermissionChangeRequest:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/PermissionChangeEvent'
    PipelineDTO:
      type: object
      properties:
        configStack:
          type: array
          items:
            $ref: '#/components/schemas/PipelineData'
        description:
          type: string
        docRef:
          $ref: '#/components/schemas/DocRef'
        merged:
          $ref: '#/components/schemas/PipelineData'
        parentPipeline:
          $ref: '#/components/schemas/DocRef'
    PipelineData:
      type: object
      properties:
        elements:
          $ref: '#/components/schemas/PipelineElements'
        links:
          $ref: '#/components/schemas/PipelineLinks'
        pipelineReferences:
          $ref: '#/components/schemas/PipelineReferences'
        processors:
          type: array
          items:
            $ref: '#/components/schemas/Processor'
        properties:
          $ref: '#/components/schemas/PipelineProperties'
      xml:
        name: pipeline
    PipelineDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        name:
          type: string
        parentPipeline:
          $ref: '#/components/schemas/DocRef'
        pipelineData:
          $ref: '#/components/schemas/PipelineData'
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    PipelineElement:
      type: object
      properties:
        elementType:
          $ref: '#/components/schemas/PipelineElementType'
        id:
          type: string
        type:
          type: string
      required:
      - id
      - type
    PipelineElementType:
      type: object
      properties:
        category:
          type: string
          enum:
          - INTERNAL
          - READER
          - PARSER
          - FILTER
          - WRITER
          - DESTINATION
        icon:
          type: string
        roles:
          type: array
          items:
            type: string
        type:
          type: string
    PipelineElements:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/PipelineElement'
          xml:
            wrapped: true
        remove:
          type: array
          items:
            $ref: '#/components/schemas/PipelineElement'
          xml:
            wrapped: true
    PipelineLink:
      type: object
      properties:
        from:
          type: string
        sourcePipeline:
          $ref: '#/components/schemas/DocRef'
        to:
          type: string
      required:
      - from
      - to
    PipelineLinks:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/PipelineLink'
          xml:
            wrapped: true
        remove:
          type: array
          items:
            $ref: '#/components/schemas/PipelineLink'
          xml:
            wrapped: true
    PipelineProperties:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/PipelineProperty'
          xml:
            wrapped: true
        remove:
          type: array
          items:
            $ref: '#/components/schemas/PipelineProperty'
          xml:
            wrapped: true
    PipelineProperty:
      type: object
      properties:
        element:
          type: string
        name:
          type: string
        propertyType:
          $ref: '#/components/schemas/PipelinePropertyType'
        sourcePipeline:
          $ref: '#/components/schemas/DocRef'
        value:
          $ref: '#/components/schemas/PipelinePropertyValue'
      required:
      - element
      - name
    PipelinePropertyType:
      type: object
      properties:
        defaultValue:
          type: string
        description:
          type: string
        displayPriority:
          type: integer
          format: int32
        docRefTypes:
          type: array
          items:
            type: string
        elementType:
          $ref: '#/components/schemas/PipelineElementType'
        name:
          type: string
        pipelineReference:
          type: boolean
        type:
          type: string
    PipelinePropertyValue:
      type: object
      properties:
        boolean:
          type: boolean
        entity:
          $ref: '#/components/schemas/DocRef'
        integer:
          type: integer
          format: int32
        long:
          type: integer
          format: int64
        string:
          type: string
    PipelineReference:
      type: object
      properties:
        element:
          type: string
        feed:
          $ref: '#/components/schemas/DocRef'
        name:
          type: string
        pipeline:
          $ref: '#/components/schemas/DocRef'
        sourcePipeline:
          $ref: '#/components/schemas/DocRef'
        streamType:
          type: string
      required:
      - element
      - feed
      - name
      - pipeline
      - streamType
    PipelineReferences:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/PipelineReference'
          xml:
            wrapped: true
        remove:
          type: array
          items:
            $ref: '#/components/schemas/PipelineReference'
          xml:
            wrapped: true
    PipelineStepRequest:
      type: object
      properties:
        childStreamType:
          type: string
        code:
          type: object
          additionalProperties:
            type: string
        criteria:
          $ref: '#/components/schemas/FindMetaCriteria'
        pipeline:
          $ref: '#/components/schemas/DocRef'
        stepFilterMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SteppingFilterSettings'
        stepLocation:
          $ref: '#/components/schemas/StepLocation'
        stepSize:
          type: integer
          format: int32
        stepType:
          type: string
          enum:
          - FIRST
          - FORWARD
          - BACKWARD
          - LAST
          - REFRESH
    ProcessConfig:
      type: object
      properties:
        defaultRecordLimit:
          type: integer
          format: int64
        defaultTimeLimit:
          type: integer
          format: int64
    Processor:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        deleted:
          type: boolean
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        pipelineName:
          type: string
        pipelineUuid:
          type: string
        taskType:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: integer
          format: int32
      xml:
        name: parameters
    ProcessorFilter:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        deleted:
          type: boolean
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        pipelineName:
          type: string
        pipelineUuid:
          type: string
        priority:
          type: integer
          format: int32
        processor:
          $ref: '#/components/schemas/Processor'
        processorFilterTracker:
          $ref: '#/components/schemas/ProcessorFilterTracker'
        processorUuid:
          type: string
        queryData:
          $ref: '#/components/schemas/QueryData'
        reprocess:
          type: boolean
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: integer
          format: int32
    ProcessorFilterRow:
      type: object
      allOf:
      - $ref: '#/components/schemas/ProcessorListRow'
      - type: object
        properties:
          processorFilter:
            $ref: '#/components/schemas/ProcessorFilter'
    ProcessorFilterTracker:
      type: object
      properties:
        eventCount:
          type: integer
          format: int64
        id:
          type: integer
          format: int32
        lastPollMs:
          type: integer
          format: int64
        lastPollTaskCount:
          type: integer
          format: int32
        maxMetaCreateMs:
          type: integer
          format: int64
        metaCount:
          type: integer
          format: int64
        metaCreateMs:
          type: integer
          format: int64
        minEventId:
          type: integer
          format: int64
        minMetaCreateMs:
          type: integer
          format: int64
        minMetaId:
          type: integer
          format: int64
        status:
          type: string
        version:
          type: integer
          format: int32
    ProcessorListRow:
      type: object
      discriminator:
        propertyName: type
      properties:
        expander:
          $ref: '#/components/schemas/Expander'
        type:
          type: string
      required:
      - type
    ProcessorListRowResultPage:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/ProcessorListRow'
    ProcessorRow:
      type: object
      allOf:
      - $ref: '#/components/schemas/ProcessorListRow'
      - type: object
        properties:
          processor:
            $ref: '#/components/schemas/Processor'
    ProcessorTask:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        data:
          type: string
        endTimeMs:
          type: integer
          format: int64
        feedName:
          type: string
        id:
          type: integer
          format: int64
        metaId:
          type: integer
          format: int64
        nodeName:
          type: string
        processorFilter:
          $ref: '#/components/schemas/ProcessorFilter'
        startTimeMs:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - UNPROCESSED
          - ASSIGNED
          - PROCESSING
          - COMPLETE
          - FAILED
          - DELETED
        statusTimeMs:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
    ProcessorTaskList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ProcessorTask'
        nodeName:
          type: string
    ProcessorTaskSummary:
      type: object
      properties:
        count:
          type: integer
          format: int64
        feed:
          type: string
        pipeline:
          $ref: '#/components/schemas/DocRef'
        priority:
          type: integer
          format: int32
        status:
          type: string
          enum:
          - UNPROCESSED
          - ASSIGNED
          - PROCESSING
          - COMPLETE
          - FAILED
          - DELETED
    Prop:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        showInList:
          type: boolean
        showInSelection:
          type: boolean
        validation:
          type: string
        validationMessage:
          type: string
        value:
          type: string
    PropertyPath:
      type: object
      properties:
        parts:
          type: array
          items:
            type: string
    Query:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DocRef'
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        params:
          type: array
          items:
            $ref: '#/components/schemas/Param'
    QueryComponentSettings:
      type: object
      allOf:
      - $ref: '#/components/schemas/ComponentSettings'
      - type: object
        properties:
          automate:
            $ref: '#/components/schemas/Automate'
          dataSource:
            $ref: '#/components/schemas/DocRef'
          expression:
            $ref: '#/components/schemas/ExpressionOperator'
    QueryConfig:
      type: object
      properties:
        infoPopup:
          $ref: '#/components/schemas/InfoPopupConfig'
    QueryData:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DocRef'
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        limits:
          $ref: '#/components/schemas/Limits'
      xml:
        name: query
    QueryKey:
      type: object
      properties:
        uuid:
          type: string
    RangeInteger:
      type: object
      properties:
        from:
          type: integer
          format: int32
        matchNull:
          type: boolean
        to:
          type: integer
          format: int32
    RangeLong:
      type: object
      properties:
        from:
          type: integer
          format: int64
        matchNull:
          type: boolean
        to:
          type: integer
          format: int64
    Rec:
      type: object
      properties:
        recordNo:
          type: integer
          format: int64
        streamId:
          type: integer
          format: int64
    ReceiveDataRule:
      type: object
      properties:
        action:
          type: string
          enum:
          - RECEIVE
          - REJECT
          - DROP
        creationTime:
          type: integer
          format: int64
        enabled:
          type: boolean
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        name:
          type: string
        ruleNumber:
          type: integer
          format: int32
      xml:
        name: dataReceiptRule
    ReceiveDataRules:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/AbstractField'
        name:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/ReceiveDataRule'
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    RefDataLookupRequest:
      type: object
      properties:
        effectiveTime:
          type: string
        key:
          type: string
        mapName:
          type: string
        referenceLoaders:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceLoader'
      required:
      - key
      - mapName
      - referenceLoaders
    RefDataProcessingInfo:
      type: object
      properties:
        createTimeEpochMs:
          type: integer
          format: int64
        effectiveTimeEpochMs:
          type: integer
          format: int64
        lastAccessedTimeEpochMs:
          type: integer
          format: int64
        processingState:
          type: string
          enum:
          - LOAD_IN_PROGRESS
          - PURGE_IN_PROGRESS
          - COMPLETE
    RefStoreEntry:
      type: object
      properties:
        key:
          type: string
        mapDefinition:
          $ref: '#/components/schemas/MapDefinition'
        refDataProcessingInfo:
          $ref: '#/components/schemas/RefDataProcessingInfo'
        value:
          type: string
        valueReferenceCount:
          type: integer
          format: int32
    RefStreamDefinition:
      type: object
      properties:
        pipelineDocRef:
          $ref: '#/components/schemas/DocRef'
        pipelineVersion:
          type: string
        streamId:
          type: integer
          format: int64
        streamNo:
          type: integer
          format: int64
    ReferenceLoader:
      type: object
      properties:
        loaderPipeline:
          $ref: '#/components/schemas/DocRef'
        referenceFeed:
          $ref: '#/components/schemas/DocRef'
      required:
      - loaderPipeline
      - referenceFeed
    RemovePermissionEvent:
      type: object
      allOf:
      - $ref: '#/components/schemas/PermissionChangeEvent'
      - type: object
        properties:
          documentUuid:
            type: string
          permission:
            type: string
          userUuid:
            type: string
    RenameOp:
      type: object
      properties:
        docRef:
          $ref: '#/components/schemas/DocRef'
        name:
          type: string
    ReprocessDataInfo:
      type: object
      properties:
        details:
          type: string
        message:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    ResetPasswordRequest:
      type: object
      properties:
        confirmNewPassword:
          type: string
        newPassword:
          type: string
    ResourceGeneration:
      type: object
      properties:
        messageList:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        resourceKey:
          $ref: '#/components/schemas/ResourceKey'
    ResourceKey:
      type: object
      properties:
        key:
          type: string
        name:
          type: string
    Result:
      type: object
      discriminator:
        propertyName: type
      properties:
        componentId:
          type: string
        error:
          type: string
        type:
          type: string
      required:
      - type
    ResultPageActivity:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
    ResultPageCustomRollUpMask:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/CustomRollUpMask'
    ResultPageCustomRollUpMaskFields:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/CustomRollUpMaskFields'
    ResultPageDBTableStatus:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/DBTableStatus'
    ResultPageDependency:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Dependency'
    ResultPageFsVolume:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/FsVolume'
    ResultPageIndexShard:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/IndexShard'
    ResultPageIndexVolume:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/IndexVolume'
    ResultPageIndexVolumeGroup:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/IndexVolumeGroup'
    ResultPageJob:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    ResultPageJobNode:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/JobNode'
    ResultPageMetaRow:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/MetaRow'
    ResultPageProcessorTask:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/ProcessorTask'
    ResultPageProcessorTaskSummary:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/ProcessorTaskSummary'
    ResultPageStoredQuery:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/StoredQuery'
    ResultPageUser:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/User'
    ResultRequest:
      type: object
      properties:
        componentId:
          type: string
        fetch:
          type: string
          enum:
          - NONE
          - CHANGES
          - ALL
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/TableSettings'
        openGroups:
          type: array
          items:
            type: string
          uniqueItems: true
        requestedRange:
          $ref: '#/components/schemas/OffsetRange'
        resultStyle:
          type: string
          enum:
          - FLAT
          - TABLE
    Row:
      type: object
      properties:
        backgroundColor:
          type: string
        depth:
          type: integer
          format: int32
        groupKey:
          type: string
        textColor:
          type: string
        values:
          type: array
          items:
            type: string
            xml:
              name: highlight
    SavePipelineXmlRequest:
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/DocRef'
        xml:
          type: string
    ScheduledTimes:
      type: object
      properties:
        lastExecutedTime:
          type: string
        nextScheduledTime:
          type: string
    ScriptDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/DocRef'
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    Search:
      type: object
      properties:
        componentSettingsMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentSettings'
        dataSourceRef:
          $ref: '#/components/schemas/DocRef'
        expression:
          $ref: '#/components/schemas/ExpressionOperator'
        incremental:
          type: boolean
        params:
          type: array
          items:
            $ref: '#/components/schemas/Param'
        queryInfo:
          type: string
        storeHistory:
          type: boolean
    SearchAccountRequest:
      type: object
      properties:
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        quickFilter:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    SearchBusPollRequest:
      type: object
      properties:
        applicationInstanceId:
          type: string
        searchRequests:
          type: array
          items:
            $ref: '#/components/schemas/DashboardSearchRequest'
          uniqueItems: true
    SearchRequest:
      type: object
      properties:
        dateTimeLocale:
          type: string
        incremental:
          type: boolean
        key:
          $ref: '#/components/schemas/QueryKey'
        query:
          $ref: '#/components/schemas/Query'
        resultRequests:
          type: array
          items:
            $ref: '#/components/schemas/ResultRequest'
          xml:
            wrapped: true
        timeout:
          type: integer
          format: int64
      xml:
        name: searchRequest
    SearchResponse:
      type: object
      properties:
        complete:
          type: boolean
        errors:
          type: array
          items:
            type: string
            xml:
              name: error
          xml:
            wrapped: true
        highlights:
          type: array
          items:
            type: string
            xml:
              name: highlight
          xml:
            wrapped: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
          xml:
            wrapped: true
      xml:
        name: searchResponse
    SearchTokenRequest:
      type: object
      properties:
        pageRequest:
          $ref: '#/components/schemas/PageRequest'
        quickFilter:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaFieldSort'
    SelectionIndexShardStatus:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: string
            enum:
            - CLOSED
            - OPEN
            - CLOSING
            - OPENING
            - NEW
            - DELETED
            - CORRUPT
          uniqueItems: true
    SelectionInteger:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: integer
            format: int32
          uniqueItems: true
    SelectionLong:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: integer
            format: int64
          uniqueItems: true
    SelectionString:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: string
          uniqueItems: true
    SelectionSummary:
      type: object
      properties:
        ageRange:
          $ref: '#/components/schemas/RangeLong'
        feedCount:
          type: integer
          format: int64
        itemCount:
          type: integer
          format: int64
        pipelineCount:
          type: integer
          format: int64
        processorCount:
          type: integer
          format: int64
        statusCount:
          type: integer
          format: int64
        typeCount:
          type: integer
          format: int64
    SelectionVolumeUseStatus:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: string
            enum:
            - ACTIVE
            - INACTIVE
            - CLOSED
          uniqueItems: true
    SessionDetails:
      type: object
      properties:
        createMs:
          type: integer
          format: int64
        lastAccessedAgent:
          type: string
        lastAccessedMs:
          type: integer
          format: int64
        nodeName:
          type: string
        userName:
          type: string
    SessionInfo:
      type: object
      properties:
        buildInfo:
          $ref: '#/components/schemas/BuildInfo'
        nodeName:
          type: string
        userName:
          type: string
    SessionListResponse:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/SessionDetails'
    SetAssignedToRequest:
      type: object
      properties:
        annotationIdList:
          type: array
          items:
            type: integer
            format: int64
        assignedTo:
          type: string
    SetStatusRequest:
      type: object
      properties:
        annotationIdList:
          type: array
          items:
            type: integer
            format: int64
        status:
          type: string
    SharedElementData:
      type: object
      properties:
        codeIndicators:
          $ref: '#/components/schemas/Indicators'
        formatInput:
          type: boolean
        formatOutput:
          type: boolean
        input:
          type: string
        output:
          type: string
        outputIndicators:
          $ref: '#/components/schemas/Indicators'
    SharedStepData:
      type: object
      properties:
        elementMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SharedElementData'
        sourceLocation:
          $ref: '#/components/schemas/SourceLocation'
    Size:
      type: object
      properties:
        height:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
      xml:
        name: size
    SolrConnectionConfig:
      type: object
      properties:
        instanceType:
          type: string
          enum:
          - SINGLE_NOOE
          - SOLR_CLOUD
        solrUrls:
          type: array
          items:
            type: string
        useZk:
          type: boolean
        zkHosts:
          type: array
          items:
            type: string
        zkPath:
          type: string
      xml:
        name: connection
    SolrConnectionTestResponse:
      type: object
      properties:
        message:
          type: string
        ok:
          type: boolean
    SolrIndexDoc:
      type: object
      properties:
        collection:
          type: string
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        deletedFields:
          type: array
          items:
            $ref: '#/components/schemas/SolrIndexField'
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SolrIndexField'
        name:
          type: string
        retentionExpression:
          $ref: '#/components/schemas/ExpressionOperator'
        solrConnectionConfig:
          $ref: '#/components/schemas/SolrConnectionConfig'
        solrSynchState:
          $ref: '#/components/schemas/SolrSynchState'
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    SolrIndexField:
      type: object
      properties:
        defaultValue:
          type: string
        docValues:
          type: boolean
        fieldName:
          type: string
        fieldType:
          type: string
        fieldUse:
          type: string
          enum:
          - ID
          - BOOLEAN_FIELD
          - INTEGER_FIELD
          - LONG_FIELD
          - FLOAT_FIELD
          - DOUBLE_FIELD
          - DATE_FIELD
          - FIELD
          - NUMERIC_FIELD
        indexed:
          type: boolean
        multiValued:
          type: boolean
        omitNorms:
          type: boolean
        omitPositions:
          type: boolean
        omitTermFreqAndPositions:
          type: boolean
        required:
          type: boolean
        sortMissingFirst:
          type: boolean
        sortMissingLast:
          type: boolean
        stored:
          type: boolean
        supportedConditions:
          type: array
          items:
            type: string
            enum:
            - CONTAINS
            - EQUALS
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL_TO
            - LESS_THAN
            - LESS_THAN_OR_EQUAL_TO
            - BETWEEN
            - IN
            - IN_DICTIONARY
            - IN_FOLDER
            - IS_DOC_REF
            - IS_NULL
            - IS_NOT_NULL
        termOffsets:
          type: boolean
        termPayloads:
          type: boolean
        termPositions:
          type: boolean
        termVectors:
          type: boolean
        uninvertible:
          type: boolean
    SolrSynchState:
      type: object
      properties:
        lastSynchronized:
          type: integer
          format: int64
        messages:
          type: array
          items:
            type: string
    Sort:
      type: object
      properties:
        direction:
          type: string
          enum:
          - ASCENDING
          - DESCENDING
        order:
          type: integer
          format: int32
    SourceConfig:
      type: object
      properties:
        maxCharactersInPreviewFetch:
          type: integer
          format: int64
          minimum: 1
        maxCharactersPerFetch:
          type: integer
          format: int64
          minimum: 1
        maxCharactersToCompleteLine:
          type: integer
          format: int64
          minimum: 0
    SourceLocation:
      type: object
      properties:
        childType:
          type: string
        dataRange:
          $ref: '#/components/schemas/DataRange'
        highlight:
          $ref: '#/components/schemas/TextRange'
        id:
          type: integer
          format: int64
        partNo:
          type: integer
          format: int64
        segmentNo:
          type: integer
          format: int64
        truncateToWholeLines:
          type: boolean
    SplashConfig:
      type: object
      properties:
        body:
          type: string
        enabled:
          type: boolean
        title:
          type: string
        version:
          type: string
    SplitLayoutConfig:
      type: object
      allOf:
      - $ref: '#/components/schemas/LayoutConfig'
      - type: object
        properties:
          children:
            type: array
            items:
              $ref: '#/components/schemas/LayoutConfig'
            xml:
              wrapped: true
          dimension:
            type: integer
            format: int32
      xml:
        name: splitLayout
    StatisticField:
      type: object
      properties:
        fieldName:
          type: string
    StatisticStoreDoc:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/StatisticsDataSourceData'
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        name:
          type: string
        precision:
          type: integer
          format: int64
        rollUpType:
          type: string
          enum:
          - NONE
          - ALL
          - CUSTOM
        statisticType:
          type: string
          enum:
          - COUNT
          - VALUE
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    StatisticsDataSourceData:
      type: object
      properties:
        customRollUpMasks:
          type: array
          items:
            $ref: '#/components/schemas/CustomRollUpMask'
          uniqueItems: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/StatisticField'
    StatisticsDataSourceFieldChangeRequest:
      type: object
      properties:
        newStatisticsDataSourceData:
          $ref: '#/components/schemas/StatisticsDataSourceData'
        oldStatisticsDataSourceData:
          $ref: '#/components/schemas/StatisticsDataSourceData'
    StepLocation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        partNo:
          type: integer
          format: int64
        recordNo:
          type: integer
          format: int64
    SteppingFilterSettings:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/XPathFilter'
        skipToOutput:
          type: string
          enum:
          - NOT_EMPTY
          - EMPTY
        skipToSeverity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    SteppingResult:
      type: object
      properties:
        currentStreamOffset:
          type: integer
          format: int32
        foundRecord:
          type: boolean
        generalErrors:
          type: array
          items:
            type: string
          uniqueItems: true
        stepData:
          $ref: '#/components/schemas/SharedStepData'
        stepFilterMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SteppingFilterSettings'
        stepLocation:
          $ref: '#/components/schemas/StepLocation'
    StoredError:
      type: object
      properties:
        elementId:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        message:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    StoredQuery:
      type: object
      properties:
        componentId:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dashboardUuid:
          type: string
        data:
          type: string
        favourite:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        query:
          $ref: '#/components/schemas/Query'
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    StreamLocation:
      type: object
      allOf:
      - $ref: '#/components/schemas/Location'
      - type: object
        properties:
          streamNo:
            type: integer
            format: int64
    StreamTaskPatch:
      type: object
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: string
    StringCriteria:
      type: object
      properties:
        caseInsensitive:
          type: boolean
        matchNull:
          type: boolean
        matchStyle:
          type: string
          enum:
          - Wild
          - WildStart
          - WildEnd
          - WildStartAndEnd
        string:
          type: string
        stringUpper:
          type: string
    StroomStatsStoreDoc:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/StroomStatsStoreEntityData'
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        name:
          type: string
        precision:
          type: string
          enum:
          - SECOND
          - MINUTE
          - HOUR
          - DAY
          - FOREVER
        rollUpType:
          type: string
          enum:
          - NONE
          - ALL
          - CUSTOM
        statisticType:
          type: string
          enum:
          - COUNT
          - VALUE
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    StroomStatsStoreEntityData:
      type: object
      properties:
        customRollUpMasks:
          type: array
          items:
            $ref: '#/components/schemas/CustomRollUpMask'
          uniqueItems: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/StatisticField'
    StroomStatsStoreFieldChangeRequest:
      type: object
      properties:
        newEntityData:
          $ref: '#/components/schemas/StroomStatsStoreEntityData'
        oldEntityData:
          $ref: '#/components/schemas/StroomStatsStoreEntityData'
    Summary:
      type: object
      allOf:
      - $ref: '#/components/schemas/Marker'
      - type: object
        properties:
          count:
            type: integer
            format: int32
          expander:
            $ref: '#/components/schemas/Expander'
          total:
            type: integer
            format: int32
    SystemInfoResult:
      type: object
      properties:
        description:
          type: string
        details:
          type: object
          additionalProperties:
            type: object
        name:
          type: string
      required:
      - name
    SystemInfoResultList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SystemInfoResult'
    TabConfig:
      type: object
      properties:
        id:
          type: string
        visible:
          type: boolean
      xml:
        name: tab
    TabLayoutConfig:
      type: object
      allOf:
      - $ref: '#/components/schemas/LayoutConfig'
      - type: object
        properties:
          selected:
            type: integer
            format: int32
          tabs:
            type: array
            items:
              $ref: '#/components/schemas/TabConfig'
            xml:
              wrapped: true
      xml:
        name: tabLayout
    TableComponentSettings:
      type: object
      properties:
        conditionalFormattingRules:
          type: array
          items:
            $ref: '#/components/schemas/ConditionalFormattingRule'
        extractValues:
          type: boolean
        extractionPipeline:
          $ref: '#/components/schemas/DocRef'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        maxResults:
          type: array
          items:
            type: integer
            format: int32
        modelVersion:
          type: string
        queryId:
          type: string
        showDetail:
          type: boolean
    TableCoprocessorSettings:
      type: object
      allOf:
      - $ref: '#/components/schemas/CoprocessorSettings'
      - type: object
        properties:
          componentIds:
            type: array
            items:
              type: string
          tableSettings:
            $ref: '#/components/schemas/TableSettings'
    TableResult:
      type: object
      allOf:
      - $ref: '#/components/schemas/Result'
      - type: object
        properties:
          fields:
            type: array
            items:
              $ref: '#/components/schemas/Field'
          resultRange:
            $ref: '#/components/schemas/OffsetRange'
          rows:
            type: array
            items:
              $ref: '#/components/schemas/Row'
          totalResults:
            type: integer
            format: int32
    TableResultRequest:
      type: object
      allOf:
      - $ref: '#/components/schemas/ComponentResultRequest'
      - type: object
        properties:
          openGroups:
            type: array
            items:
              type: string
            uniqueItems: true
          requestedRange:
            $ref: '#/components/schemas/OffsetRange'
          tableSettings:
            $ref: '#/components/schemas/TableSettings'
    TableSettings:
      type: object
      properties:
        conditionalFormattingRules:
          type: array
          items:
            $ref: '#/components/schemas/ConditionalFormattingRule'
        extractValues:
          type: boolean
        extractionPipeline:
          $ref: '#/components/schemas/DocRef'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        maxResults:
          type: array
          items:
            type: integer
            format: int32
        modelVersion:
          type: string
        queryId:
          type: string
        showDetail:
          type: boolean
    TaskId:
      type: object
      properties:
        id:
          type: string
        parentId:
          $ref: '#/components/schemas/TaskId'
    TaskProgress:
      type: object
      properties:
        expander:
          $ref: '#/components/schemas/Expander'
        filterMatchState:
          type: string
          enum:
          - MATCHED
          - NOT_MATCHED
        id:
          $ref: '#/components/schemas/TaskId'
        nodeName:
          type: string
        submitTimeMs:
          type: integer
          format: int64
        taskInfo:
          type: string
        taskName:
          type: string
        threadName:
          type: string
        timeNowMs:
          type: integer
          format: int64
        userName:
          type: string
    TaskProgressResponse:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/TaskProgress'
    TerminateTaskProgressRequest:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/FindTaskCriteria'
        kill:
          type: boolean
    TextComponentSettings:
      type: object
      allOf:
      - $ref: '#/components/schemas/ComponentSettings'
      - type: object
        properties:
          colFromField:
            $ref: '#/components/schemas/Field'
          colToField:
            $ref: '#/components/schemas/Field'
          lineFromField:
            $ref: '#/components/schemas/Field'
          lineToField:
            $ref: '#/components/schemas/Field'
          modelVersion:
            type: string
          partNoField:
            $ref: '#/components/schemas/Field'
          pipeline:
            $ref: '#/components/schemas/DocRef'
          recordNoField:
            $ref: '#/components/schemas/Field'
          showAsHtml:
            type: boolean
          showStepping:
            type: boolean
          streamIdField:
            $ref: '#/components/schemas/Field'
          tableId:
            type: string
    TextConverterDoc:
      type: object
      properties:
        converterType:
          type: string
          enum:
          - NONE
          - DATA_SPLITTER
          - XML_FRAGMENT
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    TextField:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractField'
    TextRange:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/Location'
        to:
          $ref: '#/components/schemas/Location'
    ThemeConfig:
      type: object
      properties:
        backgroundAttachment:
          type: string
        backgroundColor:
          type: string
        backgroundImage:
          type: string
        backgroundOpacity:
          type: string
        backgroundPosition:
          type: string
        backgroundRepeat:
          type: string
        labelColours:
          type: string
        tubeOpacity:
          type: string
        tubeVisible:
          type: string
    TimeZone:
      type: object
      properties:
        id:
          type: string
        offsetHours:
          type: integer
          format: int32
        offsetMinutes:
          type: integer
          format: int32
        use:
          type: string
          enum:
          - Local
          - UTC
          - Id
          - Offset
    Token:
      type: object
      properties:
        comments:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        enabled:
          type: boolean
        expiresOnMs:
          type: integer
          format: int64
        id:
          type: integer
          format: int32
        tokenType:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        userEmail:
          type: string
        userId:
          type: string
        version:
          type: integer
          format: int32
    TokenConfig:
      type: object
      properties:
        algorithm:
          type: string
        defaultApiKeyExpiryInMinutes:
          type: integer
          format: int64
        jwsIssuer:
          type: string
        timeUntilExpirationForEmailResetToken:
          type: string
        timeUntilExpirationForUserToken:
          type: string
      required:
      - algorithm
      - jwsIssuer
      - timeUntilExpirationForEmailResetToken
      - timeUntilExpirationForUserToken
    TokenRequest:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        code:
          type: string
        grant_type:
          type: string
        redirect_uri:
          type: string
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
          format: int32
        id_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
    TokenResultPage:
      type: object
      properties:
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Token'
    UiConfig:
      type: object
      properties:
        aboutHtml:
          type: string
        activity:
          $ref: '#/components/schemas/ActivityConfig'
        defaultMaxResults:
          type: string
        helpUrl:
          type: string
        htmlTitle:
          type: string
        maintenanceMessage:
          type: string
        namePattern:
          type: string
        oncontextmenu:
          type: string
          pattern: ^return (true|false);$
        process:
          $ref: '#/components/schemas/ProcessConfig'
        query:
          $ref: '#/components/schemas/QueryConfig'
        source:
          $ref: '#/components/schemas/SourceConfig'
        splash:
          $ref: '#/components/schemas/SplashConfig'
        theme:
          $ref: '#/components/schemas/ThemeConfig'
        uiPreferences:
          $ref: '#/components/schemas/UiPreferences'
        url:
          $ref: '#/components/schemas/UrlConfig'
        welcomeHtml:
          type: string
    UiPreferences:
      type: object
      properties:
        dateFormat:
          type: string
    UpdateAccountRequest:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/Account'
        confirmPassword:
          type: string
        password:
          type: string
    UpdateStatusRequest:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/FindMetaCriteria'
        currentStatus:
          type: string
          enum:
          - UNLOCKED
          - LOCKED
          - DELETED
        newStatus:
          type: string
          enum:
          - UNLOCKED
          - LOCKED
          - DELETED
    UploadDataRequest:
      type: object
      properties:
        effectiveMs:
          type: integer
          format: int64
        feedName:
          type: string
        fileName:
          type: string
        key:
          $ref: '#/components/schemas/ResourceKey'
        metaData:
          type: string
        streamTypeName:
          type: string
    UrlConfig:
      type: object
      properties:
        apiKeys:
          type: string
        changepassword:
          type: string
        users:
          type: string
    User:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        enabled:
          type: boolean
        group:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: integer
          format: int32
    UserAndPermissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
          uniqueItems: true
        userId:
          type: string
    UserPermissionRequest:
      type: object
      properties:
        permission:
          type: string
    ValidateExpressionResult:
      type: object
      properties:
        ok:
          type: boolean
        string:
          type: string
    ValidateSessionResponse:
      type: object
      properties:
        redirectUri:
          type: string
        userId:
          type: string
        valid:
          type: boolean
    VisComponentSettings:
      type: object
      allOf:
      - $ref: '#/components/schemas/ComponentSettings'
      - type: object
        properties:
          json:
            type: string
          tableId:
            type: string
          tableSettings:
            $ref: '#/components/schemas/TableComponentSettings'
          visualisation:
            $ref: '#/components/schemas/DocRef'
    VisResult:
      type: object
      allOf:
      - $ref: '#/components/schemas/Result'
      - type: object
        properties:
          dataPoints:
            type: integer
            format: int64
          jsonData:
            type: string
    VisResultRequest:
      type: object
      allOf:
      - $ref: '#/components/schemas/ComponentResultRequest'
      - type: object
        properties:
          requestedRange:
            $ref: '#/components/schemas/OffsetRange'
          visDashboardSettings:
            $ref: '#/components/schemas/VisComponentSettings'
    VisualisationDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        functionName:
          type: string
        name:
          type: string
        scriptRef:
          $ref: '#/components/schemas/DocRef'
        settings:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    XPathFilter:
      type: object
      properties:
        ignoreCase:
          type: boolean
        matchType:
          type: string
          enum:
          - EXISTS
          - CONTAINS
          - EQUALS
          - UNIQUE
        path:
          type: string
        uniqueValues:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Rec'
        value:
          type: string
    XmlSchemaDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        deprecated:
          type: boolean
        description:
          type: string
        name:
          type: string
        namespaceURI:
          type: string
        schemaGroup:
          type: string
        systemId:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    XsltDoc:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTime:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
