/*
 * This file is generated by jOOQ.
 */
package stroom.security.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.security.impl.db.jooq.Indexes;
import stroom.security.impl.db.jooq.Keys;
import stroom.security.impl.db.jooq.Stroom;
import stroom.security.impl.db.jooq.tables.records.ApiKeyRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiKey extends TableImpl<ApiKeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.api_key</code>
     */
    public static final ApiKey API_KEY = new ApiKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiKeyRecord> getRecordType() {
        return ApiKeyRecord.class;
    }

    /**
     * The column <code>stroom.api_key.id</code>.
     */
    public final TableField<ApiKeyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.api_key.version</code>.
     */
    public final TableField<ApiKeyRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.create_time_ms</code>.
     */
    public final TableField<ApiKeyRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.create_user</code>.
     */
    public final TableField<ApiKeyRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.update_time_ms</code>.
     */
    public final TableField<ApiKeyRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.update_user</code>.
     */
    public final TableField<ApiKeyRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.fk_owner_uuid</code>.
     */
    public final TableField<ApiKeyRecord, String> FK_OWNER_UUID = createField(DSL.name("fk_owner_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.api_key_hash</code>.
     */
    public final TableField<ApiKeyRecord, String> API_KEY_HASH = createField(DSL.name("api_key_hash"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.api_key_salt</code>.
     */
    public final TableField<ApiKeyRecord, String> API_KEY_SALT = createField(DSL.name("api_key_salt"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.api_key_prefix</code>.
     */
    public final TableField<ApiKeyRecord, String> API_KEY_PREFIX = createField(DSL.name("api_key_prefix"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.expires_on_ms</code>.
     */
    public final TableField<ApiKeyRecord, Long> EXPIRES_ON_MS = createField(DSL.name("expires_on_ms"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.api_key.name</code>.
     */
    public final TableField<ApiKeyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.api_key.comments</code>.
     */
    public final TableField<ApiKeyRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.api_key.enabled</code>.
     */
    public final TableField<ApiKeyRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private ApiKey(Name alias, Table<ApiKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiKey(Name alias, Table<ApiKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.api_key</code> table reference
     */
    public ApiKey(String alias) {
        this(DSL.name(alias), API_KEY);
    }

    /**
     * Create an aliased <code>stroom.api_key</code> table reference
     */
    public ApiKey(Name alias) {
        this(alias, API_KEY);
    }

    /**
     * Create a <code>stroom.api_key</code> table reference
     */
    public ApiKey() {
        this(DSL.name("api_key"), null);
    }

    public <O extends Record> ApiKey(Table<O> child, ForeignKey<O, ApiKeyRecord> key) {
        super(child, key, API_KEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.API_KEY_API_KEY_HASH_ENABLED_EXPIRES_OWNER_IDX);
    }

    @Override
    public Identity<ApiKeyRecord, Integer> getIdentity() {
        return (Identity<ApiKeyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApiKeyRecord> getPrimaryKey() {
        return Keys.KEY_API_KEY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApiKeyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_API_KEY_API_KEY_OWNER_NAME_IDX, Keys.KEY_API_KEY_API_KEY_API_KEY_HASH_IDX);
    }

    @Override
    public List<ForeignKey<ApiKeyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.API_KEY_FK_OWNER_UUID);
    }

    private transient StroomUser _stroomUser;

    /**
     * Get the implicit join path to the <code>stroom.stroom_user</code> table.
     */
    public StroomUser stroomUser() {
        if (_stroomUser == null)
            _stroomUser = new StroomUser(this, Keys.API_KEY_FK_OWNER_UUID);

        return _stroomUser;
    }

    @Override
    public TableField<ApiKeyRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public ApiKey as(String alias) {
        return new ApiKey(DSL.name(alias), this);
    }

    @Override
    public ApiKey as(Name alias) {
        return new ApiKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKey rename(String name) {
        return new ApiKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKey rename(Name name) {
        return new ApiKey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Integer, Long, String, Long, String, String, String, String, String, Long, String, String, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
