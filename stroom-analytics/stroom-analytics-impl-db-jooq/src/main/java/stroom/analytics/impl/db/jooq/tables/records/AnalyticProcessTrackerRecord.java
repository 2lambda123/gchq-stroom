/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.analytics.impl.db.jooq.tables.AnalyticProcessTracker;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalyticProcessTrackerRecord extends UpdatableRecordImpl<AnalyticProcessTrackerRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>stroom.analytic_process_tracker.fk_analytic_process_uuid</code>.
     */
    public void setFkAnalyticProcessUuid(String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>stroom.analytic_process_tracker.fk_analytic_process_uuid</code>.
     */
    public String getFkAnalyticProcessUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>stroom.analytic_process_tracker.data</code>.
     */
    public void setData(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.analytic_process_tracker.data</code>.
     */
    public String getData() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return AnalyticProcessTracker.ANALYTIC_PROCESS_TRACKER.FK_ANALYTIC_PROCESS_UUID;
    }

    @Override
    public Field<String> field2() {
        return AnalyticProcessTracker.ANALYTIC_PROCESS_TRACKER.DATA;
    }

    @Override
    public String component1() {
        return getFkAnalyticProcessUuid();
    }

    @Override
    public String component2() {
        return getData();
    }

    @Override
    public String value1() {
        return getFkAnalyticProcessUuid();
    }

    @Override
    public String value2() {
        return getData();
    }

    @Override
    public AnalyticProcessTrackerRecord value1(String value) {
        setFkAnalyticProcessUuid(value);
        return this;
    }

    @Override
    public AnalyticProcessTrackerRecord value2(String value) {
        setData(value);
        return this;
    }

    @Override
    public AnalyticProcessTrackerRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnalyticProcessTrackerRecord
     */
    public AnalyticProcessTrackerRecord() {
        super(AnalyticProcessTracker.ANALYTIC_PROCESS_TRACKER);
    }

    /**
     * Create a detached, initialised AnalyticProcessTrackerRecord
     */
    public AnalyticProcessTrackerRecord(String fkAnalyticProcessUuid, String data) {
        super(AnalyticProcessTracker.ANALYTIC_PROCESS_TRACKER);

        setFkAnalyticProcessUuid(fkAnalyticProcessUuid);
        setData(data);
    }
}
