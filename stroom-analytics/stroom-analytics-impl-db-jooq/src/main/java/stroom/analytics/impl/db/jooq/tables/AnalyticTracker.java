/*
 * This file is generated by jOOQ.
 */

package stroom.analytics.impl.db.jooq.tables;


import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.AnalyticTrackerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AnalyticTracker extends TableImpl<AnalyticTrackerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.analytic_tracker</code>
     */
    public static final AnalyticTracker ANALYTIC_TRACKER = new AnalyticTracker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalyticTrackerRecord> getRecordType() {
        return AnalyticTrackerRecord.class;
    }

    /**
     * The column <code>stroom.analytic_tracker.fk_analytic_uuid</code>.
     */
    public final TableField<AnalyticTrackerRecord, String> FK_ANALYTIC_UUID = createField(DSL.name("fk_analytic_uuid"),
            SQLDataType.VARCHAR(255).nullable(false),
            this,
            "");

    /**
     * The column <code>stroom.analytic_tracker.data</code>.
     */
    public final TableField<AnalyticTrackerRecord, String> DATA = createField(DSL.name("data"),
            SQLDataType.CLOB,
            this,
            "");

    private AnalyticTracker(Name alias, Table<AnalyticTrackerRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnalyticTracker(Name alias, Table<AnalyticTrackerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.analytic_tracker</code> table reference
     */
    public AnalyticTracker(String alias) {
        this(DSL.name(alias), ANALYTIC_TRACKER);
    }

    /**
     * Create an aliased <code>stroom.analytic_tracker</code> table reference
     */
    public AnalyticTracker(Name alias) {
        this(alias, ANALYTIC_TRACKER);
    }

    /**
     * Create a <code>stroom.analytic_tracker</code> table reference
     */
    public AnalyticTracker() {
        this(DSL.name("analytic_tracker"), null);
    }

    public <O extends Record> AnalyticTracker(Table<O> child, ForeignKey<O, AnalyticTrackerRecord> key) {
        super(child, key, ANALYTIC_TRACKER);
    }

    @Override
    public Schema getSchema() {
        return aliased()
                ? null
                : Stroom.STROOM;
    }

    @Override
    public UniqueKey<AnalyticTrackerRecord> getPrimaryKey() {
        return Keys.KEY_ANALYTIC_TRACKER_PRIMARY;
    }

    @Override
    public AnalyticTracker as(String alias) {
        return new AnalyticTracker(DSL.name(alias), this);
    }

    @Override
    public AnalyticTracker as(Name alias) {
        return new AnalyticTracker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticTracker rename(String name) {
        return new AnalyticTracker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticTracker rename(Name name) {
        return new AnalyticTracker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
