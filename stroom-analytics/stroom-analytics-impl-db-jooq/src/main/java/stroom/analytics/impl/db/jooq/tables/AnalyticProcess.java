/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.analytics.impl.db.jooq.Indexes;
import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.AnalyticProcessRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalyticProcess extends TableImpl<AnalyticProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.analytic_process</code>
     */
    public static final AnalyticProcess ANALYTIC_PROCESS = new AnalyticProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalyticProcessRecord> getRecordType() {
        return AnalyticProcessRecord.class;
    }

    /**
     * The column <code>stroom.analytic_process.uuid</code>.
     */
    public final TableField<AnalyticProcessRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process.version</code>.
     */
    public final TableField<AnalyticProcessRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process.create_time_ms</code>.
     */
    public final TableField<AnalyticProcessRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process.create_user</code>.
     */
    public final TableField<AnalyticProcessRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process.update_time_ms</code>.
     */
    public final TableField<AnalyticProcessRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process.update_user</code>.
     */
    public final TableField<AnalyticProcessRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process.analytic_uuid</code>.
     */
    public final TableField<AnalyticProcessRecord, String> ANALYTIC_UUID = createField(DSL.name("analytic_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process.enabled</code>.
     */
    public final TableField<AnalyticProcessRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.analytic_process.node</code>.
     */
    public final TableField<AnalyticProcessRecord, String> NODE = createField(DSL.name("node"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private AnalyticProcess(Name alias, Table<AnalyticProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnalyticProcess(Name alias, Table<AnalyticProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.analytic_process</code> table reference
     */
    public AnalyticProcess(String alias) {
        this(DSL.name(alias), ANALYTIC_PROCESS);
    }

    /**
     * Create an aliased <code>stroom.analytic_process</code> table reference
     */
    public AnalyticProcess(Name alias) {
        this(alias, ANALYTIC_PROCESS);
    }

    /**
     * Create a <code>stroom.analytic_process</code> table reference
     */
    public AnalyticProcess() {
        this(DSL.name("analytic_process"), null);
    }

    public <O extends Record> AnalyticProcess(Table<O> child, ForeignKey<O, AnalyticProcessRecord> key) {
        super(child, key, ANALYTIC_PROCESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ANALYTIC_PROCESS_ANALYTIC_PROCESS_ANALYTIC_UUID_IDX);
    }

    @Override
    public UniqueKey<AnalyticProcessRecord> getPrimaryKey() {
        return Keys.KEY_ANALYTIC_PROCESS_PRIMARY;
    }

    @Override
    public TableField<AnalyticProcessRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public AnalyticProcess as(String alias) {
        return new AnalyticProcess(DSL.name(alias), this);
    }

    @Override
    public AnalyticProcess as(Name alias) {
        return new AnalyticProcess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticProcess rename(String name) {
        return new AnalyticProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticProcess rename(Name name) {
        return new AnalyticProcess(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Integer, Long, String, Long, String, String, Boolean, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
