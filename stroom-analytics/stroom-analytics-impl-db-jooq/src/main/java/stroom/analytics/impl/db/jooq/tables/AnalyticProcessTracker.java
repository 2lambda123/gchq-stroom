/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.AnalyticProcessTrackerRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalyticProcessTracker extends TableImpl<AnalyticProcessTrackerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.analytic_process_tracker</code>
     */
    public static final AnalyticProcessTracker ANALYTIC_PROCESS_TRACKER = new AnalyticProcessTracker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalyticProcessTrackerRecord> getRecordType() {
        return AnalyticProcessTrackerRecord.class;
    }

    /**
     * The column
     * <code>stroom.analytic_process_tracker.fk_analytic_process_uuid</code>.
     */
    public final TableField<AnalyticProcessTrackerRecord, String> FK_ANALYTIC_PROCESS_UUID = createField(DSL.name("fk_analytic_process_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_process_tracker.data</code>.
     */
    public final TableField<AnalyticProcessTrackerRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    private AnalyticProcessTracker(Name alias, Table<AnalyticProcessTrackerRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnalyticProcessTracker(Name alias, Table<AnalyticProcessTrackerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.analytic_process_tracker</code> table
     * reference
     */
    public AnalyticProcessTracker(String alias) {
        this(DSL.name(alias), ANALYTIC_PROCESS_TRACKER);
    }

    /**
     * Create an aliased <code>stroom.analytic_process_tracker</code> table
     * reference
     */
    public AnalyticProcessTracker(Name alias) {
        this(alias, ANALYTIC_PROCESS_TRACKER);
    }

    /**
     * Create a <code>stroom.analytic_process_tracker</code> table reference
     */
    public AnalyticProcessTracker() {
        this(DSL.name("analytic_process_tracker"), null);
    }

    public <O extends Record> AnalyticProcessTracker(Table<O> child, ForeignKey<O, AnalyticProcessTrackerRecord> key) {
        super(child, key, ANALYTIC_PROCESS_TRACKER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public UniqueKey<AnalyticProcessTrackerRecord> getPrimaryKey() {
        return Keys.KEY_ANALYTIC_PROCESS_TRACKER_PRIMARY;
    }

    @Override
    public List<ForeignKey<AnalyticProcessTrackerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ANALYTIC_PROCESS_UUID);
    }

    private transient AnalyticProcess _analyticProcess;

    /**
     * Get the implicit join path to the <code>stroom.analytic_process</code>
     * table.
     */
    public AnalyticProcess analyticProcess() {
        if (_analyticProcess == null)
            _analyticProcess = new AnalyticProcess(this, Keys.FK_ANALYTIC_PROCESS_UUID);

        return _analyticProcess;
    }

    @Override
    public AnalyticProcessTracker as(String alias) {
        return new AnalyticProcessTracker(DSL.name(alias), this);
    }

    @Override
    public AnalyticProcessTracker as(Name alias) {
        return new AnalyticProcessTracker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticProcessTracker rename(String name) {
        return new AnalyticProcessTracker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticProcessTracker rename(Name name) {
        return new AnalyticProcessTracker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
