/*
 * This file is generated by jOOQ.
 */
package stroom.query.field.impl.db.jooq.tables.records;


import stroom.query.field.impl.db.jooq.tables.FieldInfo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldInfoRecord extends UpdatableRecordImpl<FieldInfoRecord> implements Record4<Long, Integer, Byte, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>stroom.field_info.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.field_info.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>stroom.field_info.fk_field_source_id</code>.
     */
    public void setFkFieldSourceId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.field_info.fk_field_source_id</code>.
     */
    public Integer getFkFieldSourceId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>stroom.field_info.field_type</code>.
     */
    public void setFieldType(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.field_info.field_type</code>.
     */
    public Byte getFieldType() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>stroom.field_info.field_name</code>.
     */
    public void setFieldName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.field_info.field_name</code>.
     */
    public String getFieldName() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, Byte, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Integer, Byte, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FieldInfo.FIELD_INFO.ID;
    }

    @Override
    public Field<Integer> field2() {
        return FieldInfo.FIELD_INFO.FK_FIELD_SOURCE_ID;
    }

    @Override
    public Field<Byte> field3() {
        return FieldInfo.FIELD_INFO.FIELD_TYPE;
    }

    @Override
    public Field<String> field4() {
        return FieldInfo.FIELD_INFO.FIELD_NAME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getFkFieldSourceId();
    }

    @Override
    public Byte component3() {
        return getFieldType();
    }

    @Override
    public String component4() {
        return getFieldName();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getFkFieldSourceId();
    }

    @Override
    public Byte value3() {
        return getFieldType();
    }

    @Override
    public String value4() {
        return getFieldName();
    }

    @Override
    public FieldInfoRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FieldInfoRecord value2(Integer value) {
        setFkFieldSourceId(value);
        return this;
    }

    @Override
    public FieldInfoRecord value3(Byte value) {
        setFieldType(value);
        return this;
    }

    @Override
    public FieldInfoRecord value4(String value) {
        setFieldName(value);
        return this;
    }

    @Override
    public FieldInfoRecord values(Long value1, Integer value2, Byte value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FieldInfoRecord
     */
    public FieldInfoRecord() {
        super(FieldInfo.FIELD_INFO);
    }

    /**
     * Create a detached, initialised FieldInfoRecord
     */
    public FieldInfoRecord(Long id, Integer fkFieldSourceId, Byte fieldType, String fieldName) {
        super(FieldInfo.FIELD_INFO);

        setId(id);
        setFkFieldSourceId(fkFieldSourceId);
        setFieldType(fieldType);
        setFieldName(fieldName);
    }
}
