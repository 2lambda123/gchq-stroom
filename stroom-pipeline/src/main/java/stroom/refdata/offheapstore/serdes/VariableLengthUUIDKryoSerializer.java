package stroom.refdata.offheapstore.serdes;

import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import stroom.refdata.lmdb.serde.KryoSerializer;
import stroom.util.logging.LambdaLogger;

import java.util.UUID;

/**
 * Kryo serializer for a string representation of a {@link UUID}. The string form must
 * conform to the output generated by {@link UUID#toString()}.
 *
 * May use variable length serialisation so the length of the serialised form is unknown.
 */
class VariableLengthUUIDKryoSerializer implements KryoSerializer<String> {

    // Two variable length longs at 1-9 bytes each
    static final int BUFFER_CAPACITY = 9 * 2;

    @Override
    public void write(final Output output, final String uuidStr) {
        UUID uuid = null;
        try {
            uuid = UUID.fromString(uuidStr);
        } catch (Exception e) {
            throw new RuntimeException(LambdaLogger.buildMessage("uuidStr [{}] is not a valid UUID", uuidStr), e);
        }
        output.writeLong(uuid.getMostSignificantBits(), false);
        output.writeLong(uuid.getLeastSignificantBits(), false);
    }

//    public void read(final Kryo kryo, final Input input) {
//        read(kryo, input, String.class);
//    }

    @Override
    public String read(final Input input) {
        final long uuidHighBits = input.readLong(false);
        final long uuidLowBits = input.readLong(false);
        return new UUID(uuidHighBits, uuidLowBits).toString();
    }
}
