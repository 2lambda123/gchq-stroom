/*
 * This file is generated by jOOQ.
 */
package stroom.explorer.impl.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.explorer.impl.db.stroom.Indexes;
import stroom.explorer.impl.db.stroom.Keys;
import stroom.explorer.impl.db.stroom.Stroom;
import stroom.explorer.impl.db.stroom.tables.records.ExplorertreenodeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Explorertreenode extends TableImpl<ExplorertreenodeRecord> {

    private static final long serialVersionUID = -616164757;

    /**
     * The reference instance of <code>stroom.explorerTreeNode</code>
     */
    public static final Explorertreenode EXPLORERTREENODE = new Explorertreenode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExplorertreenodeRecord> getRecordType() {
        return ExplorertreenodeRecord.class;
    }

    /**
     * The column <code>stroom.explorerTreeNode.id</code>.
     */
    public final TableField<ExplorertreenodeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.explorerTreeNode.type</code>.
     */
    public final TableField<ExplorertreenodeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.explorerTreeNode.uuid</code>.
     */
    public final TableField<ExplorertreenodeRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.explorerTreeNode.name</code>.
     */
    public final TableField<ExplorertreenodeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.explorerTreeNode.tags</code>.
     */
    public final TableField<ExplorertreenodeRecord, String> TAGS = createField("tags", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>stroom.explorerTreeNode</code> table reference
     */
    public Explorertreenode() {
        this(DSL.name("explorerTreeNode"), null);
    }

    /**
     * Create an aliased <code>stroom.explorerTreeNode</code> table reference
     */
    public Explorertreenode(String alias) {
        this(DSL.name(alias), EXPLORERTREENODE);
    }

    /**
     * Create an aliased <code>stroom.explorerTreeNode</code> table reference
     */
    public Explorertreenode(Name alias) {
        this(alias, EXPLORERTREENODE);
    }

    private Explorertreenode(Name alias, Table<ExplorertreenodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Explorertreenode(Name alias, Table<ExplorertreenodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Explorertreenode(Table<O> child, ForeignKey<O, ExplorertreenodeRecord> key) {
        super(child, key, EXPLORERTREENODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXPLORERTREENODE_PRIMARY, Indexes.EXPLORERTREENODE_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExplorertreenodeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EXPLORERTREENODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExplorertreenodeRecord> getPrimaryKey() {
        return Keys.KEY_EXPLORERTREENODE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExplorertreenodeRecord>> getKeys() {
        return Arrays.<UniqueKey<ExplorertreenodeRecord>>asList(Keys.KEY_EXPLORERTREENODE_PRIMARY, Keys.KEY_EXPLORERTREENODE_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Explorertreenode as(String alias) {
        return new Explorertreenode(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Explorertreenode as(Name alias) {
        return new Explorertreenode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Explorertreenode rename(String name) {
        return new Explorertreenode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Explorertreenode rename(Name name) {
        return new Explorertreenode(name, null);
    }
}
