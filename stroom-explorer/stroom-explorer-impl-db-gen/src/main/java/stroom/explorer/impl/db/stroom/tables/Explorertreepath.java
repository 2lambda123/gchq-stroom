/*
 * This file is generated by jOOQ.
 */
package stroom.explorer.impl.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.explorer.impl.db.stroom.Indexes;
import stroom.explorer.impl.db.stroom.Keys;
import stroom.explorer.impl.db.stroom.Stroom;
import stroom.explorer.impl.db.stroom.tables.records.ExplorertreepathRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Explorertreepath extends TableImpl<ExplorertreepathRecord> {

    private static final long serialVersionUID = 1415273977;

    /**
     * The reference instance of <code>stroom.explorerTreePath</code>
     */
    public static final Explorertreepath EXPLORERTREEPATH = new Explorertreepath();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExplorertreepathRecord> getRecordType() {
        return ExplorertreepathRecord.class;
    }

    /**
     * The column <code>stroom.explorerTreePath.ancestor</code>.
     */
    public final TableField<ExplorertreepathRecord, Integer> ANCESTOR = createField("ancestor", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.explorerTreePath.descendant</code>.
     */
    public final TableField<ExplorertreepathRecord, Integer> DESCENDANT = createField("descendant", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.explorerTreePath.depth</code>.
     */
    public final TableField<ExplorertreepathRecord, Integer> DEPTH = createField("depth", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.explorerTreePath.orderIndex</code>.
     */
    public final TableField<ExplorertreepathRecord, Integer> ORDERINDEX = createField("orderIndex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.explorerTreePath</code> table reference
     */
    public Explorertreepath() {
        this(DSL.name("explorerTreePath"), null);
    }

    /**
     * Create an aliased <code>stroom.explorerTreePath</code> table reference
     */
    public Explorertreepath(String alias) {
        this(DSL.name(alias), EXPLORERTREEPATH);
    }

    /**
     * Create an aliased <code>stroom.explorerTreePath</code> table reference
     */
    public Explorertreepath(Name alias) {
        this(alias, EXPLORERTREEPATH);
    }

    private Explorertreepath(Name alias, Table<ExplorertreepathRecord> aliased) {
        this(alias, aliased, null);
    }

    private Explorertreepath(Name alias, Table<ExplorertreepathRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Explorertreepath(Table<O> child, ForeignKey<O, ExplorertreepathRecord> key) {
        super(child, key, EXPLORERTREEPATH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXPLORERTREEPATH_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExplorertreepathRecord> getPrimaryKey() {
        return Keys.KEY_EXPLORERTREEPATH_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExplorertreepathRecord>> getKeys() {
        return Arrays.<UniqueKey<ExplorertreepathRecord>>asList(Keys.KEY_EXPLORERTREEPATH_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Explorertreepath as(String alias) {
        return new Explorertreepath(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Explorertreepath as(Name alias) {
        return new Explorertreepath(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Explorertreepath rename(String name) {
        return new Explorertreepath(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Explorertreepath rename(Name name) {
        return new Explorertreepath(name, null);
    }
}
