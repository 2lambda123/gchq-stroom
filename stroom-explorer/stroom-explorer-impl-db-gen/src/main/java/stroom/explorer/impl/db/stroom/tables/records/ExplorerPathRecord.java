/*
 * This file is generated by jOOQ.
 */
package stroom.explorer.impl.db.stroom.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.explorer.impl.db.stroom.tables.ExplorerPath;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExplorerPathRecord extends UpdatableRecordImpl<ExplorerPathRecord> implements Record4<Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1890389534;

    /**
     * Setter for <code>stroom.explorer_path.ancestor</code>.
     */
    public void setAncestor(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.explorer_path.ancestor</code>.
     */
    public Integer getAncestor() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.explorer_path.descendant</code>.
     */
    public void setDescendant(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.explorer_path.descendant</code>.
     */
    public Integer getDescendant() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>stroom.explorer_path.depth</code>.
     */
    public void setDepth(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.explorer_path.depth</code>.
     */
    public Integer getDepth() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>stroom.explorer_path.order_index</code>.
     */
    public void setOrderIndex(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.explorer_path.order_index</code>.
     */
    public Integer getOrderIndex() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ExplorerPath.EXPLORER_PATH.ANCESTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return ExplorerPath.EXPLORER_PATH.DESCENDANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return ExplorerPath.EXPLORER_PATH.DEPTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return ExplorerPath.EXPLORER_PATH.ORDER_INDEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getAncestor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getDescendant();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getDepth();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getOrderIndex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getAncestor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getDescendant();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getDepth();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getOrderIndex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExplorerPathRecord value1(Integer value) {
        setAncestor(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExplorerPathRecord value2(Integer value) {
        setDescendant(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExplorerPathRecord value3(Integer value) {
        setDepth(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExplorerPathRecord value4(Integer value) {
        setOrderIndex(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExplorerPathRecord values(Integer value1, Integer value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExplorerPathRecord
     */
    public ExplorerPathRecord() {
        super(ExplorerPath.EXPLORER_PATH);
    }

    /**
     * Create a detached, initialised ExplorerPathRecord
     */
    public ExplorerPathRecord(Integer ancestor, Integer descendant, Integer depth, Integer orderIndex) {
        super(ExplorerPath.EXPLORER_PATH);

        set(0, ancestor);
        set(1, descendant);
        set(2, depth);
        set(3, orderIndex);
    }
}
