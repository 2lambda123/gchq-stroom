/*
 * This file is generated by jOOQ.
*/
package stroom.data.meta.impl.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.data.meta.impl.db.stroom.Indexes;
import stroom.data.meta.impl.db.stroom.Keys;
import stroom.data.meta.impl.db.stroom.Stroom;
import stroom.data.meta.impl.db.stroom.tables.records.StreamRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stream extends TableImpl<StreamRecord> {

    private static final long serialVersionUID = 1991565955;

    /**
     * The reference instance of <code>stroom.stream</code>
     */
    public static final Stream STREAM = new Stream();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StreamRecord> getRecordType() {
        return StreamRecord.class;
    }

    /**
     * The column <code>stroom.stream.ID</code>.
     */
    public final TableField<StreamRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.stream.VER</code>.
     */
    public final TableField<StreamRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.stream.CRT_MS</code>.
     */
    public final TableField<StreamRecord, Long> CRT_MS = createField("CRT_MS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.stream.EFFECT_MS</code>.
     */
    public final TableField<StreamRecord, Long> EFFECT_MS = createField("EFFECT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.stream.PARNT_STRM_ID</code>.
     */
    public final TableField<StreamRecord, Long> PARNT_STRM_ID = createField("PARNT_STRM_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.stream.STAT</code>.
     */
    public final TableField<StreamRecord, Byte> STAT = createField("STAT", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.stream.STAT_MS</code>.
     */
    public final TableField<StreamRecord, Long> STAT_MS = createField("STAT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.stream.STRM_TASK_ID</code>.
     */
    public final TableField<StreamRecord, Long> STRM_TASK_ID = createField("STRM_TASK_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.stream.FK_FD_ID</code>.
     */
    public final TableField<StreamRecord, Integer> FK_FD_ID = createField("FK_FD_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.stream.FK_STRM_PROC_ID</code>.
     */
    public final TableField<StreamRecord, Integer> FK_STRM_PROC_ID = createField("FK_STRM_PROC_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stroom.stream.FK_STRM_TP_ID</code>.
     */
    public final TableField<StreamRecord, Integer> FK_STRM_TP_ID = createField("FK_STRM_TP_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.stream</code> table reference
     */
    public Stream() {
        this(DSL.name("stream"), null);
    }

    /**
     * Create an aliased <code>stroom.stream</code> table reference
     */
    public Stream(String alias) {
        this(DSL.name(alias), STREAM);
    }

    /**
     * Create an aliased <code>stroom.stream</code> table reference
     */
    public Stream(Name alias) {
        this(alias, STREAM);
    }

    private Stream(Name alias, Table<StreamRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stream(Name alias, Table<StreamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STREAM_PRIMARY, Indexes.STREAM_STRM_CRT_MS_IDX, Indexes.STREAM_STRM_FK_FD_ID_CRT_MS_IDX, Indexes.STREAM_STRM_FK_FD_ID_EFFECT_MS_IDX, Indexes.STREAM_STRM_FK_STRM_PROC_ID_CRT_MS_IDX, Indexes.STREAM_STRM_FK_STRM_TP_ID, Indexes.STREAM_STRM_PARNT_STRM_ID_IDX, Indexes.STREAM_STRM_STAT_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StreamRecord, Long> getIdentity() {
        return Keys.IDENTITY_STREAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StreamRecord> getPrimaryKey() {
        return Keys.KEY_STREAM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StreamRecord>> getKeys() {
        return Arrays.<UniqueKey<StreamRecord>>asList(Keys.KEY_STREAM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StreamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StreamRecord, ?>>asList(Keys.STRM_FK_FD_ID, Keys.STRM_FK_STRM_PROC_ID, Keys.STRM_FK_STRM_TP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stream as(String alias) {
        return new Stream(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stream as(Name alias) {
        return new Stream(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stream rename(String name) {
        return new Stream(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stream rename(Name name) {
        return new Stream(name, null);
    }
}
