/*
 * This file is generated by jOOQ.
*/
package stroom.data.meta.impl.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.data.meta.impl.db.stroom.Indexes;
import stroom.data.meta.impl.db.stroom.Keys;
import stroom.data.meta.impl.db.stroom.Stroom;
import stroom.data.meta.impl.db.stroom.tables.records.StreamFeedRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StreamFeed extends TableImpl<StreamFeedRecord> {

    private static final long serialVersionUID = -1096831328;

    /**
     * The reference instance of <code>stroom.stream_feed</code>
     */
    public static final StreamFeed STREAM_FEED = new StreamFeed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StreamFeedRecord> getRecordType() {
        return StreamFeedRecord.class;
    }

    /**
     * The column <code>stroom.stream_feed.id</code>.
     */
    public final TableField<StreamFeedRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.stream_feed.name</code>.
     */
    public final TableField<StreamFeedRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.stream_feed</code> table reference
     */
    public StreamFeed() {
        this(DSL.name("stream_feed"), null);
    }

    /**
     * Create an aliased <code>stroom.stream_feed</code> table reference
     */
    public StreamFeed(String alias) {
        this(DSL.name(alias), STREAM_FEED);
    }

    /**
     * Create an aliased <code>stroom.stream_feed</code> table reference
     */
    public StreamFeed(Name alias) {
        this(alias, STREAM_FEED);
    }

    private StreamFeed(Name alias, Table<StreamFeedRecord> aliased) {
        this(alias, aliased, null);
    }

    private StreamFeed(Name alias, Table<StreamFeedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STREAM_FEED_NAME, Indexes.STREAM_FEED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StreamFeedRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STREAM_FEED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StreamFeedRecord> getPrimaryKey() {
        return Keys.KEY_STREAM_FEED_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StreamFeedRecord>> getKeys() {
        return Arrays.<UniqueKey<StreamFeedRecord>>asList(Keys.KEY_STREAM_FEED_PRIMARY, Keys.KEY_STREAM_FEED_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StreamFeed as(String alias) {
        return new StreamFeed(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StreamFeed as(Name alias) {
        return new StreamFeed(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StreamFeed rename(String name) {
        return new StreamFeed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StreamFeed rename(Name name) {
        return new StreamFeed(name, null);
    }
}
