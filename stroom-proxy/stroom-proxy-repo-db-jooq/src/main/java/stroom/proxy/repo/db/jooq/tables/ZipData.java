/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.proxy.repo.db.jooq.Indexes;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.Public;
import stroom.proxy.repo.db.jooq.tables.records.ZipDataRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipData extends TableImpl<ZipDataRecord> {

    private static final long serialVersionUID = 570973584;

    /**
     * The reference instance of <code>PUBLIC.ZIP_DATA</code>
     */
    public static final ZipData ZIP_DATA = new ZipData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZipDataRecord> getRecordType() {
        return ZipDataRecord.class;
    }

    /**
     * The column <code>PUBLIC.ZIP_DATA.ID</code>.
     */
    public final TableField<ZipDataRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ZIP_DATA.NAME</code>.
     */
    public final TableField<ZipDataRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ZIP_DATA.FEEDNAME</code>.
     */
    public final TableField<ZipDataRecord, String> FEEDNAME = createField(DSL.name("FEEDNAME"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.ZIP_DATA.FK_ZIP_SOURCE_ID</code>.
     */
    public final TableField<ZipDataRecord, Long> FK_ZIP_SOURCE_ID = createField(DSL.name("FK_ZIP_SOURCE_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ZIP_DATA</code> table reference
     */
    public ZipData() {
        this(DSL.name("ZIP_DATA"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ZIP_DATA</code> table reference
     */
    public ZipData(String alias) {
        this(DSL.name(alias), ZIP_DATA);
    }

    /**
     * Create an aliased <code>PUBLIC.ZIP_DATA</code> table reference
     */
    public ZipData(Name alias) {
        this(alias, ZIP_DATA);
    }

    private ZipData(Name alias, Table<ZipDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private ZipData(Name alias, Table<ZipDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ZipData(Table<O> child, ForeignKey<O, ZipDataRecord> key) {
        super(child, key, ZIP_DATA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2, Indexes.ZIP_DATA_FK_ZIP_SOURCE_ID_INDEX_2, Indexes.ZIP_DATA_NAME_INDEX_2);
    }

    @Override
    public Identity<ZipDataRecord, Long> getIdentity() {
        return Keys.IDENTITY_ZIP_DATA;
    }

    @Override
    public UniqueKey<ZipDataRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<UniqueKey<ZipDataRecord>> getKeys() {
        return Arrays.<UniqueKey<ZipDataRecord>>asList(Keys.CONSTRAINT_2, Keys.ZIP_DATA_NAME);
    }

    @Override
    public List<ForeignKey<ZipDataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ZipDataRecord, ?>>asList(Keys.ZIP_DATA_FK_ZIP_SOURCE_ID);
    }

    public ZipSource zipSource() {
        return new ZipSource(this, Keys.ZIP_DATA_FK_ZIP_SOURCE_ID);
    }

    @Override
    public ZipData as(String alias) {
        return new ZipData(DSL.name(alias), this);
    }

    @Override
    public ZipData as(Name alias) {
        return new ZipData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipData rename(String name) {
        return new ZipData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipData rename(Name name) {
        return new ZipData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
