/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.proxy.repo.db.jooq.DefaultSchema;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.tables.records.AggregateItemRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggregateItem extends TableImpl<AggregateItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>aggregate_item</code>
     */
    public static final AggregateItem AGGREGATE_ITEM = new AggregateItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggregateItemRecord> getRecordType() {
        return AggregateItemRecord.class;
    }

    /**
     * The column <code>aggregate_item.id</code>.
     */
    public final TableField<AggregateItemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>aggregate_item.fk_aggregate_id</code>.
     */
    public final TableField<AggregateItemRecord, Integer> FK_AGGREGATE_ID = createField(DSL.name("fk_aggregate_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>aggregate_item.fk_source_item_id</code>.
     */
    public final TableField<AggregateItemRecord, Integer> FK_SOURCE_ITEM_ID = createField(DSL.name("fk_source_item_id"), SQLDataType.INTEGER, this, "");

    private AggregateItem(Name alias, Table<AggregateItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private AggregateItem(Name alias, Table<AggregateItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>aggregate_item</code> table reference
     */
    public AggregateItem(String alias) {
        this(DSL.name(alias), AGGREGATE_ITEM);
    }

    /**
     * Create an aliased <code>aggregate_item</code> table reference
     */
    public AggregateItem(Name alias) {
        this(alias, AGGREGATE_ITEM);
    }

    /**
     * Create a <code>aggregate_item</code> table reference
     */
    public AggregateItem() {
        this(DSL.name("aggregate_item"), null);
    }

    public <O extends Record> AggregateItem(Table<O> child, ForeignKey<O, AggregateItemRecord> key) {
        super(child, key, AGGREGATE_ITEM);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AggregateItemRecord> getPrimaryKey() {
        return Keys.PK_AGGREGATE_ITEM;
    }

    @Override
    public List<UniqueKey<AggregateItemRecord>> getKeys() {
        return Arrays.<UniqueKey<AggregateItemRecord>>asList(Keys.PK_AGGREGATE_ITEM);
    }

    @Override
    public List<ForeignKey<AggregateItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AggregateItemRecord, ?>>asList(Keys.FK_AGGREGATE_ITEM_AGGREGATE_1, Keys.FK_AGGREGATE_ITEM_SOURCE_ITEM_1);
    }

    private transient Aggregate _aggregate;
    private transient SourceItem _sourceItem;

    public Aggregate aggregate() {
        if (_aggregate == null)
            _aggregate = new Aggregate(this, Keys.FK_AGGREGATE_ITEM_AGGREGATE_1);

        return _aggregate;
    }

    public SourceItem sourceItem() {
        if (_sourceItem == null)
            _sourceItem = new SourceItem(this, Keys.FK_AGGREGATE_ITEM_SOURCE_ITEM_1);

        return _sourceItem;
    }

    @Override
    public AggregateItem as(String alias) {
        return new AggregateItem(DSL.name(alias), this);
    }

    @Override
    public AggregateItem as(Name alias) {
        return new AggregateItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregateItem rename(String name) {
        return new AggregateItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregateItem rename(Name name) {
        return new AggregateItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
