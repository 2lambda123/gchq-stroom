/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq;


import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import stroom.proxy.repo.db.jooq.tables.ZipData;
import stroom.proxy.repo.db.jooq.tables.ZipEntry;
import stroom.proxy.repo.db.jooq.tables.ZipSource;
import stroom.proxy.repo.db.jooq.tables.records.ZipDataRecord;
import stroom.proxy.repo.db.jooq.tables.records.ZipEntryRecord;
import stroom.proxy.repo.db.jooq.tables.records.ZipSourceRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>PUBLIC</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ZipDataRecord, Long> IDENTITY_ZIP_DATA = Identities0.IDENTITY_ZIP_DATA;
    public static final Identity<ZipEntryRecord, Long> IDENTITY_ZIP_ENTRY = Identities0.IDENTITY_ZIP_ENTRY;
    public static final Identity<ZipSourceRecord, Long> IDENTITY_ZIP_SOURCE = Identities0.IDENTITY_ZIP_SOURCE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ZipDataRecord> CONSTRAINT_2 = UniqueKeys0.CONSTRAINT_2;
    public static final UniqueKey<ZipDataRecord> ZIP_DATA_NAME = UniqueKeys0.ZIP_DATA_NAME;
    public static final UniqueKey<ZipEntryRecord> CONSTRAINT_E = UniqueKeys0.CONSTRAINT_E;
    public static final UniqueKey<ZipEntryRecord> ZIP_ENTRY_EXTENSION = UniqueKeys0.ZIP_ENTRY_EXTENSION;
    public static final UniqueKey<ZipSourceRecord> CONSTRAINT_D = UniqueKeys0.CONSTRAINT_D;
    public static final UniqueKey<ZipSourceRecord> ZIP_SOURCE_PATH = UniqueKeys0.ZIP_SOURCE_PATH;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ZipDataRecord, ZipSourceRecord> ZIP_DATA_FK_ZIP_SOURCE_ID = ForeignKeys0.ZIP_DATA_FK_ZIP_SOURCE_ID;
    public static final ForeignKey<ZipEntryRecord, ZipSourceRecord> ZIP_ENTRY_FK_ZIP_SOURCE_ID = ForeignKeys0.ZIP_ENTRY_FK_ZIP_SOURCE_ID;
    public static final ForeignKey<ZipEntryRecord, ZipDataRecord> ZIP_ENTRY_FK_ZIP_DATA_ID = ForeignKeys0.ZIP_ENTRY_FK_ZIP_DATA_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<ZipDataRecord, Long> IDENTITY_ZIP_DATA = Internal.createIdentity(ZipData.ZIP_DATA, ZipData.ZIP_DATA.ID);
        public static Identity<ZipEntryRecord, Long> IDENTITY_ZIP_ENTRY = Internal.createIdentity(ZipEntry.ZIP_ENTRY, ZipEntry.ZIP_ENTRY.ID);
        public static Identity<ZipSourceRecord, Long> IDENTITY_ZIP_SOURCE = Internal.createIdentity(ZipSource.ZIP_SOURCE, ZipSource.ZIP_SOURCE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ZipDataRecord> CONSTRAINT_2 = Internal.createUniqueKey(ZipData.ZIP_DATA, "CONSTRAINT_2", ZipData.ZIP_DATA.ID);
        public static final UniqueKey<ZipDataRecord> ZIP_DATA_NAME = Internal.createUniqueKey(ZipData.ZIP_DATA, "ZIP_DATA_NAME", ZipData.ZIP_DATA.NAME, ZipData.ZIP_DATA.FK_ZIP_SOURCE_ID);
        public static final UniqueKey<ZipEntryRecord> CONSTRAINT_E = Internal.createUniqueKey(ZipEntry.ZIP_ENTRY, "CONSTRAINT_E", ZipEntry.ZIP_ENTRY.ID);
        public static final UniqueKey<ZipEntryRecord> ZIP_ENTRY_EXTENSION = Internal.createUniqueKey(ZipEntry.ZIP_ENTRY, "ZIP_ENTRY_EXTENSION", ZipEntry.ZIP_ENTRY.FK_ZIP_SOURCE_ID, ZipEntry.ZIP_ENTRY.FK_ZIP_DATA_ID, ZipEntry.ZIP_ENTRY.EXTENSION);
        public static final UniqueKey<ZipSourceRecord> CONSTRAINT_D = Internal.createUniqueKey(ZipSource.ZIP_SOURCE, "CONSTRAINT_D", ZipSource.ZIP_SOURCE.ID);
        public static final UniqueKey<ZipSourceRecord> ZIP_SOURCE_PATH = Internal.createUniqueKey(ZipSource.ZIP_SOURCE, "ZIP_SOURCE_PATH", ZipSource.ZIP_SOURCE.PATH);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<ZipDataRecord, ZipSourceRecord> ZIP_DATA_FK_ZIP_SOURCE_ID = Internal.createForeignKey(stroom.proxy.repo.db.jooq.Keys.CONSTRAINT_D, ZipData.ZIP_DATA, "ZIP_DATA_FK_ZIP_SOURCE_ID", ZipData.ZIP_DATA.FK_ZIP_SOURCE_ID);
        public static final ForeignKey<ZipEntryRecord, ZipSourceRecord> ZIP_ENTRY_FK_ZIP_SOURCE_ID = Internal.createForeignKey(stroom.proxy.repo.db.jooq.Keys.CONSTRAINT_D, ZipEntry.ZIP_ENTRY, "ZIP_ENTRY_FK_ZIP_SOURCE_ID", ZipEntry.ZIP_ENTRY.FK_ZIP_SOURCE_ID);
        public static final ForeignKey<ZipEntryRecord, ZipDataRecord> ZIP_ENTRY_FK_ZIP_DATA_ID = Internal.createForeignKey(stroom.proxy.repo.db.jooq.Keys.CONSTRAINT_2, ZipEntry.ZIP_ENTRY, "ZIP_ENTRY_FK_ZIP_DATA_ID", ZipEntry.ZIP_ENTRY.FK_ZIP_DATA_ID);
    }
}
