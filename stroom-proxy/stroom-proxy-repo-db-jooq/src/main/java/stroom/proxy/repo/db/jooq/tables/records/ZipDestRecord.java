/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables.records;


import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.proxy.repo.db.jooq.tables.ZipDest;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipDestRecord extends UpdatableRecordImpl<ZipDestRecord> implements Record6<Integer, Long, String, Long, Boolean, Boolean> {

    private static final long serialVersionUID = 1579357819;

    /**
     * Setter for <code>zip_dest.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>zip_dest.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>zip_dest.create_time_ms</code>.
     */
    public void setCreateTimeMs(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>zip_dest.create_time_ms</code>.
     */
    public Long getCreateTimeMs() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>zip_dest.feedName</code>.
     */
    public void setFeedname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>zip_dest.feedName</code>.
     */
    public String getFeedname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>zip_dest.byte_size</code>.
     */
    public void setByteSize(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>zip_dest.byte_size</code>.
     */
    public Long getByteSize() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>zip_dest.in_use</code>.
     */
    public void setInUse(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>zip_dest.in_use</code>.
     */
    public Boolean getInUse() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>zip_dest.complete</code>.
     */
    public void setComplete(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>zip_dest.complete</code>.
     */
    public Boolean getComplete() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Long, String, Long, Boolean, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, Long, String, Long, Boolean, Boolean> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ZipDest.ZIP_DEST.ID;
    }

    @Override
    public Field<Long> field2() {
        return ZipDest.ZIP_DEST.CREATE_TIME_MS;
    }

    @Override
    public Field<String> field3() {
        return ZipDest.ZIP_DEST.FEEDNAME;
    }

    @Override
    public Field<Long> field4() {
        return ZipDest.ZIP_DEST.BYTE_SIZE;
    }

    @Override
    public Field<Boolean> field5() {
        return ZipDest.ZIP_DEST.IN_USE;
    }

    @Override
    public Field<Boolean> field6() {
        return ZipDest.ZIP_DEST.COMPLETE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getCreateTimeMs();
    }

    @Override
    public String component3() {
        return getFeedname();
    }

    @Override
    public Long component4() {
        return getByteSize();
    }

    @Override
    public Boolean component5() {
        return getInUse();
    }

    @Override
    public Boolean component6() {
        return getComplete();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getCreateTimeMs();
    }

    @Override
    public String value3() {
        return getFeedname();
    }

    @Override
    public Long value4() {
        return getByteSize();
    }

    @Override
    public Boolean value5() {
        return getInUse();
    }

    @Override
    public Boolean value6() {
        return getComplete();
    }

    @Override
    public ZipDestRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ZipDestRecord value2(Long value) {
        setCreateTimeMs(value);
        return this;
    }

    @Override
    public ZipDestRecord value3(String value) {
        setFeedname(value);
        return this;
    }

    @Override
    public ZipDestRecord value4(Long value) {
        setByteSize(value);
        return this;
    }

    @Override
    public ZipDestRecord value5(Boolean value) {
        setInUse(value);
        return this;
    }

    @Override
    public ZipDestRecord value6(Boolean value) {
        setComplete(value);
        return this;
    }

    @Override
    public ZipDestRecord values(Integer value1, Long value2, String value3, Long value4, Boolean value5, Boolean value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ZipDestRecord
     */
    public ZipDestRecord() {
        super(ZipDest.ZIP_DEST);
    }

    /**
     * Create a detached, initialised ZipDestRecord
     */
    public ZipDestRecord(Integer id, Long createTimeMs, String feedname, Long byteSize, Boolean inUse, Boolean complete) {
        super(ZipDest.ZIP_DEST);

        set(0, id);
        set(1, createTimeMs);
        set(2, feedname);
        set(3, byteSize);
        set(4, inUse);
        set(5, complete);
    }
}
