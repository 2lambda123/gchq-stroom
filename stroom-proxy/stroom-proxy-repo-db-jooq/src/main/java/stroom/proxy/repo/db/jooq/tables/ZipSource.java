/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.proxy.repo.db.jooq.Indexes;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.Public;
import stroom.proxy.repo.db.jooq.tables.records.ZipSourceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipSource extends TableImpl<ZipSourceRecord> {

    private static final long serialVersionUID = 977039427;

    /**
     * The reference instance of <code>PUBLIC.ZIP_SOURCE</code>
     */
    public static final ZipSource ZIP_SOURCE = new ZipSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZipSourceRecord> getRecordType() {
        return ZipSourceRecord.class;
    }

    /**
     * The column <code>PUBLIC.ZIP_SOURCE.ID</code>.
     */
    public final TableField<ZipSourceRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ZIP_SOURCE.PATH</code>.
     */
    public final TableField<ZipSourceRecord, String> PATH = createField(DSL.name("PATH"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ZIP_SOURCE</code> table reference
     */
    public ZipSource() {
        this(DSL.name("ZIP_SOURCE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ZIP_SOURCE</code> table reference
     */
    public ZipSource(String alias) {
        this(DSL.name(alias), ZIP_SOURCE);
    }

    /**
     * Create an aliased <code>PUBLIC.ZIP_SOURCE</code> table reference
     */
    public ZipSource(Name alias) {
        this(alias, ZIP_SOURCE);
    }

    private ZipSource(Name alias, Table<ZipSourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private ZipSource(Name alias, Table<ZipSourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ZipSource(Table<O> child, ForeignKey<O, ZipSourceRecord> key) {
        super(child, key, ZIP_SOURCE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_D, Indexes.ZIP_SOURCE_PATH_INDEX_D);
    }

    @Override
    public Identity<ZipSourceRecord, Long> getIdentity() {
        return Keys.IDENTITY_ZIP_SOURCE;
    }

    @Override
    public UniqueKey<ZipSourceRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<UniqueKey<ZipSourceRecord>> getKeys() {
        return Arrays.<UniqueKey<ZipSourceRecord>>asList(Keys.CONSTRAINT_D, Keys.ZIP_SOURCE_PATH);
    }

    @Override
    public ZipSource as(String alias) {
        return new ZipSource(DSL.name(alias), this);
    }

    @Override
    public ZipSource as(Name alias) {
        return new ZipSource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipSource rename(String name) {
        return new ZipSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipSource rename(Name name) {
        return new ZipSource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
