/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.proxy.repo.db.jooq.DefaultSchema;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.tables.records.ZipDestRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipDest extends TableImpl<ZipDestRecord> {

    private static final long serialVersionUID = -826249755;

    /**
     * The reference instance of <code>zip_dest</code>
     */
    public static final ZipDest ZIP_DEST = new ZipDest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZipDestRecord> getRecordType() {
        return ZipDestRecord.class;
    }

    /**
     * The column <code>zip_dest.id</code>.
     */
    public final TableField<ZipDestRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>zip_dest.create_time_ms</code>.
     */
    public final TableField<ZipDestRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>zip_dest.feed_name</code>.
     */
    public final TableField<ZipDestRecord, String> FEED_NAME = createField(DSL.name("feed_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>zip_dest.type_name</code>.
     */
    public final TableField<ZipDestRecord, String> TYPE_NAME = createField(DSL.name("type_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>zip_dest.byte_size</code>.
     */
    public final TableField<ZipDestRecord, Long> BYTE_SIZE = createField(DSL.name("byte_size"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>zip_dest.items</code>.
     */
    public final TableField<ZipDestRecord, Integer> ITEMS = createField(DSL.name("items"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zip_dest.complete</code>.
     */
    public final TableField<ZipDestRecord, Boolean> COMPLETE = createField(DSL.name("complete"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>zip_dest</code> table reference
     */
    public ZipDest() {
        this(DSL.name("zip_dest"), null);
    }

    /**
     * Create an aliased <code>zip_dest</code> table reference
     */
    public ZipDest(String alias) {
        this(DSL.name(alias), ZIP_DEST);
    }

    /**
     * Create an aliased <code>zip_dest</code> table reference
     */
    public ZipDest(Name alias) {
        this(alias, ZIP_DEST);
    }

    private ZipDest(Name alias, Table<ZipDestRecord> aliased) {
        this(alias, aliased, null);
    }

    private ZipDest(Name alias, Table<ZipDestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ZipDest(Table<O> child, ForeignKey<O, ZipDestRecord> key) {
        super(child, key, ZIP_DEST);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ZipDestRecord> getPrimaryKey() {
        return Keys.PK_ZIP_DEST;
    }

    @Override
    public List<UniqueKey<ZipDestRecord>> getKeys() {
        return Arrays.<UniqueKey<ZipDestRecord>>asList(Keys.PK_ZIP_DEST);
    }

    @Override
    public ZipDest as(String alias) {
        return new ZipDest(DSL.name(alias), this);
    }

    @Override
    public ZipDest as(Name alias) {
        return new ZipDest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipDest rename(String name) {
        return new ZipDest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipDest rename(Name name) {
        return new ZipDest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Long, String, String, Long, Integer, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
