package stroom.util.authentication;

/**
 * A set of hard-coded credentials for use ONLY in testing. They allow us to run
 * stroom and stroom-proxy such that API calls from proxy to stroom will pass
 * authentication.
 *
 * The values used in the this class are generated by the main() method in
 * {@link stroom.authentication.oauth2.GenerateTestOpenIdDetails}
 *
 * These default values will only be used if the following prop is set to true
 * {@link stroom.authentication.config.AuthenticationConfig#isUseDefaultOpenIdCredentials()}
 */
public class DefaultOpenIdCredentials {

   // Made with a public ctor so it is injectable and mockable, if required.
   public DefaultOpenIdCredentials() {
   }

   // The values between the lines were generated using stroom.authentication.oauth2.GenerateTestOpenIdDetails"
   // ------------------------------------------------------------------------------------------------
   private static final String OAUTH2_CLIENT_ID = "S5F411u0cGg62uEUy_E4sy7dHd5IkrgSdQ3XWC-Q2LFsH5ALq3urmQ==";
   private static final String OAUTH2_CLIENT_NAME = "Stroom Client Internal (TEST ONLY)";
   private static final String OAUTH2_CLIENT_SECRET = "-uNBTq2PE2ExZozl95V0X8wEPVs=";
   private static final String OAUTH2_CLIENT_URI_PATTERN = ".*";
   private static final String PUBLIC_KEY_ID = "f196c3e7-b46f-408b-abec-bd461b74ae0d";
   private static final String PUBLIC_KEY_JSON = "{\"kty\":\"RSA\",\"kid\":\"f196c3e7-b46f-408b-abec-bd461b74ae0d\",\"use\":\"sig\",\"alg\":\"RS256\",\"n\":\"rrNteV2SLbmNKVmXxOdx_NtQ9KKth_q_gWDgRDVtDC7T0dwyO4g-kTE4Y11MMN5nQt0-ZZl3NHCXPVEXFHxSqHw0q-ugyzq-jtMBU3LemDyZmxoGB89bCGqyEoVyICuzcYj150Yew_Mou7g-G1KvyDh0-xjrsrmbTt7bvfofR7CeiB6XP8CtzKc4GBzEMFGJZ1rXCnrPAIHjvlkH8M3aSVxcfuiLVjltQQWFgqRlsVZeD79uHbEOoHSLlBSM-w82YngXA_M_YIVZthL3sCy2U-JluXg0qOsO4oikcb7luu_UKtee78fumy3fcds8YUNxI7mqO-B0rrsM_r0CHQuQ0Q\",\"e\":\"AQAB\",\"d\":\"L8TgKk9rqRUThDr7RNwETx-pAzt4N7ZYpwfWStBRAQPM55VOJvkaIplS0diw_KvTkHTumtlbvvsKX7nMlc1ozKkpvdiwHuHxORx5QFgohXgMiFyVSY1pVuPVzTqv-hv49RJ-Kr8BqpLSkIHQeagiaJ0HX6Fw0W3vCaHmdAvwgalVymlxPyrDNYgEw1zV932nKNS4AbDv5g47sIK3o9Wz2ZM1GXgbjQDgIYrtVLy6ciaq2nPWe7yWhul16GvZiwathjPECJtwyWP54aU15OtN68OhHLQ4gFGaKOg8gKiBAionUkv5tv73GrF2D2HQe-2xZjB2MCs_iAWPIAM2xnKAAQ\",\"p\":\"4alYOgxMUzAktNyG7gSOpBZrf3X84kZpEMy9Sb1_B5hP4-bHx5g9xKxsvaXoy_TXAB_6GF4QGkcVRop6okigtat2acln1OdOlaMaqVKbHtG6hRlsnNsuDwGjqjaH723dMB_0fRPtPA29FZ-8DGP34SwASWFnCpgVh4zsQnz-fbk\",\"q\":\"xjAoQTE5zkOp6I5OKRSftw1WL_IUEsxozI_NdIG-8RoXO5z3x1OFEiVaZZTRU5S1z0rCzqs982KD4vQXJVd1AlwERfdaI4weCJCye-9hUpuBSyJ7v0gbtPxJ7cLqI2figVmygObuJzbrEDVwGok0-NOVUNgrBMjcDDjeIyTyd9k\",\"dp\":\"qpcBOkinvk9rwEnhurc5ObQ1KZMBS_EcZfXQtpkJGa273zZMGoftUeti_O8aEG0Tx2VlA9y_4Y2Q-NWgpWOwEgX_qzL1Sk5d6uL1OcFXwLGdhhbVM7LBm9iKaBd3Jbnw9vuBMLjKo5ZjNaCeYOOFtPQ1d0OpyKl1xRX0WMLzBAk\",\"dq\":\"R9lHjrLY4QU4wL1uaog2irdECqe5TUNbruVnN5id72xlBdCXJ2UI9hYimncEGEfuTZMt4pzEHcsWQx34kioNmmhfiDnvLLnsXXCPtEyJPNhxXBrJQARVPxzDdHXYSjOsMvagtwiBSCgpubuVw5kAYkDafe-QUPC8jZXEOnt3h6k\",\"qi\":\"rL7Wia6DFAWFzMxKAbqYTk5Y_4tbHMgwX1cjCZbD2tj2ES88WC42hJuITGB2b7q33MBMvbvINxC5UD_uKUTrcEkB4KGKYeQxcg6Kk6nI4cmrT7ah-slKvSsFEYkuPqZbnvMKJWn_1AEDCKfngxsm9RwA2MwXN0AVmTKay987-m4\"}";
   private static final String API_KEY_USER_EMAIL = "default-test-only-api-key-user";
   private static final String API_KEY = "eyJhbGciOiJSUzI1NiJ9.eyJleHAiOjMyNTY1MDI0MDAwLCJzdWIiOiJkZWZhdWx0LXRlc3Qtb25seS1hcGkta2V5LXVzZXIiLCJpc3MiOiJzdHJvb20iLCJhdWQiOiJTNUY0MTF1MGNHZzYydUVVeV9FNHN5N2RIZDVJa3JnU2RRM1hXQy1RMkxGc0g1QUxxM3VybVE9PSJ9.kmFjR_82A5HFGRxIhj1mdu0VHPb0425bboVpJML34yDaE-FznOfAs-NZKt69yCC7a8c_rLRmoexOXTVsTZVVSMU4JD8CoD_BJ7NFaJnPb2Cng6NiyhUzn-TSs3uw8ExbRWcyPhZGwi7FB_7f333Sop12DumoxP0112dnJ7VmVBosF_3qSpMf8IwtkAo3vZwTt-UMZmauEOtb5FG2kIvDGhiA9s36sBHPle6BTRASdlTt2PVVklyqbkmTzvpJtmH_m8CFCOuUBj-Nemzg6OYanwWHtiKsGIPEDY8RgRUTJMRXYWxSMST7W3tqbzw_VX8vCrY8IV0B83haJvoK75i7EA";
   // ------------------------------------------------------------------------------------------------

   public String getOauth2ClientId() {
      return OAUTH2_CLIENT_ID;
   }

   public String getOauth2ClientName() {
      return OAUTH2_CLIENT_NAME;
   }

   public String getOauth2ClientSecret() {
      return OAUTH2_CLIENT_SECRET;
   }

   public String getOauth2ClientUriPattern() {
      return OAUTH2_CLIENT_URI_PATTERN;
   }

   public String getPublicKeyId() {
      return PUBLIC_KEY_ID;
   }

   public String getPublicKeyJson() {
      return PUBLIC_KEY_JSON;
   }

   public String getApiKeyUserEmail() {
      return API_KEY_USER_EMAIL;
   }

   public String getApiKey() {
      return API_KEY;
   }
}
