/*
 * This file is generated by jOOQ.
*/
package stroom.streamstore.meta.impl.db.stroom.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.streamstore.meta.impl.db.stroom.Indexes;
import stroom.streamstore.meta.impl.db.stroom.Keys;
import stroom.streamstore.meta.impl.db.stroom.Stroom;
import stroom.streamstore.meta.impl.db.stroom.tables.records.StrmProcessorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StrmProcessor extends TableImpl<StrmProcessorRecord> {

    private static final long serialVersionUID = 1675157277;

    /**
     * The reference instance of <code>stroom.STRM_PROCESSOR</code>
     */
    public static final StrmProcessor STRM_PROCESSOR = new StrmProcessor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StrmProcessorRecord> getRecordType() {
        return StrmProcessorRecord.class;
    }

    /**
     * The column <code>stroom.STRM_PROCESSOR.ID</code>.
     */
    public final TableField<StrmProcessorRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.STRM_PROCESSOR.PIPE_UUID</code>.
     */
    public final TableField<StrmProcessorRecord, String> PIPE_UUID = createField("PIPE_UUID", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.STRM_PROCESSOR.PROCESSOR_ID</code>.
     */
    public final TableField<StrmProcessorRecord, Integer> PROCESSOR_ID = createField("PROCESSOR_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.STRM_PROCESSOR</code> table reference
     */
    public StrmProcessor() {
        this(DSL.name("STRM_PROCESSOR"), null);
    }

    /**
     * Create an aliased <code>stroom.STRM_PROCESSOR</code> table reference
     */
    public StrmProcessor(String alias) {
        this(DSL.name(alias), STRM_PROCESSOR);
    }

    /**
     * Create an aliased <code>stroom.STRM_PROCESSOR</code> table reference
     */
    public StrmProcessor(Name alias) {
        this(alias, STRM_PROCESSOR);
    }

    private StrmProcessor(Name alias, Table<StrmProcessorRecord> aliased) {
        this(alias, aliased, null);
    }

    private StrmProcessor(Name alias, Table<StrmProcessorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STRM_PROCESSOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StrmProcessorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STRM_PROCESSOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StrmProcessorRecord> getPrimaryKey() {
        return Keys.KEY_STRM_PROCESSOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StrmProcessorRecord>> getKeys() {
        return Arrays.<UniqueKey<StrmProcessorRecord>>asList(Keys.KEY_STRM_PROCESSOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StrmProcessor as(String alias) {
        return new StrmProcessor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StrmProcessor as(Name alias) {
        return new StrmProcessor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StrmProcessor rename(String name) {
        return new StrmProcessor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StrmProcessor rename(Name name) {
        return new StrmProcessor(name, null);
    }
}
