/*
 * This file is generated by jOOQ.
 */
package stroom.processor.impl.db.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.processor.impl.db.jooq.tables.ProcessorFilterTracker;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessorFilterTrackerRecord extends UpdatableRecordImpl<ProcessorFilterTrackerRecord> implements Record12<Integer, Byte, Long, Long, Long, Long, Long, Long, Integer, String, Long, Long> {

    private static final long serialVersionUID = -348158720;

    /**
     * Setter for <code>stroom.processor_filter_tracker.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.version</code>.
     */
    public void setVersion(Byte value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.version</code>.
     */
    public Byte getVersion() {
        return (Byte) get(1);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.min_stream_id</code>.
     */
    public void setMinStreamId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.min_stream_id</code>.
     */
    public Long getMinStreamId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.min_event_id</code>.
     */
    public void setMinEventId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.min_event_id</code>.
     */
    public Long getMinEventId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.min_stream_create_ms</code>.
     */
    public void setMinStreamCreateMs(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.min_stream_create_ms</code>.
     */
    public Long getMinStreamCreateMs() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.max_stream_create_ms</code>.
     */
    public void setMaxStreamCreateMs(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.max_stream_create_ms</code>.
     */
    public Long getMaxStreamCreateMs() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.stream_create_ms</code>.
     */
    public void setStreamCreateMs(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.stream_create_ms</code>.
     */
    public Long getStreamCreateMs() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.last_poll_ms</code>.
     */
    public void setLastPollMs(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.last_poll_ms</code>.
     */
    public Long getLastPollMs() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.last_poll_task_count</code>.
     */
    public void setLastPollTaskCount(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.last_poll_task_count</code>.
     */
    public Integer getLastPollTaskCount() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.status</code>.
     */
    public void setStatus(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.status</code>.
     */
    public String getStatus() {
        return (String) get(9);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.stream_count</code>.
     */
    public void setStreamCount(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.stream_count</code>.
     */
    public Long getStreamCount() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>stroom.processor_filter_tracker.event_count</code>.
     */
    public void setEventCount(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>stroom.processor_filter_tracker.event_count</code>.
     */
    public Long getEventCount() {
        return (Long) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<Integer, Byte, Long, Long, Long, Long, Long, Long, Integer, String, Long, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<Integer, Byte, Long, Long, Long, Long, Long, Long, Integer, String, Long, Long> valuesRow() {
        return (Row12) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field2() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field3() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.MIN_STREAM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.MIN_EVENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field5() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.MIN_STREAM_CREATE_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.MAX_STREAM_CREATE_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field7() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.STREAM_CREATE_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field8() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.LAST_POLL_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field9() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.LAST_POLL_TASK_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field10() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field11() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.STREAM_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field12() {
        return ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.EVENT_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component2() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component3() {
        return getMinStreamId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component4() {
        return getMinEventId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component5() {
        return getMinStreamCreateMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component6() {
        return getMaxStreamCreateMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component7() {
        return getStreamCreateMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component8() {
        return getLastPollMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component9() {
        return getLastPollTaskCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component10() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component11() {
        return getStreamCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component12() {
        return getEventCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value2() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value3() {
        return getMinStreamId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getMinEventId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value5() {
        return getMinStreamCreateMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getMaxStreamCreateMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value7() {
        return getStreamCreateMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value8() {
        return getLastPollMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value9() {
        return getLastPollTaskCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value10() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value11() {
        return getStreamCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value12() {
        return getEventCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value2(Byte value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value3(Long value) {
        setMinStreamId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value4(Long value) {
        setMinEventId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value5(Long value) {
        setMinStreamCreateMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value6(Long value) {
        setMaxStreamCreateMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value7(Long value) {
        setStreamCreateMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value8(Long value) {
        setLastPollMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value9(Integer value) {
        setLastPollTaskCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value10(String value) {
        setStatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value11(Long value) {
        setStreamCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord value12(Long value) {
        setEventCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorFilterTrackerRecord values(Integer value1, Byte value2, Long value3, Long value4, Long value5, Long value6, Long value7, Long value8, Integer value9, String value10, Long value11, Long value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProcessorFilterTrackerRecord
     */
    public ProcessorFilterTrackerRecord() {
        super(ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER);
    }

    /**
     * Create a detached, initialised ProcessorFilterTrackerRecord
     */
    public ProcessorFilterTrackerRecord(Integer id, Byte version, Long minStreamId, Long minEventId, Long minStreamCreateMs, Long maxStreamCreateMs, Long streamCreateMs, Long lastPollMs, Integer lastPollTaskCount, String status, Long streamCount, Long eventCount) {
        super(ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER);

        set(0, id);
        set(1, version);
        set(2, minStreamId);
        set(3, minEventId);
        set(4, minStreamCreateMs);
        set(5, maxStreamCreateMs);
        set(6, streamCreateMs);
        set(7, lastPollMs);
        set(8, lastPollTaskCount);
        set(9, status);
        set(10, streamCount);
        set(11, eventCount);
    }
}
