/*
 * This file is generated by jOOQ.
 */
package stroom.processor.impl.db.jooq;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import stroom.processor.impl.db.jooq.tables.Processor;
import stroom.processor.impl.db.jooq.tables.ProcessorFilter;
import stroom.processor.impl.db.jooq.tables.ProcessorFilterTask;
import stroom.processor.impl.db.jooq.tables.ProcessorFilterTracker;
import stroom.processor.impl.db.jooq.tables.records.ProcessorFilterRecord;
import stroom.processor.impl.db.jooq.tables.records.ProcessorFilterTaskRecord;
import stroom.processor.impl.db.jooq.tables.records.ProcessorFilterTrackerRecord;
import stroom.processor.impl.db.jooq.tables.records.ProcessorRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>stroom</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ProcessorRecord, Integer> IDENTITY_PROCESSOR = Identities0.IDENTITY_PROCESSOR;
    public static final Identity<ProcessorFilterRecord, Integer> IDENTITY_PROCESSOR_FILTER = Identities0.IDENTITY_PROCESSOR_FILTER;
    public static final Identity<ProcessorFilterTaskRecord, Long> IDENTITY_PROCESSOR_FILTER_TASK = Identities0.IDENTITY_PROCESSOR_FILTER_TASK;
    public static final Identity<ProcessorFilterTrackerRecord, Integer> IDENTITY_PROCESSOR_FILTER_TRACKER = Identities0.IDENTITY_PROCESSOR_FILTER_TRACKER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ProcessorRecord> KEY_PROCESSOR_PRIMARY = UniqueKeys0.KEY_PROCESSOR_PRIMARY;
    public static final UniqueKey<ProcessorFilterRecord> KEY_PROCESSOR_FILTER_PRIMARY = UniqueKeys0.KEY_PROCESSOR_FILTER_PRIMARY;
    public static final UniqueKey<ProcessorFilterTaskRecord> KEY_PROCESSOR_FILTER_TASK_PRIMARY = UniqueKeys0.KEY_PROCESSOR_FILTER_TASK_PRIMARY;
    public static final UniqueKey<ProcessorFilterTrackerRecord> KEY_PROCESSOR_FILTER_TRACKER_PRIMARY = UniqueKeys0.KEY_PROCESSOR_FILTER_TRACKER_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ProcessorFilterRecord, ProcessorRecord> PROCESSOR_FILTER_FK_PROCESSOR_ID = ForeignKeys0.PROCESSOR_FILTER_FK_PROCESSOR_ID;
    public static final ForeignKey<ProcessorFilterRecord, ProcessorFilterTrackerRecord> PROCESSOR_FILTER_FK_PROCESSOR_FILTER_TRACKER_ID = ForeignKeys0.PROCESSOR_FILTER_FK_PROCESSOR_FILTER_TRACKER_ID;
    public static final ForeignKey<ProcessorFilterTaskRecord, ProcessorFilterRecord> PROCESSOR_FILTER_TASK_FK_PROCESSOR_FILTER_ID = ForeignKeys0.PROCESSOR_FILTER_TASK_FK_PROCESSOR_FILTER_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<ProcessorRecord, Integer> IDENTITY_PROCESSOR = Internal.createIdentity(Processor.PROCESSOR, Processor.PROCESSOR.ID);
        public static Identity<ProcessorFilterRecord, Integer> IDENTITY_PROCESSOR_FILTER = Internal.createIdentity(ProcessorFilter.PROCESSOR_FILTER, ProcessorFilter.PROCESSOR_FILTER.ID);
        public static Identity<ProcessorFilterTaskRecord, Long> IDENTITY_PROCESSOR_FILTER_TASK = Internal.createIdentity(ProcessorFilterTask.PROCESSOR_FILTER_TASK, ProcessorFilterTask.PROCESSOR_FILTER_TASK.ID);
        public static Identity<ProcessorFilterTrackerRecord, Integer> IDENTITY_PROCESSOR_FILTER_TRACKER = Internal.createIdentity(ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER, ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ProcessorRecord> KEY_PROCESSOR_PRIMARY = Internal.createUniqueKey(Processor.PROCESSOR, "KEY_processor_PRIMARY", Processor.PROCESSOR.ID);
        public static final UniqueKey<ProcessorFilterRecord> KEY_PROCESSOR_FILTER_PRIMARY = Internal.createUniqueKey(ProcessorFilter.PROCESSOR_FILTER, "KEY_processor_filter_PRIMARY", ProcessorFilter.PROCESSOR_FILTER.ID);
        public static final UniqueKey<ProcessorFilterTaskRecord> KEY_PROCESSOR_FILTER_TASK_PRIMARY = Internal.createUniqueKey(ProcessorFilterTask.PROCESSOR_FILTER_TASK, "KEY_processor_filter_task_PRIMARY", ProcessorFilterTask.PROCESSOR_FILTER_TASK.ID);
        public static final UniqueKey<ProcessorFilterTrackerRecord> KEY_PROCESSOR_FILTER_TRACKER_PRIMARY = Internal.createUniqueKey(ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER, "KEY_processor_filter_tracker_PRIMARY", ProcessorFilterTracker.PROCESSOR_FILTER_TRACKER.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<ProcessorFilterRecord, ProcessorRecord> PROCESSOR_FILTER_FK_PROCESSOR_ID = Internal.createForeignKey(Keys.KEY_PROCESSOR_PRIMARY, ProcessorFilter.PROCESSOR_FILTER, "processor_filter_fk_processor_id", ProcessorFilter.PROCESSOR_FILTER.FK_PROCESSOR_ID);
        public static final ForeignKey<ProcessorFilterRecord, ProcessorFilterTrackerRecord> PROCESSOR_FILTER_FK_PROCESSOR_FILTER_TRACKER_ID = Internal.createForeignKey(Keys.KEY_PROCESSOR_FILTER_TRACKER_PRIMARY, ProcessorFilter.PROCESSOR_FILTER, "processor_filter_fk_processor_filter_tracker_id", ProcessorFilter.PROCESSOR_FILTER.FK_PROCESSOR_FILTER_TRACKER_ID);
        public static final ForeignKey<ProcessorFilterTaskRecord, ProcessorFilterRecord> PROCESSOR_FILTER_TASK_FK_PROCESSOR_FILTER_ID = Internal.createForeignKey(Keys.KEY_PROCESSOR_FILTER_PRIMARY, ProcessorFilterTask.PROCESSOR_FILTER_TASK, "processor_filter_task_fk_processor_filter_id", ProcessorFilterTask.PROCESSOR_FILTER_TASK.FK_PROCESSOR_FILTER_ID);
    }
}
