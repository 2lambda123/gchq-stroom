/*
 * This file is generated by jOOQ.
 */
package stroom.processor.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.processor.impl.db.jooq.Indexes;
import stroom.processor.impl.db.jooq.Keys;
import stroom.processor.impl.db.jooq.Stroom;
import stroom.processor.impl.db.jooq.tables.records.ProcessorNodeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessorNode extends TableImpl<ProcessorNodeRecord> {

    private static final long serialVersionUID = 749658397;

    /**
     * The reference instance of <code>stroom.processor_node</code>
     */
    public static final ProcessorNode PROCESSOR_NODE = new ProcessorNode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessorNodeRecord> getRecordType() {
        return ProcessorNodeRecord.class;
    }

    /**
     * The column <code>stroom.processor_node.id</code>.
     */
    public final TableField<ProcessorNodeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.processor_node.name</code>.
     */
    public final TableField<ProcessorNodeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.processor_node</code> table reference
     */
    public ProcessorNode() {
        this(DSL.name("processor_node"), null);
    }

    /**
     * Create an aliased <code>stroom.processor_node</code> table reference
     */
    public ProcessorNode(String alias) {
        this(DSL.name(alias), PROCESSOR_NODE);
    }

    /**
     * Create an aliased <code>stroom.processor_node</code> table reference
     */
    public ProcessorNode(Name alias) {
        this(alias, PROCESSOR_NODE);
    }

    private ProcessorNode(Name alias, Table<ProcessorNodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProcessorNode(Name alias, Table<ProcessorNodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProcessorNode(Table<O> child, ForeignKey<O, ProcessorNodeRecord> key) {
        super(child, key, PROCESSOR_NODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESSOR_NODE_NAME, Indexes.PROCESSOR_NODE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProcessorNodeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROCESSOR_NODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProcessorNodeRecord> getPrimaryKey() {
        return Keys.KEY_PROCESSOR_NODE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProcessorNodeRecord>> getKeys() {
        return Arrays.<UniqueKey<ProcessorNodeRecord>>asList(Keys.KEY_PROCESSOR_NODE_PRIMARY, Keys.KEY_PROCESSOR_NODE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorNode as(String alias) {
        return new ProcessorNode(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessorNode as(Name alias) {
        return new ProcessorNode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessorNode rename(String name) {
        return new ProcessorNode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessorNode rename(Name name) {
        return new ProcessorNode(name, null);
    }
}
