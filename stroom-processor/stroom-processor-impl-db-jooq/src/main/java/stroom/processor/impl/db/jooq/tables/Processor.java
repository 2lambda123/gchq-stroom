/*
 * This file is generated by jOOQ.
 */
package stroom.processor.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.processor.impl.db.jooq.Indexes;
import stroom.processor.impl.db.jooq.Keys;
import stroom.processor.impl.db.jooq.Stroom;
import stroom.processor.impl.db.jooq.tables.records.ProcessorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Processor extends TableImpl<ProcessorRecord> {

    private static final long serialVersionUID = -152426446;

    /**
     * The reference instance of <code>stroom.processor</code>
     */
    public static final Processor PROCESSOR = new Processor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessorRecord> getRecordType() {
        return ProcessorRecord.class;
    }

    /**
     * The column <code>stroom.processor.id</code>.
     */
    public final TableField<ProcessorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.processor.version</code>.
     */
    public final TableField<ProcessorRecord, Byte> VERSION = createField("version", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.processor.create_user</code>.
     */
    public final TableField<ProcessorRecord, String> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.processor.update_user</code>.
     */
    public final TableField<ProcessorRecord, String> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.processor.task_type</code>.
     */
    public final TableField<ProcessorRecord, String> TASK_TYPE = createField("task_type", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.processor.pipeline_uuid</code>.
     */
    public final TableField<ProcessorRecord, String> PIPELINE_UUID = createField("pipeline_uuid", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.processor.enabled</code>.
     */
    public final TableField<ProcessorRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>stroom.processor.create_time_ms</code>.
     */
    public final TableField<ProcessorRecord, Long> CREATE_TIME_MS = createField("create_time_ms", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.processor.update_time_ms</code>.
     */
    public final TableField<ProcessorRecord, Long> UPDATE_TIME_MS = createField("update_time_ms", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>stroom.processor</code> table reference
     */
    public Processor() {
        this(DSL.name("processor"), null);
    }

    /**
     * Create an aliased <code>stroom.processor</code> table reference
     */
    public Processor(String alias) {
        this(DSL.name(alias), PROCESSOR);
    }

    /**
     * Create an aliased <code>stroom.processor</code> table reference
     */
    public Processor(Name alias) {
        this(alias, PROCESSOR);
    }

    private Processor(Name alias, Table<ProcessorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Processor(Name alias, Table<ProcessorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Processor(Table<O> child, ForeignKey<O, ProcessorRecord> key) {
        super(child, key, PROCESSOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESSOR_PRIMARY, Indexes.PROCESSOR_STRM_PROC_FK_PIPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProcessorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROCESSOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProcessorRecord> getPrimaryKey() {
        return Keys.KEY_PROCESSOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProcessorRecord>> getKeys() {
        return Arrays.<UniqueKey<ProcessorRecord>>asList(Keys.KEY_PROCESSOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<ProcessorRecord, Byte> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Processor as(String alias) {
        return new Processor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Processor as(Name alias) {
        return new Processor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Processor rename(String name) {
        return new Processor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Processor rename(Name name) {
        return new Processor(name, null);
    }
}
