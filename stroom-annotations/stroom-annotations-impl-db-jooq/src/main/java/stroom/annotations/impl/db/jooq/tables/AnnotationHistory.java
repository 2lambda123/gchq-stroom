/*
 * This file is generated by jOOQ.
 */
package stroom.annotations.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.annotations.impl.db.jooq.Indexes;
import stroom.annotations.impl.db.jooq.Keys;
import stroom.annotations.impl.db.jooq.Stroom;
import stroom.annotations.impl.db.jooq.tables.records.AnnotationHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnnotationHistory extends TableImpl<AnnotationHistoryRecord> {

    private static final long serialVersionUID = 807377113;

    /**
     * The reference instance of <code>stroom.annotation_history</code>
     */
    public static final AnnotationHistory ANNOTATION_HISTORY = new AnnotationHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationHistoryRecord> getRecordType() {
        return AnnotationHistoryRecord.class;
    }

    /**
     * The column <code>stroom.annotation_history.id</code>.
     */
    public final TableField<AnnotationHistoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_history.version</code>.
     */
    public final TableField<AnnotationHistoryRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.create_time_ms</code>.
     */
    public final TableField<AnnotationHistoryRecord, Long> CREATE_TIME_MS = createField("create_time_ms", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.create_user</code>.
     */
    public final TableField<AnnotationHistoryRecord, String> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.update_time_ms</code>.
     */
    public final TableField<AnnotationHistoryRecord, Long> UPDATE_TIME_MS = createField("update_time_ms", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.update_user</code>.
     */
    public final TableField<AnnotationHistoryRecord, String> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.fk_annotation_id</code>.
     */
    public final TableField<AnnotationHistoryRecord, Integer> FK_ANNOTATION_ID = createField("fk_annotation_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.user_name</code>.
     */
    public final TableField<AnnotationHistoryRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.comment</code>.
     */
    public final TableField<AnnotationHistoryRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.annotation_history.status</code>.
     */
    public final TableField<AnnotationHistoryRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_history.assignee</code>.
     */
    public final TableField<AnnotationHistoryRecord, String> ASSIGNEE = createField("assignee", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.annotation_history</code> table reference
     */
    public AnnotationHistory() {
        this(DSL.name("annotation_history"), null);
    }

    /**
     * Create an aliased <code>stroom.annotation_history</code> table reference
     */
    public AnnotationHistory(String alias) {
        this(DSL.name(alias), ANNOTATION_HISTORY);
    }

    /**
     * Create an aliased <code>stroom.annotation_history</code> table reference
     */
    public AnnotationHistory(Name alias) {
        this(alias, ANNOTATION_HISTORY);
    }

    private AnnotationHistory(Name alias, Table<AnnotationHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnnotationHistory(Name alias, Table<AnnotationHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AnnotationHistory(Table<O> child, ForeignKey<O, AnnotationHistoryRecord> key) {
        super(child, key, ANNOTATION_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANNOTATION_HISTORY_ANNOTATION_HISTORY_FK_ANNOTATION_ID, Indexes.ANNOTATION_HISTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AnnotationHistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ANNOTATION_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AnnotationHistoryRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_HISTORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AnnotationHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<AnnotationHistoryRecord>>asList(Keys.KEY_ANNOTATION_HISTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AnnotationHistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnnotationHistoryRecord, ?>>asList(Keys.ANNOTATION_HISTORY_FK_ANNOTATION_ID);
    }

    public Annotation annotation() {
        return new Annotation(this, Keys.ANNOTATION_HISTORY_FK_ANNOTATION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<AnnotationHistoryRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnnotationHistory as(String alias) {
        return new AnnotationHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnnotationHistory as(Name alias) {
        return new AnnotationHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationHistory rename(String name) {
        return new AnnotationHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationHistory rename(Name name) {
        return new AnnotationHistory(name, null);
    }
}
