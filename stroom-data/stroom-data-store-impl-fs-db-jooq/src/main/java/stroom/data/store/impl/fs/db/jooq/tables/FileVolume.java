/*
 * This file is generated by jOOQ.
 */
package stroom.data.store.impl.fs.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.data.store.impl.fs.db.jooq.Indexes;
import stroom.data.store.impl.fs.db.jooq.Keys;
import stroom.data.store.impl.fs.db.jooq.Stroom;
import stroom.data.store.impl.fs.db.jooq.tables.records.FileVolumeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileVolume extends TableImpl<FileVolumeRecord> {

    private static final long serialVersionUID = -580075700;

    /**
     * The reference instance of <code>stroom.file_volume</code>
     */
    public static final FileVolume FILE_VOLUME = new FileVolume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileVolumeRecord> getRecordType() {
        return FileVolumeRecord.class;
    }

    /**
     * The column <code>stroom.file_volume.id</code>.
     */
    public final TableField<FileVolumeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.file_volume.version</code>.
     */
    public final TableField<FileVolumeRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.file_volume.create_time_ms</code>.
     */
    public final TableField<FileVolumeRecord, Long> CREATE_TIME_MS = createField("create_time_ms", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.file_volume.create_user</code>.
     */
    public final TableField<FileVolumeRecord, String> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.file_volume.update_time_ms</code>.
     */
    public final TableField<FileVolumeRecord, Long> UPDATE_TIME_MS = createField("update_time_ms", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.file_volume.update_user</code>.
     */
    public final TableField<FileVolumeRecord, String> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.file_volume.path</code>.
     */
    public final TableField<FileVolumeRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.file_volume.status</code>.
     */
    public final TableField<FileVolumeRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.file_volume.byte_limit</code>.
     */
    public final TableField<FileVolumeRecord, Long> BYTE_LIMIT = createField("byte_limit", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.file_volume.fk_file_volume_state_id</code>.
     */
    public final TableField<FileVolumeRecord, Integer> FK_FILE_VOLUME_STATE_ID = createField("fk_file_volume_state_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.file_volume</code> table reference
     */
    public FileVolume() {
        this(DSL.name("file_volume"), null);
    }

    /**
     * Create an aliased <code>stroom.file_volume</code> table reference
     */
    public FileVolume(String alias) {
        this(DSL.name(alias), FILE_VOLUME);
    }

    /**
     * Create an aliased <code>stroom.file_volume</code> table reference
     */
    public FileVolume(Name alias) {
        this(alias, FILE_VOLUME);
    }

    private FileVolume(Name alias, Table<FileVolumeRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileVolume(Name alias, Table<FileVolumeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FileVolume(Table<O> child, ForeignKey<O, FileVolumeRecord> key) {
        super(child, key, FILE_VOLUME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FILE_VOLUME_FILE_VOLUME_FK_FILE_VOLUME_STATE_ID, Indexes.FILE_VOLUME_PATH, Indexes.FILE_VOLUME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FileVolumeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FILE_VOLUME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FileVolumeRecord> getPrimaryKey() {
        return Keys.KEY_FILE_VOLUME_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FileVolumeRecord>> getKeys() {
        return Arrays.<UniqueKey<FileVolumeRecord>>asList(Keys.KEY_FILE_VOLUME_PRIMARY, Keys.KEY_FILE_VOLUME_PATH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FileVolumeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FileVolumeRecord, ?>>asList(Keys.FILE_VOLUME_FK_FILE_VOLUME_STATE_ID);
    }

    public FileVolumeState fileVolumeState() {
        return new FileVolumeState(this, Keys.FILE_VOLUME_FK_FILE_VOLUME_STATE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<FileVolumeRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileVolume as(String alias) {
        return new FileVolume(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileVolume as(Name alias) {
        return new FileVolume(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileVolume rename(String name) {
        return new FileVolume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileVolume rename(Name name) {
        return new FileVolume(name, null);
    }
}
