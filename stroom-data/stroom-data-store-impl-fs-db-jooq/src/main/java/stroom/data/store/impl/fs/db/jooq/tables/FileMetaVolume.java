/*
 * This file is generated by jOOQ.
 */
package stroom.data.store.impl.fs.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.data.store.impl.fs.db.jooq.Indexes;
import stroom.data.store.impl.fs.db.jooq.Keys;
import stroom.data.store.impl.fs.db.jooq.Stroom;
import stroom.data.store.impl.fs.db.jooq.tables.records.FileMetaVolumeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileMetaVolume extends TableImpl<FileMetaVolumeRecord> {

    private static final long serialVersionUID = 1012911163;

    /**
     * The reference instance of <code>stroom.file_meta_volume</code>
     */
    public static final FileMetaVolume FILE_META_VOLUME = new FileMetaVolume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileMetaVolumeRecord> getRecordType() {
        return FileMetaVolumeRecord.class;
    }

    /**
     * The column <code>stroom.file_meta_volume.meta_id</code>.
     */
    public final TableField<FileMetaVolumeRecord, Long> META_ID = createField("meta_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.file_meta_volume.file_volume_id</code>.
     */
    public final TableField<FileMetaVolumeRecord, Integer> FILE_VOLUME_ID = createField("file_volume_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.file_meta_volume</code> table reference
     */
    public FileMetaVolume() {
        this(DSL.name("file_meta_volume"), null);
    }

    /**
     * Create an aliased <code>stroom.file_meta_volume</code> table reference
     */
    public FileMetaVolume(String alias) {
        this(DSL.name(alias), FILE_META_VOLUME);
    }

    /**
     * Create an aliased <code>stroom.file_meta_volume</code> table reference
     */
    public FileMetaVolume(Name alias) {
        this(alias, FILE_META_VOLUME);
    }

    private FileMetaVolume(Name alias, Table<FileMetaVolumeRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileMetaVolume(Name alias, Table<FileMetaVolumeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FileMetaVolume(Table<O> child, ForeignKey<O, FileMetaVolumeRecord> key) {
        super(child, key, FILE_META_VOLUME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FILE_META_VOLUME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FileMetaVolumeRecord> getPrimaryKey() {
        return Keys.KEY_FILE_META_VOLUME_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FileMetaVolumeRecord>> getKeys() {
        return Arrays.<UniqueKey<FileMetaVolumeRecord>>asList(Keys.KEY_FILE_META_VOLUME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileMetaVolume as(String alias) {
        return new FileMetaVolume(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileMetaVolume as(Name alias) {
        return new FileMetaVolume(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMetaVolume rename(String name) {
        return new FileMetaVolume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMetaVolume rename(Name name) {
        return new FileMetaVolume(name, null);
    }
}
