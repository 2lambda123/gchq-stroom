/*
 * This file is generated by jOOQ.
 */
package stroom.activity.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.activity.impl.db.jooq.Indexes;
import stroom.activity.impl.db.jooq.Keys;
import stroom.activity.impl.db.jooq.Stroom;
import stroom.activity.impl.db.jooq.tables.records.ActivityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activity extends TableImpl<ActivityRecord> {

    private static final long serialVersionUID = -717559734;

    /**
     * The reference instance of <code>stroom.ACTIVITY</code>
     */
    public static final Activity ACTIVITY = new Activity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityRecord> getRecordType() {
        return ActivityRecord.class;
    }

    /**
     * The column <code>stroom.ACTIVITY.ID</code>.
     */
    public final TableField<ActivityRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.ACTIVITY.VER</code>.
     */
    public final TableField<ActivityRecord, Byte> VER = createField(DSL.name("VER"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.ACTIVITY.CRT_MS</code>.
     */
    public final TableField<ActivityRecord, Long> CRT_MS = createField(DSL.name("CRT_MS"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.ACTIVITY.CRT_USER</code>.
     */
    public final TableField<ActivityRecord, String> CRT_USER = createField(DSL.name("CRT_USER"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.ACTIVITY.UPD_MS</code>.
     */
    public final TableField<ActivityRecord, Long> UPD_MS = createField(DSL.name("UPD_MS"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.ACTIVITY.UPD_USER</code>.
     */
    public final TableField<ActivityRecord, String> UPD_USER = createField(DSL.name("UPD_USER"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.ACTIVITY.USER_ID</code>.
     */
    public final TableField<ActivityRecord, String> USER_ID = createField(DSL.name("USER_ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.ACTIVITY.JSON</code>.
     */
    public final TableField<ActivityRecord, String> JSON = createField(DSL.name("JSON"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>stroom.ACTIVITY</code> table reference
     */
    public Activity() {
        this(DSL.name("ACTIVITY"), null);
    }

    /**
     * Create an aliased <code>stroom.ACTIVITY</code> table reference
     */
    public Activity(String alias) {
        this(DSL.name(alias), ACTIVITY);
    }

    /**
     * Create an aliased <code>stroom.ACTIVITY</code> table reference
     */
    public Activity(Name alias) {
        this(alias, ACTIVITY);
    }

    private Activity(Name alias, Table<ActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activity(Name alias, Table<ActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Activity(Table<O> child, ForeignKey<O, ActivityRecord> key) {
        super(child, key, ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACTIVITY_PRIMARY);
    }

    @Override
    public Identity<ActivityRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACTIVITY;
    }

    @Override
    public UniqueKey<ActivityRecord> getPrimaryKey() {
        return Keys.KEY_ACTIVITY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActivityRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivityRecord>>asList(Keys.KEY_ACTIVITY_PRIMARY);
    }

    @Override
    public Activity as(String alias) {
        return new Activity(DSL.name(alias), this);
    }

    @Override
    public Activity as(Name alias) {
        return new Activity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activity rename(String name) {
        return new Activity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activity rename(Name name) {
        return new Activity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Byte, Long, String, Long, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
